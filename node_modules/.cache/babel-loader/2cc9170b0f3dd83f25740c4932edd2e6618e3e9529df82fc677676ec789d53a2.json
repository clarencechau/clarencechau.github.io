{"ast":null,"code":"'use client';\n\nimport _objectSpread from \"/Users/clarencechau/Documents/projects/personal-website/clarencechau.github.io/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _slicedToArray from \"/Users/clarencechau/Documents/projects/personal-website/clarencechau.github.io/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport * as React from 'react';\nimport { DEFAULT_MODE_STORAGE_KEY, DEFAULT_COLOR_SCHEME_STORAGE_KEY } from \"../InitColorSchemeScript/InitColorSchemeScript.js\";\nexport function getSystemMode(mode) {\n  if (typeof window !== 'undefined' && typeof window.matchMedia === 'function' && mode === 'system') {\n    var mql = window.matchMedia('(prefers-color-scheme: dark)');\n    if (mql.matches) {\n      return 'dark';\n    }\n    return 'light';\n  }\n  return undefined;\n}\nfunction processState(state, callback) {\n  if (state.mode === 'light' || state.mode === 'system' && state.systemMode === 'light') {\n    return callback('light');\n  }\n  if (state.mode === 'dark' || state.mode === 'system' && state.systemMode === 'dark') {\n    return callback('dark');\n  }\n  return undefined;\n}\nexport function getColorScheme(state) {\n  return processState(state, function (mode) {\n    if (mode === 'light') {\n      return state.lightColorScheme;\n    }\n    if (mode === 'dark') {\n      return state.darkColorScheme;\n    }\n    return undefined;\n  });\n}\nfunction initializeValue(key, defaultValue) {\n  if (typeof window === 'undefined') {\n    return undefined;\n  }\n  var value;\n  try {\n    value = localStorage.getItem(key) || undefined;\n    if (!value) {\n      // the first time that user enters the site.\n      localStorage.setItem(key, defaultValue);\n    }\n  } catch (_unused) {\n    // Unsupported\n  }\n  return value || defaultValue;\n}\nexport default function useCurrentColorScheme(options) {\n  var _options$defaultMode = options.defaultMode,\n    defaultMode = _options$defaultMode === void 0 ? 'light' : _options$defaultMode,\n    defaultLightColorScheme = options.defaultLightColorScheme,\n    defaultDarkColorScheme = options.defaultDarkColorScheme,\n    _options$supportedCol = options.supportedColorSchemes,\n    supportedColorSchemes = _options$supportedCol === void 0 ? [] : _options$supportedCol,\n    _options$modeStorageK = options.modeStorageKey,\n    modeStorageKey = _options$modeStorageK === void 0 ? DEFAULT_MODE_STORAGE_KEY : _options$modeStorageK,\n    _options$colorSchemeS = options.colorSchemeStorageKey,\n    colorSchemeStorageKey = _options$colorSchemeS === void 0 ? DEFAULT_COLOR_SCHEME_STORAGE_KEY : _options$colorSchemeS,\n    _options$storageWindo = options.storageWindow,\n    storageWindow = _options$storageWindo === void 0 ? typeof window === 'undefined' ? undefined : window : _options$storageWindo,\n    _options$noSsr = options.noSsr,\n    noSsr = _options$noSsr === void 0 ? false : _options$noSsr;\n  var joinedColorSchemes = supportedColorSchemes.join(',');\n  var isMultiSchemes = supportedColorSchemes.length > 1;\n  var _React$useState = React.useState(function () {\n      var initialMode = initializeValue(modeStorageKey, defaultMode);\n      var lightColorScheme = initializeValue(\"\".concat(colorSchemeStorageKey, \"-light\"), defaultLightColorScheme);\n      var darkColorScheme = initializeValue(\"\".concat(colorSchemeStorageKey, \"-dark\"), defaultDarkColorScheme);\n      return {\n        mode: initialMode,\n        systemMode: getSystemMode(initialMode),\n        lightColorScheme: lightColorScheme,\n        darkColorScheme: darkColorScheme\n      };\n    }),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    state = _React$useState2[0],\n    setState = _React$useState2[1];\n  var _React$useState3 = React.useState(noSsr || !isMultiSchemes),\n    _React$useState4 = _slicedToArray(_React$useState3, 2),\n    isClient = _React$useState4[0],\n    setIsClient = _React$useState4[1];\n  React.useEffect(function () {\n    setIsClient(true); // to rerender the component after hydration\n  }, []);\n  var colorScheme = getColorScheme(state);\n  var setMode = React.useCallback(function (mode) {\n    setState(function (currentState) {\n      if (mode === currentState.mode) {\n        // do nothing if mode does not change\n        return currentState;\n      }\n      var newMode = mode !== null && mode !== void 0 ? mode : defaultMode;\n      try {\n        localStorage.setItem(modeStorageKey, newMode);\n      } catch (_unused2) {\n        // Unsupported\n      }\n      return _objectSpread(_objectSpread({}, currentState), {}, {\n        mode: newMode,\n        systemMode: getSystemMode(newMode)\n      });\n    });\n  }, [modeStorageKey, defaultMode]);\n  var setColorScheme = React.useCallback(function (value) {\n    if (!value) {\n      setState(function (currentState) {\n        try {\n          localStorage.setItem(\"\".concat(colorSchemeStorageKey, \"-light\"), defaultLightColorScheme);\n          localStorage.setItem(\"\".concat(colorSchemeStorageKey, \"-dark\"), defaultDarkColorScheme);\n        } catch (_unused3) {\n          // Unsupported\n        }\n        return _objectSpread(_objectSpread({}, currentState), {}, {\n          lightColorScheme: defaultLightColorScheme,\n          darkColorScheme: defaultDarkColorScheme\n        });\n      });\n    } else if (typeof value === 'string') {\n      if (value && !joinedColorSchemes.includes(value)) {\n        console.error(\"`\".concat(value, \"` does not exist in `theme.colorSchemes`.\"));\n      } else {\n        setState(function (currentState) {\n          var newState = _objectSpread({}, currentState);\n          processState(currentState, function (mode) {\n            try {\n              localStorage.setItem(\"\".concat(colorSchemeStorageKey, \"-\").concat(mode), value);\n            } catch (_unused4) {\n              // Unsupported\n            }\n            if (mode === 'light') {\n              newState.lightColorScheme = value;\n            }\n            if (mode === 'dark') {\n              newState.darkColorScheme = value;\n            }\n          });\n          return newState;\n        });\n      }\n    } else {\n      setState(function (currentState) {\n        var newState = _objectSpread({}, currentState);\n        var newLightColorScheme = value.light === null ? defaultLightColorScheme : value.light;\n        var newDarkColorScheme = value.dark === null ? defaultDarkColorScheme : value.dark;\n        if (newLightColorScheme) {\n          if (!joinedColorSchemes.includes(newLightColorScheme)) {\n            console.error(\"`\".concat(newLightColorScheme, \"` does not exist in `theme.colorSchemes`.\"));\n          } else {\n            newState.lightColorScheme = newLightColorScheme;\n            try {\n              localStorage.setItem(\"\".concat(colorSchemeStorageKey, \"-light\"), newLightColorScheme);\n            } catch (error) {\n              // Unsupported\n            }\n          }\n        }\n        if (newDarkColorScheme) {\n          if (!joinedColorSchemes.includes(newDarkColorScheme)) {\n            console.error(\"`\".concat(newDarkColorScheme, \"` does not exist in `theme.colorSchemes`.\"));\n          } else {\n            newState.darkColorScheme = newDarkColorScheme;\n            try {\n              localStorage.setItem(\"\".concat(colorSchemeStorageKey, \"-dark\"), newDarkColorScheme);\n            } catch (error) {\n              // Unsupported\n            }\n          }\n        }\n        return newState;\n      });\n    }\n  }, [joinedColorSchemes, colorSchemeStorageKey, defaultLightColorScheme, defaultDarkColorScheme]);\n  var handleMediaQuery = React.useCallback(function (event) {\n    if (state.mode === 'system') {\n      setState(function (currentState) {\n        var systemMode = event !== null && event !== void 0 && event.matches ? 'dark' : 'light';\n\n        // Early exit, nothing changed.\n        if (currentState.systemMode === systemMode) {\n          return currentState;\n        }\n        return _objectSpread(_objectSpread({}, currentState), {}, {\n          systemMode: systemMode\n        });\n      });\n    }\n  }, [state.mode]);\n\n  // Ref hack to avoid adding handleMediaQuery as a dep\n  var mediaListener = React.useRef(handleMediaQuery);\n  mediaListener.current = handleMediaQuery;\n  React.useEffect(function () {\n    if (typeof window.matchMedia !== 'function' || !isMultiSchemes) {\n      return undefined;\n    }\n    var handler = function handler() {\n      return mediaListener.current.apply(mediaListener, arguments);\n    };\n\n    // Always listen to System preference\n    var media = window.matchMedia('(prefers-color-scheme: dark)');\n\n    // Intentionally use deprecated listener methods to support iOS & old browsers\n    media.addListener(handler);\n    handler(media);\n    return function () {\n      media.removeListener(handler);\n    };\n  }, [isMultiSchemes]);\n\n  // Handle when localStorage has changed\n  React.useEffect(function () {\n    if (storageWindow && isMultiSchemes) {\n      var handleStorage = function handleStorage(event) {\n        var value = event.newValue;\n        if (typeof event.key === 'string' && event.key.startsWith(colorSchemeStorageKey) && (!value || joinedColorSchemes.match(value))) {\n          // If the key is deleted, value will be null then reset color scheme to the default one.\n          if (event.key.endsWith('light')) {\n            setColorScheme({\n              light: value\n            });\n          }\n          if (event.key.endsWith('dark')) {\n            setColorScheme({\n              dark: value\n            });\n          }\n        }\n        if (event.key === modeStorageKey && (!value || ['light', 'dark', 'system'].includes(value))) {\n          setMode(value || defaultMode);\n        }\n      };\n      // For syncing color-scheme changes between iframes\n      storageWindow.addEventListener('storage', handleStorage);\n      return function () {\n        storageWindow.removeEventListener('storage', handleStorage);\n      };\n    }\n    return undefined;\n  }, [setColorScheme, setMode, modeStorageKey, colorSchemeStorageKey, joinedColorSchemes, defaultMode, storageWindow, isMultiSchemes]);\n  return _objectSpread(_objectSpread({}, state), {}, {\n    mode: isClient ? state.mode : undefined,\n    systemMode: isClient ? state.systemMode : undefined,\n    colorScheme: isClient ? colorScheme : undefined,\n    setMode: setMode,\n    setColorScheme: setColorScheme\n  });\n}","map":{"version":3,"names":["_objectSpread","_slicedToArray","React","DEFAULT_MODE_STORAGE_KEY","DEFAULT_COLOR_SCHEME_STORAGE_KEY","getSystemMode","mode","window","matchMedia","mql","matches","undefined","processState","state","callback","systemMode","getColorScheme","lightColorScheme","darkColorScheme","initializeValue","key","defaultValue","value","localStorage","getItem","setItem","_unused","useCurrentColorScheme","options","_options$defaultMode","defaultMode","defaultLightColorScheme","defaultDarkColorScheme","_options$supportedCol","supportedColorSchemes","_options$modeStorageK","modeStorageKey","_options$colorSchemeS","colorSchemeStorageKey","_options$storageWindo","storageWindow","_options$noSsr","noSsr","joinedColorSchemes","join","isMultiSchemes","length","_React$useState","useState","initialMode","concat","_React$useState2","setState","_React$useState3","_React$useState4","isClient","setIsClient","useEffect","colorScheme","setMode","useCallback","currentState","newMode","_unused2","setColorScheme","_unused3","includes","console","error","newState","_unused4","newLightColorScheme","light","newDarkColorScheme","dark","handleMediaQuery","event","mediaListener","useRef","current","handler","apply","arguments","media","addListener","removeListener","handleStorage","newValue","startsWith","match","endsWith","addEventListener","removeEventListener"],"sources":["/Users/clarencechau/Documents/projects/personal-website/clarencechau.github.io/node_modules/@mui/system/esm/cssVars/useCurrentColorScheme.js"],"sourcesContent":["'use client';\n\nimport * as React from 'react';\nimport { DEFAULT_MODE_STORAGE_KEY, DEFAULT_COLOR_SCHEME_STORAGE_KEY } from \"../InitColorSchemeScript/InitColorSchemeScript.js\";\nexport function getSystemMode(mode) {\n  if (typeof window !== 'undefined' && typeof window.matchMedia === 'function' && mode === 'system') {\n    const mql = window.matchMedia('(prefers-color-scheme: dark)');\n    if (mql.matches) {\n      return 'dark';\n    }\n    return 'light';\n  }\n  return undefined;\n}\nfunction processState(state, callback) {\n  if (state.mode === 'light' || state.mode === 'system' && state.systemMode === 'light') {\n    return callback('light');\n  }\n  if (state.mode === 'dark' || state.mode === 'system' && state.systemMode === 'dark') {\n    return callback('dark');\n  }\n  return undefined;\n}\nexport function getColorScheme(state) {\n  return processState(state, mode => {\n    if (mode === 'light') {\n      return state.lightColorScheme;\n    }\n    if (mode === 'dark') {\n      return state.darkColorScheme;\n    }\n    return undefined;\n  });\n}\nfunction initializeValue(key, defaultValue) {\n  if (typeof window === 'undefined') {\n    return undefined;\n  }\n  let value;\n  try {\n    value = localStorage.getItem(key) || undefined;\n    if (!value) {\n      // the first time that user enters the site.\n      localStorage.setItem(key, defaultValue);\n    }\n  } catch {\n    // Unsupported\n  }\n  return value || defaultValue;\n}\nexport default function useCurrentColorScheme(options) {\n  const {\n    defaultMode = 'light',\n    defaultLightColorScheme,\n    defaultDarkColorScheme,\n    supportedColorSchemes = [],\n    modeStorageKey = DEFAULT_MODE_STORAGE_KEY,\n    colorSchemeStorageKey = DEFAULT_COLOR_SCHEME_STORAGE_KEY,\n    storageWindow = typeof window === 'undefined' ? undefined : window,\n    noSsr = false\n  } = options;\n  const joinedColorSchemes = supportedColorSchemes.join(',');\n  const isMultiSchemes = supportedColorSchemes.length > 1;\n  const [state, setState] = React.useState(() => {\n    const initialMode = initializeValue(modeStorageKey, defaultMode);\n    const lightColorScheme = initializeValue(`${colorSchemeStorageKey}-light`, defaultLightColorScheme);\n    const darkColorScheme = initializeValue(`${colorSchemeStorageKey}-dark`, defaultDarkColorScheme);\n    return {\n      mode: initialMode,\n      systemMode: getSystemMode(initialMode),\n      lightColorScheme,\n      darkColorScheme\n    };\n  });\n  const [isClient, setIsClient] = React.useState(noSsr || !isMultiSchemes);\n  React.useEffect(() => {\n    setIsClient(true); // to rerender the component after hydration\n  }, []);\n  const colorScheme = getColorScheme(state);\n  const setMode = React.useCallback(mode => {\n    setState(currentState => {\n      if (mode === currentState.mode) {\n        // do nothing if mode does not change\n        return currentState;\n      }\n      const newMode = mode ?? defaultMode;\n      try {\n        localStorage.setItem(modeStorageKey, newMode);\n      } catch {\n        // Unsupported\n      }\n      return {\n        ...currentState,\n        mode: newMode,\n        systemMode: getSystemMode(newMode)\n      };\n    });\n  }, [modeStorageKey, defaultMode]);\n  const setColorScheme = React.useCallback(value => {\n    if (!value) {\n      setState(currentState => {\n        try {\n          localStorage.setItem(`${colorSchemeStorageKey}-light`, defaultLightColorScheme);\n          localStorage.setItem(`${colorSchemeStorageKey}-dark`, defaultDarkColorScheme);\n        } catch {\n          // Unsupported\n        }\n        return {\n          ...currentState,\n          lightColorScheme: defaultLightColorScheme,\n          darkColorScheme: defaultDarkColorScheme\n        };\n      });\n    } else if (typeof value === 'string') {\n      if (value && !joinedColorSchemes.includes(value)) {\n        console.error(`\\`${value}\\` does not exist in \\`theme.colorSchemes\\`.`);\n      } else {\n        setState(currentState => {\n          const newState = {\n            ...currentState\n          };\n          processState(currentState, mode => {\n            try {\n              localStorage.setItem(`${colorSchemeStorageKey}-${mode}`, value);\n            } catch {\n              // Unsupported\n            }\n            if (mode === 'light') {\n              newState.lightColorScheme = value;\n            }\n            if (mode === 'dark') {\n              newState.darkColorScheme = value;\n            }\n          });\n          return newState;\n        });\n      }\n    } else {\n      setState(currentState => {\n        const newState = {\n          ...currentState\n        };\n        const newLightColorScheme = value.light === null ? defaultLightColorScheme : value.light;\n        const newDarkColorScheme = value.dark === null ? defaultDarkColorScheme : value.dark;\n        if (newLightColorScheme) {\n          if (!joinedColorSchemes.includes(newLightColorScheme)) {\n            console.error(`\\`${newLightColorScheme}\\` does not exist in \\`theme.colorSchemes\\`.`);\n          } else {\n            newState.lightColorScheme = newLightColorScheme;\n            try {\n              localStorage.setItem(`${colorSchemeStorageKey}-light`, newLightColorScheme);\n            } catch (error) {\n              // Unsupported\n            }\n          }\n        }\n        if (newDarkColorScheme) {\n          if (!joinedColorSchemes.includes(newDarkColorScheme)) {\n            console.error(`\\`${newDarkColorScheme}\\` does not exist in \\`theme.colorSchemes\\`.`);\n          } else {\n            newState.darkColorScheme = newDarkColorScheme;\n            try {\n              localStorage.setItem(`${colorSchemeStorageKey}-dark`, newDarkColorScheme);\n            } catch (error) {\n              // Unsupported\n            }\n          }\n        }\n        return newState;\n      });\n    }\n  }, [joinedColorSchemes, colorSchemeStorageKey, defaultLightColorScheme, defaultDarkColorScheme]);\n  const handleMediaQuery = React.useCallback(event => {\n    if (state.mode === 'system') {\n      setState(currentState => {\n        const systemMode = event?.matches ? 'dark' : 'light';\n\n        // Early exit, nothing changed.\n        if (currentState.systemMode === systemMode) {\n          return currentState;\n        }\n        return {\n          ...currentState,\n          systemMode\n        };\n      });\n    }\n  }, [state.mode]);\n\n  // Ref hack to avoid adding handleMediaQuery as a dep\n  const mediaListener = React.useRef(handleMediaQuery);\n  mediaListener.current = handleMediaQuery;\n  React.useEffect(() => {\n    if (typeof window.matchMedia !== 'function' || !isMultiSchemes) {\n      return undefined;\n    }\n    const handler = (...args) => mediaListener.current(...args);\n\n    // Always listen to System preference\n    const media = window.matchMedia('(prefers-color-scheme: dark)');\n\n    // Intentionally use deprecated listener methods to support iOS & old browsers\n    media.addListener(handler);\n    handler(media);\n    return () => {\n      media.removeListener(handler);\n    };\n  }, [isMultiSchemes]);\n\n  // Handle when localStorage has changed\n  React.useEffect(() => {\n    if (storageWindow && isMultiSchemes) {\n      const handleStorage = event => {\n        const value = event.newValue;\n        if (typeof event.key === 'string' && event.key.startsWith(colorSchemeStorageKey) && (!value || joinedColorSchemes.match(value))) {\n          // If the key is deleted, value will be null then reset color scheme to the default one.\n          if (event.key.endsWith('light')) {\n            setColorScheme({\n              light: value\n            });\n          }\n          if (event.key.endsWith('dark')) {\n            setColorScheme({\n              dark: value\n            });\n          }\n        }\n        if (event.key === modeStorageKey && (!value || ['light', 'dark', 'system'].includes(value))) {\n          setMode(value || defaultMode);\n        }\n      };\n      // For syncing color-scheme changes between iframes\n      storageWindow.addEventListener('storage', handleStorage);\n      return () => {\n        storageWindow.removeEventListener('storage', handleStorage);\n      };\n    }\n    return undefined;\n  }, [setColorScheme, setMode, modeStorageKey, colorSchemeStorageKey, joinedColorSchemes, defaultMode, storageWindow, isMultiSchemes]);\n  return {\n    ...state,\n    mode: isClient ? state.mode : undefined,\n    systemMode: isClient ? state.systemMode : undefined,\n    colorScheme: isClient ? colorScheme : undefined,\n    setMode,\n    setColorScheme\n  };\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}