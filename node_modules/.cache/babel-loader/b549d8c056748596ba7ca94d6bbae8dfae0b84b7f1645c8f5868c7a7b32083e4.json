{"ast":null,"code":"'use client';\n\nimport { jsx } from 'react/jsx-runtime';\nimport { cloneElement } from 'react';\nimport { useFocusTrap, useMergedRef } from '@mantine/hooks';\nimport { isElement } from '../../core/utils/is-element/is-element.mjs';\nimport 'clsx';\nimport '../../core/MantineProvider/Mantine.context.mjs';\nimport '../../core/MantineProvider/default-theme.mjs';\nimport '../../core/MantineProvider/MantineProvider.mjs';\nimport '../../core/MantineProvider/MantineThemeProvider/MantineThemeProvider.mjs';\nimport '../../core/MantineProvider/MantineCssVariables/MantineCssVariables.mjs';\nimport '../../core/Box/Box.mjs';\nimport '../../core/DirectionProvider/DirectionProvider.mjs';\nimport { VisuallyHidden } from '../VisuallyHidden/VisuallyHidden.mjs';\nfunction FocusTrap({\n  children,\n  active = true,\n  refProp = \"ref\",\n  innerRef\n}) {\n  const focusTrapRef = useFocusTrap(active);\n  const ref = useMergedRef(focusTrapRef, innerRef);\n  if (!isElement(children)) {\n    return children;\n  }\n  return cloneElement(children, {\n    [refProp]: ref\n  });\n}\nfunction FocusTrapInitialFocus(props) {\n  return /* @__PURE__ */jsx(VisuallyHidden, {\n    tabIndex: -1,\n    \"data-autofocus\": true,\n    ...props\n  });\n}\nFocusTrap.displayName = \"@mantine/core/FocusTrap\";\nFocusTrapInitialFocus.displayName = \"@mantine/core/FocusTrapInitialFocus\";\nFocusTrap.InitialFocus = FocusTrapInitialFocus;\nexport { FocusTrap, FocusTrapInitialFocus };","map":{"version":3,"names":["FocusTrap","children","active","refProp","innerRef","focusTrapRef","useFocusTrap","ref","useMergedRef","isElement","cloneElement","FocusTrapInitialFocus","props","jsx","VisuallyHidden","tabIndex","displayName","InitialFocus"],"sources":["/Users/clarencechau/Documents/projects/personal-website/clarencechau.github.io/node_modules/@mantine/core/src/components/FocusTrap/FocusTrap.tsx"],"sourcesContent":["import { cloneElement } from 'react';\nimport { useFocusTrap, useMergedRef } from '@mantine/hooks';\nimport { isElement } from '../../core';\nimport { VisuallyHidden } from '../VisuallyHidden';\n\nexport interface FocusTrapProps {\n  /** Element at which focus should be trapped, should support ref prop */\n  children: any;\n\n  /** Determines whether focus should be trapped within child element */\n  active?: boolean;\n\n  /** Prop that should be used to access component ref */\n  refProp?: string;\n\n  /** Assigns element `ref` */\n  innerRef?: React.ForwardedRef<any>;\n}\n\nexport function FocusTrap({\n  children,\n  active = true,\n  refProp = 'ref',\n  innerRef,\n}: FocusTrapProps): React.ReactElement {\n  const focusTrapRef = useFocusTrap(active);\n  const ref = useMergedRef(focusTrapRef, innerRef);\n\n  if (!isElement(children)) {\n    return children;\n  }\n\n  return cloneElement(children, { [refProp]: ref });\n}\n\nexport function FocusTrapInitialFocus(props: React.ComponentPropsWithoutRef<'span'>) {\n  return <VisuallyHidden tabIndex={-1} data-autofocus {...props} />;\n}\n\nFocusTrap.displayName = '@mantine/core/FocusTrap';\nFocusTrapInitialFocus.displayName = '@mantine/core/FocusTrapInitialFocus';\nFocusTrap.InitialFocus = FocusTrapInitialFocus;\n"],"mappings":";;;;;;;;;;;;;;;AAMO,SAASA,SAASA,CAAC;EACxBC,QAAQ;EACRC,MAAM,GAAG,IAAI;EACbC,OAAO,GAAG,KAAK;EACfC;AACF,CAAC,EAAE;EACD,MAAMC,YAAY,GAAGC,YAAY,CAACJ,MAAM,CAAC;EACzC,MAAMK,GAAG,GAAGC,YAAY,CAACH,YAAY,EAAED,QAAQ,CAAC;EAChD,IAAI,CAACK,SAAS,CAACR,QAAQ,CAAC,EAAE;IACxB,OAAOA,QAAQ;EACnB;EACE,OAAOS,YAAY,CAACT,QAAQ,EAAE;IAAE,CAACE,OAAO,GAAGI;EAAG,CAAE,CAAC;AACnD;AACO,SAASI,qBAAqBA,CAACC,KAAK,EAAE;EAC3C,sBAAuBC,GAAG,CAACC,cAAc,EAAE;IAAEC,QAAQ,EAAE,CAAC,CAAC;IAAE,gBAAgB,EAAE,IAAI;IAAE,GAAGH;EAAK,CAAE,CAAC;AAChG;AACAZ,SAAS,CAACgB,WAAW,GAAG,yBAAyB;AACjDL,qBAAqB,CAACK,WAAW,GAAG,qCAAqC;AACzEhB,SAAS,CAACiB,YAAY,GAAGN,qBAAqB"},"metadata":{},"sourceType":"module","externalDependencies":[]}