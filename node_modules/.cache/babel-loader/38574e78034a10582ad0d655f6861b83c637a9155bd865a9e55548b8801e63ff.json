{"ast":null,"code":"'use client';\n\nimport { jsxs, Fragment, jsx } from 'react/jsx-runtime';\nimport { useState, useRef, useEffect, createElement } from 'react';\nimport { useId, useUncontrolled, assignRef } from '@mantine/hooks';\nimport { getSize } from '../../core/utils/get-size/get-size.mjs';\nimport { createVarsResolver } from '../../core/styles-api/create-vars-resolver/create-vars-resolver.mjs';\nimport 'clsx';\nimport { useResolvedStylesApi } from '../../core/styles-api/use-resolved-styles-api/use-resolved-styles-api.mjs';\nimport { useStyles } from '../../core/styles-api/use-styles/use-styles.mjs';\nimport '../../core/MantineProvider/Mantine.context.mjs';\nimport '../../core/MantineProvider/default-theme.mjs';\nimport '../../core/MantineProvider/MantineProvider.mjs';\nimport '../../core/MantineProvider/MantineThemeProvider/MantineThemeProvider.mjs';\nimport { useProps } from '../../core/MantineProvider/use-props/use-props.mjs';\nimport '../../core/MantineProvider/MantineCssVariables/MantineCssVariables.mjs';\nimport '../../core/Box/Box.mjs';\nimport { factory } from '../../core/factory/factory.mjs';\nimport '../../core/DirectionProvider/DirectionProvider.mjs';\nimport { Group } from '../Group/Group.mjs';\nimport { Input } from '../Input/Input.mjs';\nimport '../Input/InputWrapper/InputWrapper.mjs';\nimport '../Input/InputDescription/InputDescription.mjs';\nimport '../Input/InputError/InputError.mjs';\nimport '../Input/InputLabel/InputLabel.mjs';\nimport '../Input/InputPlaceholder/InputPlaceholder.mjs';\nimport '../Input/InputWrapper.context.mjs';\nimport { InputBase } from '../InputBase/InputBase.mjs';\nimport { createPinArray } from './create-pin-array/create-pin-array.mjs';\nimport classes from './PinInput.module.css.mjs';\nconst regex = {\n  number: /^[0-9]+$/,\n  alphanumeric: /^[a-zA-Z0-9]+$/i\n};\nconst defaultProps = {\n  gap: \"sm\",\n  length: 4,\n  manageFocus: true,\n  oneTimeCode: true,\n  placeholder: \"\\u25CB\",\n  type: \"alphanumeric\",\n  ariaLabel: \"PinInput\"\n};\nconst varsResolver = createVarsResolver((_, {\n  size\n}) => ({\n  root: {\n    \"--pin-input-size\": getSize(size ?? defaultProps.size, \"pin-input-size\")\n  }\n}));\nconst PinInput = factory((props, ref) => {\n  const {\n    name,\n    form,\n    className,\n    value,\n    defaultValue,\n    variant,\n    gap,\n    style,\n    size,\n    classNames,\n    styles,\n    unstyled,\n    length,\n    onChange,\n    onComplete,\n    manageFocus,\n    autoFocus,\n    error,\n    radius,\n    disabled,\n    oneTimeCode,\n    placeholder,\n    type,\n    mask,\n    readOnly,\n    inputType,\n    inputMode,\n    ariaLabel,\n    vars,\n    id,\n    hiddenInputProps,\n    rootRef,\n    getInputProps,\n    ...others\n  } = useProps(\"PinInput\", defaultProps, props);\n  const uuid = useId(id);\n  const getStyles = useStyles({\n    name: \"PinInput\",\n    classes,\n    props,\n    className,\n    style,\n    classNames,\n    styles,\n    unstyled,\n    vars,\n    varsResolver\n  });\n  const {\n    resolvedClassNames,\n    resolvedStyles\n  } = useResolvedStylesApi({\n    classNames,\n    styles,\n    props\n  });\n  const [focusedIndex, setFocusedIndex] = useState(-1);\n  const [_value, setValues] = useUncontrolled({\n    value: value ? createPinArray(length ?? 0, value) : void 0,\n    defaultValue: defaultValue?.split(\"\").slice(0, length ?? 0),\n    finalValue: createPinArray(length ?? 0, \"\"),\n    onChange: typeof onChange === \"function\" ? val => {\n      onChange(val.join(\"\").trim());\n    } : void 0\n  });\n  const _valueToString = _value.join(\"\").trim();\n  const inputsRef = useRef([]);\n  const validate = code => {\n    const re = type instanceof RegExp ? type : type && type in regex ? regex[type] : null;\n    return re?.test(code);\n  };\n  const focusInputField = (dir, index, event) => {\n    if (!manageFocus) {\n      event?.preventDefault();\n      return;\n    }\n    if (dir === \"next\") {\n      const nextIndex = index + 1;\n      const canFocusNext = nextIndex < (length ?? 0);\n      if (canFocusNext) {\n        event?.preventDefault();\n        inputsRef.current[nextIndex].focus();\n      }\n    }\n    if (dir === \"prev\") {\n      const nextIndex = index - 1;\n      const canFocusNext = nextIndex > -1;\n      if (canFocusNext) {\n        event?.preventDefault();\n        inputsRef.current[nextIndex].focus();\n      }\n    }\n  };\n  const setFieldValue = (val, index) => {\n    const values = [..._value];\n    values[index] = val;\n    setValues(values);\n  };\n  const handleChange = (event, index) => {\n    const inputValue = event.target.value;\n    const nextCharOrValue = inputValue.length === 2 ? inputValue.split(\"\")[inputValue.length - 1] : inputValue;\n    const isValid = validate(nextCharOrValue);\n    if (nextCharOrValue.length < 2) {\n      if (isValid) {\n        setFieldValue(nextCharOrValue, index);\n        focusInputField(\"next\", index);\n      } else {\n        setFieldValue(\"\", index);\n      }\n    } else if (isValid) {\n      setValues(createPinArray(length ?? 0, inputValue));\n    }\n  };\n  const handleKeyDown = (event, index) => {\n    const {\n      ctrlKey,\n      metaKey,\n      key,\n      shiftKey,\n      target\n    } = event;\n    const inputValue = target.value;\n    if (inputMode === \"numeric\") {\n      const canTypeSign = key === \"Backspace\" || key === \"Tab\" || key === \"Control\" || key === \"Delete\" || ctrlKey && key === \"v\" || metaKey && key === \"v\" ? true : !Number.isNaN(Number(key));\n      if (!canTypeSign) {\n        event.preventDefault();\n      }\n    }\n    if (key === \"ArrowLeft\" || shiftKey && key === \"Tab\") {\n      focusInputField(\"prev\", index, event);\n    } else if (key === \"ArrowRight\" || key === \"Tab\" || key === \" \") {\n      focusInputField(\"next\", index, event);\n    } else if (key === \"Delete\") {\n      setFieldValue(\"\", index);\n    } else if (key === \"Backspace\") {\n      if (index !== 0) {\n        setFieldValue(\"\", index);\n        if (length === index + 1) {\n          if (event.target.value === \"\") {\n            focusInputField(\"prev\", index, event);\n          }\n        } else {\n          focusInputField(\"prev\", index, event);\n        }\n      }\n    } else if (inputValue.length > 0 && key === _value[index]) {\n      focusInputField(\"next\", index, event);\n    }\n  };\n  const handleFocus = (event, index) => {\n    event.target.select();\n    setFocusedIndex(index);\n  };\n  const handleBlur = () => {\n    setFocusedIndex(-1);\n  };\n  const handlePaste = event => {\n    event.preventDefault();\n    const copyValue = event.clipboardData.getData(\"text/plain\").replace(/[\\n\\r\\s]+/g, \"\");\n    const isValid = validate(copyValue.trim());\n    if (isValid) {\n      const copyValueToPinArray = createPinArray(length ?? 0, copyValue);\n      setValues(copyValueToPinArray);\n      focusInputField(\"next\", copyValueToPinArray.length - 2);\n    }\n  };\n  useEffect(() => {\n    if (_valueToString.length !== length) {\n      return;\n    }\n    onComplete?.(_valueToString);\n  }, [length, _valueToString]);\n  useEffect(() => {\n    if (length !== _value.length) {\n      setValues(createPinArray(length ?? 0, _value.join(\"\")));\n    }\n  }, [length, _value]);\n  useEffect(() => {\n    if (value === \"\") {\n      setValues(createPinArray(length ?? 0, value));\n    }\n  }, [value]);\n  useEffect(() => {\n    if (disabled) {\n      setFocusedIndex(-1);\n    }\n  }, [disabled]);\n  return /* @__PURE__ */jsxs(Fragment, {\n    children: [/* @__PURE__ */jsx(Group, {\n      ...others,\n      ...getStyles(\"root\"),\n      ref: rootRef,\n      role: \"group\",\n      id: uuid,\n      gap,\n      unstyled,\n      wrap: \"nowrap\",\n      variant,\n      __size: size,\n      dir: \"ltr\",\n      children: _value.map((char, index) => /* @__PURE__ */createElement(Input, {\n        component: \"input\",\n        ...getStyles(\"pinInput\", {\n          style: {\n            \"--input-padding\": \"0\",\n            \"--input-text-align\": \"center\"\n          }\n        }),\n        classNames: resolvedClassNames,\n        styles: resolvedStyles,\n        size,\n        __staticSelector: \"PinInput\",\n        id: `${uuid}-${index + 1}`,\n        key: `${uuid}-${index}`,\n        inputMode: inputMode || (type === \"number\" ? \"numeric\" : \"text\"),\n        onChange: event => handleChange(event, index),\n        onKeyDown: event => handleKeyDown(event, index),\n        onFocus: event => handleFocus(event, index),\n        onBlur: handleBlur,\n        onPaste: handlePaste,\n        type: inputType || (mask ? \"password\" : type === \"number\" ? \"tel\" : \"text\"),\n        radius,\n        error,\n        variant,\n        disabled,\n        ref: node => {\n          index === 0 && assignRef(ref, node);\n          inputsRef.current[index] = node;\n        },\n        autoComplete: oneTimeCode ? \"one-time-code\" : \"off\",\n        placeholder: focusedIndex === index ? \"\" : placeholder,\n        value: char,\n        autoFocus: autoFocus && index === 0,\n        unstyled,\n        \"aria-label\": ariaLabel,\n        readOnly,\n        ...getInputProps?.(index)\n      }))\n    }), /* @__PURE__ */jsx(\"input\", {\n      type: \"hidden\",\n      name,\n      form,\n      value: _valueToString,\n      ...hiddenInputProps\n    })]\n  });\n});\nPinInput.classes = {\n  ...classes,\n  ...InputBase.classes\n};\nPinInput.displayName = \"@mantine/core/PinInput\";\nexport { PinInput };","map":{"version":3,"names":["regex","number","alphanumeric","defaultProps","gap","length","manageFocus","oneTimeCode","placeholder","type","ariaLabel","varsResolver","createVarsResolver","_","size","root","getSize","PinInput","factory","props","ref","name","form","className","value","defaultValue","variant","style","classNames","styles","unstyled","onChange","onComplete","autoFocus","error","radius","disabled","mask","readOnly","inputType","inputMode","vars","id","hiddenInputProps","rootRef","getInputProps","others","useProps","uuid","useId","getStyles","useStyles","classes","resolvedClassNames","resolvedStyles","useResolvedStylesApi","focusedIndex","setFocusedIndex","useState","_value","setValues","useUncontrolled","createPinArray","split","slice","finalValue","val","join","trim","_valueToString","inputsRef","useRef","validate","code","re","RegExp","test","focusInputField","dir","index","event","preventDefault","nextIndex","canFocusNext","current","focus","setFieldValue","values","handleChange","inputValue","target","nextCharOrValue","isValid","handleKeyDown","ctrlKey","metaKey","key","shiftKey","canTypeSign","Number","isNaN","handleFocus","select","handleBlur","handlePaste","copyValue","clipboardData","getData","replace","copyValueToPinArray","useEffect","jsxs","Fragment","children","jsx","Group","role","wrap","__size","map","char","createElement","Input","component","__staticSelector","onKeyDown","onFocus","onBlur","onPaste","node","assignRef","autoComplete","InputBase","displayName"],"sources":["/Users/clarencechau/Documents/projects/personal-website/clarencechau.github.io/node_modules/@mantine/core/src/components/PinInput/PinInput.tsx"],"sourcesContent":["import { useEffect, useRef, useState } from 'react';\nimport { assignRef, useId, useUncontrolled } from '@mantine/hooks';\nimport {\n  BoxProps,\n  createVarsResolver,\n  ElementProps,\n  Factory,\n  factory,\n  getSize,\n  MantineRadius,\n  MantineSize,\n  MantineSpacing,\n  StylesApiProps,\n  useProps,\n  useResolvedStylesApi,\n  useStyles,\n} from '../../core';\nimport { Group } from '../Group';\nimport { Input, InputProps } from '../Input';\nimport { InputBase } from '../InputBase';\nimport { createPinArray } from './create-pin-array/create-pin-array';\nimport classes from './PinInput.module.css';\n\nconst regex = {\n  number: /^[0-9]+$/,\n  alphanumeric: /^[a-zA-Z0-9]+$/i,\n};\n\nexport type PinInputStylesNames = 'root' | 'pinInput' | 'input';\n\nexport type PinInputCssVariables = {\n  root: '--pin-input-size';\n};\n\nexport interface PinInputProps\n  extends BoxProps,\n    StylesApiProps<PinInputFactory>,\n    ElementProps<'div', 'onChange'> {\n  /** Hidden input `name` attribute */\n  name?: string;\n\n  /** Hidden input `form` attribute */\n  form?: string;\n\n  /** Key of `theme.spacing` or any valid CSS value to set `gap` between inputs, numbers are converted to rem, `'md'` by default */\n  gap?: MantineSpacing;\n\n  /** Key of `theme.radius` or any valid CSS value to set `border-radius`, numbers are converted to rem, `theme.defaultRadius` by default */\n  radius?: MantineRadius;\n\n  /** Controls inputs `width` and `height`, `'sm'` by default */\n  size?: MantineSize;\n\n  /** If set, the first input is focused when component is mounted, `false` by default */\n  autoFocus?: boolean;\n\n  /** Controlled component value */\n  value?: string;\n\n  /** Uncontrolled component default value */\n  defaultValue?: string;\n\n  /** Called when value changes */\n  onChange?: (value: string) => void;\n\n  /** Called when all inputs have value */\n  onComplete?: (value: string) => void;\n\n  /** Inputs placeholder, `'○'` by default */\n  placeholder?: string;\n\n  /** Determines whether focus should be moved automatically to the next input once filled, `true` by default */\n  manageFocus?: boolean;\n\n  /** Determines whether `autocomplete=\"one-time-code\"` attribute should be set on all inputs, `true` by default */\n  oneTimeCode?: boolean;\n\n  /** Base id used for all inputs. By default, inputs' ids are generated randomly. */\n  id?: string;\n\n  /** If set, `disabled` attribute is added to all inputs */\n  disabled?: boolean;\n\n  /** If set, adds error styles and `aria-invalid` attribute to all inputs */\n  error?: boolean;\n\n  /** Determines which values can be entered, `'alphanumeric'` by default */\n  type?: 'alphanumeric' | 'number' | RegExp;\n\n  /** Changes input type to `\"password\"`, `false` by default */\n  mask?: boolean;\n\n  /** Number of inputs, `4` by default */\n  length?: number;\n\n  /** If set, the user cannot edit the value */\n  readOnly?: boolean;\n\n  /** Inputs `type` attribute, inferred from the `type` prop if not specified */\n  inputType?: React.HTMLInputTypeAttribute;\n\n  /** `inputmode` attribute, inferred from the `type` prop if not specified */\n  inputMode?:\n    | 'none'\n    | 'text'\n    | 'tel'\n    | 'url'\n    | 'email'\n    | 'numeric'\n    | 'decimal'\n    | 'search'\n    | undefined;\n\n  /** `aria-label` for the inputs */\n  ariaLabel?: string;\n\n  /** Props passed down to the hidden input */\n  hiddenInputProps?: React.ComponentPropsWithoutRef<'input'>;\n\n  /** Assigns ref of the root element */\n  rootRef?: React.ForwardedRef<HTMLDivElement>;\n\n  /** Props added to the input element depending on its index */\n  getInputProps?: (index: number) => InputProps & ElementProps<'input', 'size'>;\n}\n\nexport type PinInputFactory = Factory<{\n  props: PinInputProps;\n  ref: HTMLInputElement;\n  stylesNames: PinInputStylesNames;\n  vars: PinInputCssVariables;\n}>;\n\nconst defaultProps: Partial<PinInputProps> = {\n  gap: 'sm',\n  length: 4,\n  manageFocus: true,\n  oneTimeCode: true,\n  placeholder: '○',\n  type: 'alphanumeric',\n  ariaLabel: 'PinInput',\n};\n\nconst varsResolver = createVarsResolver<PinInputFactory>((_, { size }) => ({\n  root: {\n    '--pin-input-size': getSize(size ?? defaultProps.size, 'pin-input-size'),\n  },\n}));\n\nexport const PinInput = factory<PinInputFactory>((props, ref) => {\n  const {\n    name,\n    form,\n    className,\n    value,\n    defaultValue,\n    variant,\n    gap,\n    style,\n    size,\n    classNames,\n    styles,\n    unstyled,\n    length,\n    onChange,\n    onComplete,\n    manageFocus,\n    autoFocus,\n    error,\n    radius,\n    disabled,\n    oneTimeCode,\n    placeholder,\n    type,\n    mask,\n    readOnly,\n    inputType,\n    inputMode,\n    ariaLabel,\n    vars,\n    id,\n    hiddenInputProps,\n    rootRef,\n    getInputProps,\n    ...others\n  } = useProps('PinInput', defaultProps, props);\n\n  const uuid = useId(id);\n\n  const getStyles = useStyles<PinInputFactory>({\n    name: 'PinInput',\n    classes,\n    props,\n    className,\n    style,\n    classNames,\n    styles,\n    unstyled,\n    vars,\n    varsResolver,\n  });\n\n  const { resolvedClassNames, resolvedStyles } = useResolvedStylesApi<PinInputFactory>({\n    classNames,\n    styles,\n    props,\n  });\n\n  const [focusedIndex, setFocusedIndex] = useState(-1);\n\n  const [_value, setValues] = useUncontrolled<string[]>({\n    value: value ? createPinArray(length ?? 0, value) : undefined,\n    defaultValue: defaultValue?.split('').slice(0, length ?? 0),\n    finalValue: createPinArray(length ?? 0, ''),\n    onChange:\n      typeof onChange === 'function'\n        ? (val) => {\n            onChange(val.join('').trim());\n          }\n        : undefined,\n  });\n  const _valueToString = _value.join('').trim();\n\n  const inputsRef = useRef<Array<HTMLInputElement>>([]);\n\n  const validate = (code: string) => {\n    const re = type instanceof RegExp ? type : type && type in regex ? regex[type] : null;\n\n    return re?.test(code);\n  };\n\n  const focusInputField = (\n    dir: 'next' | 'prev',\n    index: number,\n    event?: React.KeyboardEvent<HTMLInputElement>\n  ) => {\n    if (!manageFocus) {\n      event?.preventDefault();\n      return;\n    }\n\n    if (dir === 'next') {\n      const nextIndex = index + 1;\n      const canFocusNext = nextIndex < (length ?? 0);\n      if (canFocusNext) {\n        event?.preventDefault();\n        inputsRef.current[nextIndex].focus();\n      }\n    }\n\n    if (dir === 'prev') {\n      const nextIndex = index - 1;\n      const canFocusNext = nextIndex > -1;\n      if (canFocusNext) {\n        event?.preventDefault();\n        inputsRef.current[nextIndex].focus();\n      }\n    }\n  };\n\n  const setFieldValue = (val: string, index: number) => {\n    const values = [..._value];\n    values[index] = val;\n    setValues(values);\n  };\n\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>, index: number) => {\n    const inputValue = event.target.value;\n    const nextCharOrValue =\n      inputValue.length === 2 ? inputValue.split('')[inputValue.length - 1] : inputValue;\n\n    const isValid = validate(nextCharOrValue);\n\n    if (nextCharOrValue.length < 2) {\n      if (isValid) {\n        setFieldValue(nextCharOrValue, index);\n        focusInputField('next', index);\n      } else {\n        setFieldValue('', index);\n      }\n    } else if (isValid) {\n      setValues(createPinArray(length ?? 0, inputValue));\n    }\n  };\n\n  const handleKeyDown = (event: React.KeyboardEvent<HTMLInputElement>, index: number) => {\n    const { ctrlKey, metaKey, key, shiftKey, target } = event;\n    const inputValue = (target as HTMLInputElement).value;\n\n    if (inputMode === 'numeric') {\n      const canTypeSign =\n        key === 'Backspace' ||\n        key === 'Tab' ||\n        key === 'Control' ||\n        key === 'Delete' ||\n        (ctrlKey && key === 'v') ||\n        (metaKey && key === 'v')\n          ? true\n          : !Number.isNaN(Number(key));\n\n      if (!canTypeSign) {\n        event.preventDefault();\n      }\n    }\n\n    if (key === 'ArrowLeft' || (shiftKey && key === 'Tab')) {\n      focusInputField('prev', index, event);\n    } else if (key === 'ArrowRight' || key === 'Tab' || key === ' ') {\n      focusInputField('next', index, event);\n    } else if (key === 'Delete') {\n      setFieldValue('', index);\n    } else if (key === 'Backspace') {\n      if (index !== 0) {\n        setFieldValue('', index);\n        if (length === index + 1) {\n          if ((event.target as HTMLInputElement).value === '') {\n            focusInputField('prev', index, event);\n          }\n        } else {\n          focusInputField('prev', index, event);\n        }\n      }\n    } else if (inputValue.length > 0 && key === _value[index]) {\n      focusInputField('next', index, event);\n    }\n  };\n\n  const handleFocus = (event: React.FocusEvent<HTMLInputElement>, index: number) => {\n    event.target.select();\n    setFocusedIndex(index);\n  };\n\n  const handleBlur = () => {\n    setFocusedIndex(-1);\n  };\n\n  const handlePaste = (event: React.ClipboardEvent<HTMLInputElement>) => {\n    event.preventDefault();\n    const copyValue = event.clipboardData.getData('text/plain').replace(/[\\n\\r\\s]+/g, '');\n    const isValid = validate(copyValue.trim());\n\n    if (isValid) {\n      const copyValueToPinArray = createPinArray(length ?? 0, copyValue);\n      setValues(copyValueToPinArray);\n      focusInputField('next', copyValueToPinArray.length - 2);\n    }\n  };\n\n  useEffect(() => {\n    if (_valueToString.length !== length) {\n      return;\n    }\n    onComplete?.(_valueToString);\n  }, [length, _valueToString]);\n\n  useEffect(() => {\n    if (length !== _value.length) {\n      setValues(createPinArray(length ?? 0, _value.join('')));\n    }\n  }, [length, _value]);\n\n  useEffect(() => {\n    if (value === '') {\n      setValues(createPinArray(length ?? 0, value));\n    }\n  }, [value]);\n\n  useEffect(() => {\n    if (disabled) {\n      setFocusedIndex(-1);\n    }\n  }, [disabled]);\n\n  return (\n    <>\n      <Group\n        {...others}\n        {...getStyles('root')}\n        ref={rootRef}\n        role=\"group\"\n        id={uuid}\n        gap={gap}\n        unstyled={unstyled}\n        wrap=\"nowrap\"\n        variant={variant}\n        __size={size}\n        dir=\"ltr\"\n      >\n        {_value.map((char: string, index: number) => (\n          <Input\n            component=\"input\"\n            {...getStyles('pinInput', {\n              style: {\n                '--input-padding': '0',\n                '--input-text-align': 'center',\n              } as React.CSSProperties,\n            })}\n            classNames={resolvedClassNames}\n            styles={resolvedStyles}\n            size={size}\n            __staticSelector=\"PinInput\"\n            id={`${uuid}-${index + 1}`}\n            key={`${uuid}-${index}`}\n            inputMode={inputMode || (type === 'number' ? 'numeric' : 'text')}\n            onChange={(event) => handleChange(event, index)}\n            onKeyDown={(event) => handleKeyDown(event, index)}\n            onFocus={(event) => handleFocus(event, index)}\n            onBlur={handleBlur}\n            onPaste={handlePaste}\n            type={inputType || (mask ? 'password' : type === 'number' ? 'tel' : 'text')}\n            radius={radius}\n            error={error}\n            variant={variant}\n            disabled={disabled}\n            ref={(node) => {\n              index === 0 && assignRef(ref, node);\n              inputsRef.current[index] = node!;\n            }}\n            autoComplete={oneTimeCode ? 'one-time-code' : 'off'}\n            placeholder={focusedIndex === index ? '' : placeholder}\n            value={char}\n            autoFocus={autoFocus && index === 0}\n            unstyled={unstyled}\n            aria-label={ariaLabel}\n            readOnly={readOnly}\n            {...getInputProps?.(index)}\n          />\n        ))}\n      </Group>\n\n      <input type=\"hidden\" name={name} form={form} value={_valueToString} {...hiddenInputProps} />\n    </>\n  );\n});\n\nPinInput.classes = { ...classes, ...InputBase.classes };\nPinInput.displayName = '@mantine/core/PinInput';\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}