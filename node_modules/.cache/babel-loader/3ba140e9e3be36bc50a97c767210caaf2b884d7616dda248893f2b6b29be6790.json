{"ast":null,"code":"'use client';\n\nimport { jsx } from 'react/jsx-runtime';\nimport { keys } from '../../../core/utils/keys/keys.mjs';\nimport { filterProps } from '../../../core/utils/filter-props/filter-props.mjs';\nimport 'react';\nimport { getSortedBreakpoints } from '../../../core/utils/get-sorted-breakpoints/get-sorted-breakpoints.mjs';\nimport { getBaseValue } from '../../../core/utils/get-base-value/get-base-value.mjs';\nimport '@mantine/hooks';\nimport 'clsx';\nimport '../../../core/MantineProvider/Mantine.context.mjs';\nimport '../../../core/MantineProvider/default-theme.mjs';\nimport '../../../core/MantineProvider/MantineProvider.mjs';\nimport { useMantineTheme } from '../../../core/MantineProvider/MantineThemeProvider/MantineThemeProvider.mjs';\nimport '../../../core/MantineProvider/MantineCssVariables/MantineCssVariables.mjs';\nimport { InlineStyles } from '../../../core/InlineStyles/InlineStyles.mjs';\nimport '../../../core/Box/Box.mjs';\nimport '../../../core/DirectionProvider/DirectionProvider.mjs';\nimport { useGridContext } from '../Grid.context.mjs';\nconst getColumnFlexBasis = (colSpan, columns) => {\n  if (colSpan === \"content\") {\n    return \"auto\";\n  }\n  if (colSpan === \"auto\") {\n    return \"0rem\";\n  }\n  return colSpan ? `${100 / (columns / colSpan)}%` : void 0;\n};\nconst getColumnMaxWidth = (colSpan, columns, grow) => {\n  if (grow || colSpan === \"auto\") {\n    return \"100%\";\n  }\n  if (colSpan === \"content\") {\n    return \"unset\";\n  }\n  return getColumnFlexBasis(colSpan, columns);\n};\nconst getColumnFlexGrow = (colSpan, grow) => {\n  if (!colSpan) {\n    return void 0;\n  }\n  return colSpan === \"auto\" || grow ? \"1\" : \"auto\";\n};\nconst getColumnOffset = (offset, columns) => offset === 0 ? \"0\" : offset ? `${100 / (columns / offset)}%` : void 0;\nfunction GridColVariables({\n  span,\n  order,\n  offset,\n  selector\n}) {\n  const theme = useMantineTheme();\n  const ctx = useGridContext();\n  const _breakpoints = ctx.breakpoints || theme.breakpoints;\n  const baseValue = getBaseValue(span);\n  const baseSpan = baseValue === void 0 ? 12 : getBaseValue(span);\n  const baseStyles = filterProps({\n    \"--col-order\": getBaseValue(order)?.toString(),\n    \"--col-flex-grow\": getColumnFlexGrow(baseSpan, ctx.grow),\n    \"--col-flex-basis\": getColumnFlexBasis(baseSpan, ctx.columns),\n    \"--col-width\": baseSpan === \"content\" ? \"auto\" : void 0,\n    \"--col-max-width\": getColumnMaxWidth(baseSpan, ctx.columns, ctx.grow),\n    \"--col-offset\": getColumnOffset(getBaseValue(offset), ctx.columns)\n  });\n  const queries = keys(_breakpoints).reduce((acc, breakpoint) => {\n    if (!acc[breakpoint]) {\n      acc[breakpoint] = {};\n    }\n    if (typeof order === \"object\" && order[breakpoint] !== void 0) {\n      acc[breakpoint][\"--col-order\"] = order[breakpoint]?.toString();\n    }\n    if (typeof span === \"object\" && span[breakpoint] !== void 0) {\n      acc[breakpoint][\"--col-flex-grow\"] = getColumnFlexGrow(span[breakpoint], ctx.grow);\n      acc[breakpoint][\"--col-flex-basis\"] = getColumnFlexBasis(span[breakpoint], ctx.columns);\n      acc[breakpoint][\"--col-width\"] = span[breakpoint] === \"content\" ? \"auto\" : void 0;\n      acc[breakpoint][\"--col-max-width\"] = getColumnMaxWidth(span[breakpoint], ctx.columns, ctx.grow);\n    }\n    if (typeof offset === \"object\" && offset[breakpoint] !== void 0) {\n      acc[breakpoint][\"--col-offset\"] = getColumnOffset(offset[breakpoint], ctx.columns);\n    }\n    return acc;\n  }, {});\n  const sortedBreakpoints = getSortedBreakpoints(keys(queries), _breakpoints).filter(breakpoint => keys(queries[breakpoint.value]).length > 0);\n  const values = sortedBreakpoints.map(breakpoint => ({\n    query: ctx.type === \"container\" ? `mantine-grid (min-width: ${_breakpoints[breakpoint.value]})` : `(min-width: ${_breakpoints[breakpoint.value]})`,\n    styles: queries[breakpoint.value]\n  }));\n  return /* @__PURE__ */jsx(InlineStyles, {\n    styles: baseStyles,\n    media: ctx.type === \"container\" ? void 0 : values,\n    container: ctx.type === \"container\" ? values : void 0,\n    selector\n  });\n}\nexport { GridColVariables };","map":{"version":3,"names":["getColumnFlexBasis","colSpan","columns","getColumnMaxWidth","grow","getColumnFlexGrow","getColumnOffset","offset","GridColVariables","span","order","selector","theme","useMantineTheme","ctx","useGridContext","_breakpoints","breakpoints","baseValue","getBaseValue","baseSpan","baseStyles","filterProps","toString","queries","keys","reduce","acc","breakpoint","sortedBreakpoints","getSortedBreakpoints","filter","value","length","values","map","query","type","styles","jsx","InlineStyles","media","container"],"sources":["/Users/clarencechau/Documents/projects/personal-website/clarencechau.github.io/node_modules/@mantine/core/src/components/Grid/GridCol/GridColVariables.tsx"],"sourcesContent":["import {\n  filterProps,\n  getBaseValue,\n  getSortedBreakpoints,\n  InlineStyles,\n  keys,\n  useMantineTheme,\n} from '../../../core';\nimport { GridBreakpoints, useGridContext } from '../Grid.context';\nimport type { ColSpan, GridColProps } from './GridCol';\n\ninterface GridColVariablesProps {\n  selector: string;\n  span: GridColProps['span'] | undefined;\n  order?: GridColProps['order'] | undefined;\n  offset?: GridColProps['offset'] | undefined;\n}\n\nconst getColumnFlexBasis = (colSpan: ColSpan | undefined, columns: number) => {\n  if (colSpan === 'content') {\n    return 'auto';\n  }\n\n  if (colSpan === 'auto') {\n    return '0rem';\n  }\n\n  return colSpan ? `${100 / (columns / colSpan)}%` : undefined;\n};\n\nconst getColumnMaxWidth = (\n  colSpan: ColSpan | undefined,\n  columns: number,\n  grow: boolean | undefined\n) => {\n  if (grow || colSpan === 'auto') {\n    return '100%';\n  }\n\n  if (colSpan === 'content') {\n    return 'unset';\n  }\n\n  return getColumnFlexBasis(colSpan, columns);\n};\n\nconst getColumnFlexGrow = (colSpan: ColSpan | undefined, grow: boolean | undefined) => {\n  if (!colSpan) {\n    return undefined;\n  }\n\n  return colSpan === 'auto' || grow ? '1' : 'auto';\n};\n\nconst getColumnOffset = (offset: number | undefined, columns: number) =>\n  offset === 0 ? '0' : offset ? `${100 / (columns / offset)}%` : undefined;\n\nexport function GridColVariables({ span, order, offset, selector }: GridColVariablesProps) {\n  const theme = useMantineTheme();\n  const ctx = useGridContext();\n  const _breakpoints = ctx.breakpoints || theme.breakpoints;\n\n  const baseValue = getBaseValue(span);\n  const baseSpan = baseValue === undefined ? 12 : getBaseValue(span);\n\n  const baseStyles: Record<string, string | undefined> = filterProps({\n    '--col-order': getBaseValue(order)?.toString(),\n    '--col-flex-grow': getColumnFlexGrow(baseSpan, ctx.grow),\n    '--col-flex-basis': getColumnFlexBasis(baseSpan, ctx.columns),\n    '--col-width': baseSpan === 'content' ? 'auto' : undefined,\n    '--col-max-width': getColumnMaxWidth(baseSpan, ctx.columns, ctx.grow),\n    '--col-offset': getColumnOffset(getBaseValue(offset), ctx.columns),\n  });\n\n  const queries = keys(_breakpoints).reduce<Record<string, Record<string, any>>>(\n    (acc, breakpoint) => {\n      if (!acc[breakpoint]) {\n        acc[breakpoint] = {};\n      }\n\n      if (typeof order === 'object' && order[breakpoint] !== undefined) {\n        acc[breakpoint]['--col-order'] = order[breakpoint]?.toString();\n      }\n\n      if (typeof span === 'object' && span[breakpoint] !== undefined) {\n        acc[breakpoint]['--col-flex-grow'] = getColumnFlexGrow(span[breakpoint], ctx.grow);\n        acc[breakpoint]['--col-flex-basis'] = getColumnFlexBasis(span[breakpoint], ctx.columns);\n        acc[breakpoint]['--col-width'] = span[breakpoint] === 'content' ? 'auto' : undefined;\n        acc[breakpoint]['--col-max-width'] = getColumnMaxWidth(\n          span[breakpoint],\n          ctx.columns,\n          ctx.grow\n        );\n      }\n\n      if (typeof offset === 'object' && offset[breakpoint] !== undefined) {\n        acc[breakpoint]['--col-offset'] = getColumnOffset(offset[breakpoint], ctx.columns);\n      }\n\n      return acc;\n    },\n    {}\n  );\n\n  const sortedBreakpoints = getSortedBreakpoints(keys(queries), _breakpoints).filter(\n    (breakpoint) => keys(queries[breakpoint.value]).length > 0\n  );\n\n  const values = sortedBreakpoints.map((breakpoint) => ({\n    query:\n      ctx.type === 'container'\n        ? `mantine-grid (min-width: ${_breakpoints[breakpoint.value as keyof GridBreakpoints]})`\n        : `(min-width: ${_breakpoints[breakpoint.value as keyof GridBreakpoints]})`,\n    styles: queries[breakpoint.value],\n  }));\n\n  return (\n    <InlineStyles\n      styles={baseStyles}\n      media={ctx.type === 'container' ? undefined : values}\n      container={ctx.type === 'container' ? values : undefined}\n      selector={selector}\n    />\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}