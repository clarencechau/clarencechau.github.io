{"ast":null,"code":"'use client';\n\nimport { jsx } from 'react/jsx-runtime';\nimport { keys } from '../../core/utils/keys/keys.mjs';\nimport { filterProps } from '../../core/utils/filter-props/filter-props.mjs';\nimport 'react';\nimport { getSpacing } from '../../core/utils/get-size/get-size.mjs';\nimport { getSortedBreakpoints } from '../../core/utils/get-sorted-breakpoints/get-sorted-breakpoints.mjs';\nimport { getBaseValue } from '../../core/utils/get-base-value/get-base-value.mjs';\nimport '@mantine/hooks';\nimport 'clsx';\nimport '../../core/MantineProvider/Mantine.context.mjs';\nimport '../../core/MantineProvider/default-theme.mjs';\nimport '../../core/MantineProvider/MantineProvider.mjs';\nimport { useMantineTheme } from '../../core/MantineProvider/MantineThemeProvider/MantineThemeProvider.mjs';\nimport '../../core/MantineProvider/MantineCssVariables/MantineCssVariables.mjs';\nimport { InlineStyles } from '../../core/InlineStyles/InlineStyles.mjs';\nimport '../../core/Box/Box.mjs';\nimport '../../core/DirectionProvider/DirectionProvider.mjs';\nfunction GridVariables({\n  gutter,\n  selector,\n  breakpoints,\n  type\n}) {\n  const theme = useMantineTheme();\n  const _breakpoints = breakpoints || theme.breakpoints;\n  const baseStyles = filterProps({\n    \"--grid-gutter\": getSpacing(getBaseValue(gutter))\n  });\n  const queries = keys(_breakpoints).reduce((acc, breakpoint) => {\n    if (!acc[breakpoint]) {\n      acc[breakpoint] = {};\n    }\n    if (typeof gutter === \"object\" && gutter[breakpoint] !== void 0) {\n      acc[breakpoint][\"--grid-gutter\"] = getSpacing(gutter[breakpoint]);\n    }\n    return acc;\n  }, {});\n  const sortedBreakpoints = getSortedBreakpoints(keys(queries), _breakpoints).filter(breakpoint => keys(queries[breakpoint.value]).length > 0);\n  const values = sortedBreakpoints.map(breakpoint => ({\n    query: type === \"container\" ? `mantine-grid (min-width: ${_breakpoints[breakpoint.value]})` : `(min-width: ${_breakpoints[breakpoint.value]})`,\n    styles: queries[breakpoint.value]\n  }));\n  return /* @__PURE__ */jsx(InlineStyles, {\n    styles: baseStyles,\n    media: type === \"container\" ? void 0 : values,\n    container: type === \"container\" ? values : void 0,\n    selector\n  });\n}\nexport { GridVariables };","map":{"version":3,"names":["GridVariables","gutter","selector","breakpoints","type","theme","useMantineTheme","_breakpoints","baseStyles","filterProps","getSpacing","getBaseValue","queries","keys","reduce","acc","breakpoint","sortedBreakpoints","getSortedBreakpoints","filter","value","length","values","map","query","styles","jsx","InlineStyles","media","container"],"sources":["/Users/clarencechau/Documents/projects/personal-website/clarencechau.github.io/node_modules/@mantine/core/src/components/Grid/GridVariables.tsx"],"sourcesContent":["import {\n  filterProps,\n  getBaseValue,\n  getSortedBreakpoints,\n  getSpacing,\n  InlineStyles,\n  keys,\n  useMantineTheme,\n} from '../../core';\nimport type { GridProps } from './Grid';\nimport type { GridBreakpoints } from './Grid.context';\n\ninterface GridVariablesProps extends GridProps {\n  selector: string;\n}\n\nexport function GridVariables({ gutter, selector, breakpoints, type }: GridVariablesProps) {\n  const theme = useMantineTheme();\n  const _breakpoints = breakpoints || theme.breakpoints;\n\n  const baseStyles: Record<string, string | undefined> = filterProps({\n    '--grid-gutter': getSpacing(getBaseValue(gutter)),\n  });\n\n  const queries = keys(_breakpoints).reduce<Record<string, Record<string, any>>>(\n    (acc, breakpoint) => {\n      if (!acc[breakpoint]) {\n        acc[breakpoint] = {};\n      }\n\n      if (typeof gutter === 'object' && gutter[breakpoint] !== undefined) {\n        acc[breakpoint]['--grid-gutter'] = getSpacing(gutter[breakpoint]);\n      }\n\n      return acc;\n    },\n    {}\n  );\n\n  const sortedBreakpoints = getSortedBreakpoints(keys(queries), _breakpoints).filter(\n    (breakpoint) => keys(queries[breakpoint.value]).length > 0\n  );\n\n  const values = sortedBreakpoints.map((breakpoint) => ({\n    query:\n      type === 'container'\n        ? `mantine-grid (min-width: ${_breakpoints[breakpoint.value as keyof GridBreakpoints]})`\n        : `(min-width: ${_breakpoints[breakpoint.value as keyof GridBreakpoints]})`,\n    styles: queries[breakpoint.value],\n  }));\n\n  return (\n    <InlineStyles\n      styles={baseStyles}\n      media={type === 'container' ? undefined : values}\n      container={type === 'container' ? values : undefined}\n      selector={selector}\n    />\n  );\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;AAWO,SAASA,aAAaA,CAAC;EAAEC,MAAM;EAAEC,QAAQ;EAAEC,WAAW;EAAEC;AAAI,CAAE,EAAE;EACrE,MAAMC,KAAK,GAAGC,eAAe,CAAE;EAC/B,MAAMC,YAAY,GAAGJ,WAAW,IAAIE,KAAK,CAACF,WAAW;EACrD,MAAMK,UAAU,GAAGC,WAAW,CAAC;IAC7B,eAAe,EAAEC,UAAU,CAACC,YAAY,CAACV,MAAM,CAAC;EACpD,CAAG,CAAC;EACF,MAAMW,OAAO,GAAGC,IAAI,CAACN,YAAY,CAAC,CAACO,MAAM,CACvC,CAACC,GAAG,EAAEC,UAAU,KAAK;IACnB,IAAI,CAACD,GAAG,CAACC,UAAU,CAAC,EAAE;MACpBD,GAAG,CAACC,UAAU,CAAC,GAAG,CAAE;IAC5B;IACM,IAAI,OAAOf,MAAM,KAAK,QAAQ,IAAIA,MAAM,CAACe,UAAU,CAAC,KAAK,KAAK,CAAC,EAAE;MAC/DD,GAAG,CAACC,UAAU,CAAC,CAAC,eAAe,CAAC,GAAGN,UAAU,CAACT,MAAM,CAACe,UAAU,CAAC,CAAC;IACzE;IACM,OAAOD,GAAG;EACX,GACD,EACD;EACD,MAAME,iBAAiB,GAAGC,oBAAoB,CAACL,IAAI,CAACD,OAAO,CAAC,EAAEL,YAAY,CAAC,CAACY,MAAM,CAC/EH,UAAU,IAAKH,IAAI,CAACD,OAAO,CAACI,UAAU,CAACI,KAAK,CAAC,CAAC,CAACC,MAAM,GAAG,CAC1D;EACD,MAAMC,MAAM,GAAGL,iBAAiB,CAACM,GAAG,CAAEP,UAAU,KAAM;IACpDQ,KAAK,EAAEpB,IAAI,KAAK,WAAW,GAAI,4BAA2BG,YAAY,CAACS,UAAU,CAACI,KAAK,CAAE,GAAE,GAAI,eAAcb,YAAY,CAACS,UAAU,CAACI,KAAK,CAAE,GAAE;IAC9IK,MAAM,EAAEb,OAAO,CAACI,UAAU,CAACI,KAAK;EACpC,CAAG,CAAC,CAAC;EACH,sBAAuBM,GAAG,CACxBC,YAAY,EACZ;IACEF,MAAM,EAAEjB,UAAU;IAClBoB,KAAK,EAAExB,IAAI,KAAK,WAAW,GAAG,KAAK,CAAC,GAAGkB,MAAM;IAC7CO,SAAS,EAAEzB,IAAI,KAAK,WAAW,GAAGkB,MAAM,GAAG,KAAK,CAAC;IACjDpB;EACN,CACG;AACH"},"metadata":{},"sourceType":"module","externalDependencies":[]}