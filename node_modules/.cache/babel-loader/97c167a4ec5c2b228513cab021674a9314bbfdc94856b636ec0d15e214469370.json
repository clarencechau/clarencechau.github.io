{"ast":null,"code":"'use client';\n\nimport { jsxs, jsx } from 'react/jsx-runtime';\nimport { clamp } from '@mantine/hooks';\nimport { rem } from '../../core/utils/units-converters/rem.mjs';\nimport 'react';\nimport { createVarsResolver } from '../../core/styles-api/create-vars-resolver/create-vars-resolver.mjs';\nimport 'clsx';\nimport { getThemeColor } from '../../core/MantineProvider/color-functions/get-theme-color/get-theme-color.mjs';\nimport '../../core/MantineProvider/Mantine.context.mjs';\nimport '../../core/MantineProvider/default-theme.mjs';\nimport '../../core/MantineProvider/MantineProvider.mjs';\nimport '../../core/MantineProvider/MantineThemeProvider/MantineThemeProvider.mjs';\nimport { useProps } from '../../core/MantineProvider/use-props/use-props.mjs';\nimport '../../core/MantineProvider/MantineCssVariables/MantineCssVariables.mjs';\nimport { useStyles } from '../../core/styles-api/use-styles/use-styles.mjs';\nimport { Box } from '../../core/Box/Box.mjs';\nimport { factory } from '../../core/factory/factory.mjs';\nimport '../../core/DirectionProvider/DirectionProvider.mjs';\nimport classes from './SemiCircleProgress.module.css.mjs';\nconst defaultProps = {\n  size: 200,\n  thickness: 12,\n  orientation: \"up\",\n  fillDirection: \"left-to-right\",\n  labelPosition: \"bottom\"\n};\nfunction getRotation({\n  orientation,\n  fillDirection\n}) {\n  if (orientation === \"down\") {\n    if (fillDirection === \"right-to-left\") {\n      return \"rotate(180deg) rotateY(180deg)\";\n    }\n    return \"rotate(180deg)\";\n  }\n  if (fillDirection === \"left-to-right\") {\n    return \"rotateY(180deg)\";\n  }\n  return void 0;\n}\nconst varsResolver = createVarsResolver((theme, {\n  filledSegmentColor,\n  emptySegmentColor,\n  orientation,\n  fillDirection,\n  transitionDuration,\n  thickness\n}) => ({\n  root: {\n    \"--scp-filled-segment-color\": filledSegmentColor ? getThemeColor(filledSegmentColor, theme) : void 0,\n    \"--scp-empty-segment-color\": emptySegmentColor ? getThemeColor(emptySegmentColor, theme) : void 0,\n    \"--scp-rotation\": getRotation({\n      orientation,\n      fillDirection\n    }),\n    \"--scp-transition-duration\": transitionDuration ? `${transitionDuration}ms` : void 0,\n    \"--scp-thickness\": rem(thickness)\n  }\n}));\nconst SemiCircleProgress = factory((_props, ref) => {\n  const props = useProps(\"SemiCircleProgress\", defaultProps, _props);\n  const {\n    classNames,\n    className,\n    style,\n    styles,\n    unstyled,\n    vars,\n    size,\n    thickness,\n    value,\n    orientation,\n    fillDirection,\n    filledSegmentColor,\n    emptySegmentColor,\n    transitionDuration,\n    label,\n    labelPosition,\n    ...others\n  } = props;\n  const getStyles = useStyles({\n    name: \"SemiCircleProgress\",\n    classes,\n    props,\n    className,\n    style,\n    classNames,\n    styles,\n    unstyled,\n    vars,\n    varsResolver\n  });\n  const coordinateForCircle = size / 2;\n  const radius = (size - 2 * thickness) / 2;\n  const circumference = Math.PI * radius;\n  const semiCirclePercentage = clamp(value, 0, 100) * (circumference / 100);\n  return /* @__PURE__ */jsxs(Box, {\n    ref,\n    size,\n    ...getStyles(\"root\"),\n    ...others,\n    children: [label && /* @__PURE__ */jsx(\"p\", {\n      ...getStyles(\"label\"),\n      \"data-position\": labelPosition,\n      \"data-orientation\": orientation,\n      children: label\n    }), /* @__PURE__ */jsxs(\"svg\", {\n      width: size,\n      height: size / 2,\n      ...getStyles(\"svg\"),\n      children: [/* @__PURE__ */jsx(\"circle\", {\n        cx: coordinateForCircle,\n        cy: coordinateForCircle,\n        r: radius,\n        fill: \"none\",\n        stroke: \"var(--scp-empty-segment-color)\",\n        strokeWidth: thickness,\n        strokeDasharray: circumference,\n        ...getStyles(\"emptySegment\", {\n          style: {\n            strokeDashoffset: circumference\n          }\n        })\n      }), /* @__PURE__ */jsx(\"circle\", {\n        cx: coordinateForCircle,\n        cy: coordinateForCircle,\n        r: radius,\n        fill: \"none\",\n        stroke: \"var(--scp-filled-segment-color)\",\n        strokeWidth: thickness,\n        strokeDasharray: circumference,\n        ...getStyles(\"filledSegment\", {\n          style: {\n            strokeDashoffset: semiCirclePercentage\n          }\n        })\n      })]\n    })]\n  });\n});\nSemiCircleProgress.displayName = \"@mantine/core/SemiCircleProgress\";\nSemiCircleProgress.classes = classes;\nexport { SemiCircleProgress };","map":{"version":3,"names":["defaultProps","size","thickness","orientation","fillDirection","labelPosition","getRotation","varsResolver","createVarsResolver","theme","filledSegmentColor","emptySegmentColor","transitionDuration","root","getThemeColor","rem","SemiCircleProgress","factory","_props","ref","props","useProps","classNames","className","style","styles","unstyled","vars","value","label","others","getStyles","useStyles","name","classes","coordinateForCircle","radius","circumference","Math","PI","semiCirclePercentage","clamp","jsxs","Box","children","jsx","width","height","cx","cy","r","fill","stroke","strokeWidth","strokeDasharray","strokeDashoffset","displayName"],"sources":["/Users/clarencechau/Documents/projects/personal-website/clarencechau.github.io/node_modules/@mantine/core/src/components/SemiCircleProgress/SemiCircleProgress.tsx"],"sourcesContent":["import { clamp } from '@mantine/hooks';\nimport {\n  Box,\n  BoxProps,\n  createVarsResolver,\n  ElementProps,\n  factory,\n  Factory,\n  getThemeColor,\n  MantineColor,\n  rem,\n  StylesApiProps,\n  useProps,\n  useStyles,\n} from '../../core';\nimport classes from './SemiCircleProgress.module.css';\n\nexport type SemiCircleProgressStylesNames =\n  | 'root'\n  | 'svg'\n  | 'emptySegment'\n  | 'filledSegment'\n  | 'label';\n\nexport type SemiCircleProgressCssVariables = {\n  root:\n    | '--scp-filled-segment-color'\n    | '--scp-empty-segment-color'\n    | '--scp-rotation'\n    | '--scp-transition-duration'\n    | '--scp-thickness';\n};\n\nexport interface SemiCircleProgressProps\n  extends BoxProps,\n    StylesApiProps<SemiCircleProgressFactory>,\n    ElementProps<'div'> {\n  /** Progress value from `0` to `100` */\n  value: number;\n\n  /** Diameter of the svg in px, `200` by default */\n  size?: number;\n\n  /** Circle thickness in px, `12` by default */\n  thickness?: number;\n\n  /** Orientation of the circle, `'up'` by default */\n  orientation?: 'up' | 'down';\n\n  /** Direction from which the circle is filled, `'left-to-right'` by default */\n  fillDirection?: 'right-to-left' | 'left-to-right';\n\n  /** Key of `theme.colors` or any valid CSS color value, `theme.primaryColor` by default */\n  filledSegmentColor?: MantineColor;\n\n  /** Key of `theme.colors` or any valid CSS color value, by default the value is determined based on the color scheme value */\n  emptySegmentColor?: MantineColor;\n\n  /** Transition duration of filled section styles changes in ms, `0` by default */\n  transitionDuration?: number;\n\n  /** Label rendered inside the circle */\n  label?: React.ReactNode;\n\n  /** Label position relative to the circle center, `'bottom'` by default */\n  labelPosition?: 'center' | 'bottom';\n}\n\nexport type SemiCircleProgressFactory = Factory<{\n  props: SemiCircleProgressProps;\n  ref: HTMLDivElement;\n  stylesNames: SemiCircleProgressStylesNames;\n  vars: SemiCircleProgressCssVariables;\n}>;\n\nconst defaultProps: Partial<SemiCircleProgressProps> = {\n  size: 200,\n  thickness: 12,\n  orientation: 'up',\n  fillDirection: 'left-to-right',\n  labelPosition: 'bottom',\n};\n\nfunction getRotation({\n  orientation,\n  fillDirection,\n}: Pick<SemiCircleProgressProps, 'orientation' | 'fillDirection'>) {\n  if (orientation === 'down') {\n    if (fillDirection === 'right-to-left') {\n      return 'rotate(180deg) rotateY(180deg)';\n    }\n    return 'rotate(180deg)';\n  }\n  if (fillDirection === 'left-to-right') {\n    return 'rotateY(180deg)';\n  }\n\n  return undefined;\n}\n\nconst varsResolver = createVarsResolver<SemiCircleProgressFactory>(\n  (\n    theme,\n    {\n      filledSegmentColor,\n      emptySegmentColor,\n      orientation,\n      fillDirection,\n      transitionDuration,\n      thickness,\n    }\n  ) => ({\n    root: {\n      '--scp-filled-segment-color': filledSegmentColor\n        ? getThemeColor(filledSegmentColor, theme)\n        : undefined,\n      '--scp-empty-segment-color': emptySegmentColor\n        ? getThemeColor(emptySegmentColor, theme)\n        : undefined,\n      '--scp-rotation': getRotation({ orientation, fillDirection }),\n      '--scp-transition-duration': transitionDuration ? `${transitionDuration}ms` : undefined,\n      '--scp-thickness': rem(thickness),\n    },\n  })\n);\n\nexport const SemiCircleProgress = factory<SemiCircleProgressFactory>((_props, ref) => {\n  const props = useProps('SemiCircleProgress', defaultProps, _props);\n  const {\n    classNames,\n    className,\n    style,\n    styles,\n    unstyled,\n    vars,\n    size,\n    thickness,\n    value,\n    orientation,\n    fillDirection,\n    filledSegmentColor,\n    emptySegmentColor,\n    transitionDuration,\n    label,\n    labelPosition,\n    ...others\n  } = props;\n\n  const getStyles = useStyles<SemiCircleProgressFactory>({\n    name: 'SemiCircleProgress',\n    classes,\n    props,\n    className,\n    style,\n    classNames,\n    styles,\n    unstyled,\n    vars,\n    varsResolver,\n  });\n\n  const coordinateForCircle = size! / 2;\n  const radius = (size! - 2 * thickness!) / 2;\n  const circumference = Math.PI * radius;\n  const semiCirclePercentage = clamp(value, 0, 100) * (circumference / 100);\n\n  return (\n    <Box ref={ref} size={size} {...getStyles('root')} {...others}>\n      {label && (\n        <p {...getStyles('label')} data-position={labelPosition} data-orientation={orientation}>\n          {label}\n        </p>\n      )}\n\n      <svg width={size} height={size! / 2} {...getStyles('svg')}>\n        <circle\n          cx={coordinateForCircle}\n          cy={coordinateForCircle}\n          r={radius}\n          fill=\"none\"\n          stroke=\"var(--scp-empty-segment-color)\"\n          strokeWidth={thickness}\n          strokeDasharray={circumference}\n          {...getStyles('emptySegment', { style: { strokeDashoffset: circumference } })}\n        />\n\n        <circle\n          cx={coordinateForCircle}\n          cy={coordinateForCircle}\n          r={radius}\n          fill=\"none\"\n          stroke=\"var(--scp-filled-segment-color)\"\n          strokeWidth={thickness}\n          strokeDasharray={circumference}\n          {...getStyles('filledSegment', { style: { strokeDashoffset: semiCirclePercentage } })}\n        />\n      </svg>\n    </Box>\n  );\n});\n\nSemiCircleProgress.displayName = '@mantine/core/SemiCircleProgress';\nSemiCircleProgress.classes = classes;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;AAaA,MAAMA,YAAY,GAAG;EACnBC,IAAI,EAAE,GAAG;EACTC,SAAS,EAAE,EAAE;EACbC,WAAW,EAAE,IAAI;EACjBC,aAAa,EAAE,eAAe;EAC9BC,aAAa,EAAE;AACjB,CAAC;AACD,SAASC,WAAWA,CAAC;EACnBH,WAAW;EACXC;AACF,CAAC,EAAE;EACD,IAAID,WAAW,KAAK,MAAM,EAAE;IAC1B,IAAIC,aAAa,KAAK,eAAe,EAAE;MACrC,OAAO,gCAAgC;IAC7C;IACI,OAAO,gBAAgB;EAC3B;EACE,IAAIA,aAAa,KAAK,eAAe,EAAE;IACrC,OAAO,iBAAiB;EAC5B;EACE,OAAO,KAAK,CAAC;AACf;AACA,MAAMG,YAAY,GAAGC,kBAAkB,CACrC,CAACC,KAAK,EAAE;EACNC,kBAAkB;EAClBC,iBAAiB;EACjBR,WAAW;EACXC,aAAa;EACbQ,kBAAkB;EAClBV;AACJ,CAAG,MAAM;EACLW,IAAI,EAAE;IACJ,4BAA4B,EAAEH,kBAAkB,GAAGI,aAAa,CAACJ,kBAAkB,EAAED,KAAK,CAAC,GAAG,KAAK,CAAC;IACpG,2BAA2B,EAAEE,iBAAiB,GAAGG,aAAa,CAACH,iBAAiB,EAAEF,KAAK,CAAC,GAAG,KAAK,CAAC;IACjG,gBAAgB,EAAEH,WAAW,CAAC;MAAEH,WAAW;MAAEC;IAAa,CAAE,CAAC;IAC7D,2BAA2B,EAAEQ,kBAAkB,GAAI,GAAEA,kBAAmB,IAAG,GAAG,KAAK,CAAC;IACpF,iBAAiB,EAAEG,GAAG,CAACb,SAAS;EACtC;AACG,EACH,CAAC;AACW,MAACc,kBAAkB,GAAGC,OAAO,CAAC,CAACC,MAAM,EAAEC,GAAG,KAAK;EACzD,MAAMC,KAAK,GAAGC,QAAQ,CAAC,oBAAoB,EAAErB,YAAY,EAAEkB,MAAM,CAAC;EAClE,MAAM;IACJI,UAAU;IACVC,SAAS;IACTC,KAAK;IACLC,MAAM;IACNC,QAAQ;IACRC,IAAI;IACJ1B,IAAI;IACJC,SAAS;IACT0B,KAAK;IACLzB,WAAW;IACXC,aAAa;IACbM,kBAAkB;IAClBC,iBAAiB;IACjBC,kBAAkB;IAClBiB,KAAK;IACLxB,aAAa;IACb,GAAGyB;EACP,CAAG,GAAGV,KAAK;EACT,MAAMW,SAAS,GAAGC,SAAS,CAAC;IAC1BC,IAAI,EAAE,oBAAoB;IAC1BC,OAAO;IACPd,KAAK;IACLG,SAAS;IACTC,KAAK;IACLF,UAAU;IACVG,MAAM;IACNC,QAAQ;IACRC,IAAI;IACJpB;EACJ,CAAG,CAAC;EACF,MAAM4B,mBAAmB,GAAGlC,IAAI,GAAG,CAAC;EACpC,MAAMmC,MAAM,GAAG,CAACnC,IAAI,GAAG,CAAC,GAAGC,SAAS,IAAI,CAAC;EACzC,MAAMmC,aAAa,GAAGC,IAAI,CAACC,EAAE,GAAGH,MAAM;EACtC,MAAMI,oBAAoB,GAAGC,KAAK,CAACb,KAAK,EAAE,CAAC,EAAE,GAAG,CAAC,IAAIS,aAAa,GAAG,GAAG,CAAC;EACzE,sBAAuBK,IAAI,CAACC,GAAG,EAAE;IAAExB,GAAG;IAAElB,IAAI;IAAE,GAAG8B,SAAS,CAAC,MAAM,CAAC;IAAE,GAAGD,MAAM;IAAEc,QAAQ,EAAE,CACvFf,KAAK,IAAoB,eAAAgB,GAAG,CAAC,GAAG,EAAE;MAAE,GAAGd,SAAS,CAAC,OAAO,CAAC;MAAE,eAAe,EAAE1B,aAAa;MAAE,kBAAkB,EAAEF,WAAW;MAAEyC,QAAQ,EAAEf;IAAK,CAAE,CAAC,EAC9H,eAAAa,IAAI,CAAC,KAAK,EAAE;MAAEI,KAAK,EAAE7C,IAAI;MAAE8C,MAAM,EAAE9C,IAAI,GAAG,CAAC;MAAE,GAAG8B,SAAS,CAAC,KAAK,CAAC;MAAEa,QAAQ,EAAE,CAChG,eAAsBC,GAAG,CACjB,QAAQ,EACR;QACEG,EAAE,EAAEb,mBAAmB;QACvBc,EAAE,EAAEd,mBAAmB;QACvBe,CAAC,EAAEd,MAAM;QACTe,IAAI,EAAE,MAAM;QACZC,MAAM,EAAE,gCAAgC;QACxCC,WAAW,EAAEnD,SAAS;QACtBoD,eAAe,EAAEjB,aAAa;QAC9B,GAAGN,SAAS,CAAC,cAAc,EAAE;UAAEP,KAAK,EAAE;YAAE+B,gBAAgB,EAAElB;UAAa;QAAI;MACrF,CACO,GACP,eAAsBQ,GAAG,CACjB,QAAQ,EACR;QACEG,EAAE,EAAEb,mBAAmB;QACvBc,EAAE,EAAEd,mBAAmB;QACvBe,CAAC,EAAEd,MAAM;QACTe,IAAI,EAAE,MAAM;QACZC,MAAM,EAAE,iCAAiC;QACzCC,WAAW,EAAEnD,SAAS;QACtBoD,eAAe,EAAEjB,aAAa;QAC9B,GAAGN,SAAS,CAAC,eAAe,EAAE;UAAEP,KAAK,EAAE;YAAE+B,gBAAgB,EAAEf;UAAoB;QAAI;MAC7F,CACA;IACO;EACJ,CAAE,CAAC;AACN,CAAC;AACDxB,kBAAkB,CAACwC,WAAW,GAAG,kCAAkC;AACnExC,kBAAkB,CAACkB,OAAO,GAAGA,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}