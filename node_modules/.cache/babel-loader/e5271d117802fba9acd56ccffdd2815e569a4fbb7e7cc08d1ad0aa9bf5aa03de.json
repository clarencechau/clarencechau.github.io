{"ast":null,"code":"'use client';\n\nimport _objectSpread from \"/Users/clarencechau/Documents/projects/personal-website/clarencechau.github.io/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport * as React from 'react';\nimport styleFunctionSx from '@mui/system/styleFunctionSx';\nimport { unstable_createCssVarsProvider as createCssVarsProvider } from '@mui/system';\nimport createTheme from \"./createTheme.js\";\nimport createTypography from \"./createTypography.js\";\nimport THEME_ID from \"./identifier.js\";\nimport { defaultConfig } from \"../InitColorSchemeScript/InitColorSchemeScript.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nvar _createCssVarsProvide = createCssVarsProvider({\n    themeId: THEME_ID,\n    // @ts-ignore ignore module augmentation tests\n    theme: function theme() {\n      return createTheme({\n        cssVariables: true\n      });\n    },\n    colorSchemeStorageKey: defaultConfig.colorSchemeStorageKey,\n    modeStorageKey: defaultConfig.modeStorageKey,\n    defaultColorScheme: {\n      light: defaultConfig.defaultLightColorScheme,\n      dark: defaultConfig.defaultDarkColorScheme\n    },\n    resolveTheme: function resolveTheme(theme) {\n      var newTheme = _objectSpread(_objectSpread({}, theme), {}, {\n        typography: createTypography(theme.palette, theme.typography)\n      });\n      newTheme.unstable_sx = function sx(props) {\n        return styleFunctionSx({\n          sx: props,\n          theme: this\n        });\n      };\n      return newTheme;\n    }\n  }),\n  InternalCssVarsProvider = _createCssVarsProvide.CssVarsProvider,\n  useColorScheme = _createCssVarsProvide.useColorScheme,\n  deprecatedGetInitColorSchemeScript = _createCssVarsProvide.getInitColorSchemeScript;\nvar warnedOnce = false;\n\n// TODO: remove in v7\n// eslint-disable-next-line @typescript-eslint/naming-convention\nfunction Experimental_CssVarsProvider(props) {\n  if (process.env.NODE_ENV !== 'production') {\n    if (!warnedOnce) {\n      console.warn(['MUI: The Experimental_CssVarsProvider component has been ported into ThemeProvider.', '', \"You should use `import { ThemeProvider } from '@mui/material/styles'` instead.\", 'For more details, check out https://mui.com/material-ui/customization/css-theme-variables/usage/'].join('\\n'));\n      warnedOnce = true;\n    }\n  }\n  return /*#__PURE__*/_jsx(InternalCssVarsProvider, _objectSpread({}, props));\n}\nvar warnedInitScriptOnce = false;\n\n// TODO: remove in v7\nvar getInitColorSchemeScript = function getInitColorSchemeScript(params) {\n  if (!warnedInitScriptOnce) {\n    console.warn(['MUI: The getInitColorSchemeScript function has been deprecated.', '', \"You should use `import InitColorSchemeScript from '@mui/material/InitColorSchemeScript'`\", 'and replace the function call with `<InitColorSchemeScript />` instead.'].join('\\n'));\n    warnedInitScriptOnce = true;\n  }\n  return deprecatedGetInitColorSchemeScript(params);\n};\n\n/**\n * TODO: remove this export in v7\n * @deprecated\n * The `CssVarsProvider` component has been deprecated and ported into `ThemeProvider`.\n *\n * You should use `ThemeProvider` and `createTheme()` instead:\n *\n * ```diff\n * - import { CssVarsProvider, extendTheme } from '@mui/material/styles';\n * + import { ThemeProvider, createTheme } from '@mui/material/styles';\n *\n * - const theme = extendTheme();\n * + const theme = createTheme({\n * +   cssVariables: true,\n * +   colorSchemes: { light: true, dark: true },\n * + });\n *\n * - <CssVarsProvider theme={theme}>\n * + <ThemeProvider theme={theme}>\n * ```\n *\n * To see the full documentation, check out https://mui.com/material-ui/customization/css-theme-variables/usage/.\n */\nexport var CssVarsProvider = InternalCssVarsProvider;\nexport { useColorScheme, getInitColorSchemeScript, Experimental_CssVarsProvider };","map":{"version":3,"names":["_objectSpread","React","styleFunctionSx","unstable_createCssVarsProvider","createCssVarsProvider","createTheme","createTypography","THEME_ID","defaultConfig","jsx","_jsx","_createCssVarsProvide","themeId","theme","cssVariables","colorSchemeStorageKey","modeStorageKey","defaultColorScheme","light","defaultLightColorScheme","dark","defaultDarkColorScheme","resolveTheme","newTheme","typography","palette","unstable_sx","sx","props","InternalCssVarsProvider","CssVarsProvider","useColorScheme","deprecatedGetInitColorSchemeScript","getInitColorSchemeScript","warnedOnce","Experimental_CssVarsProvider","process","env","NODE_ENV","console","warn","join","warnedInitScriptOnce","params"],"sources":["/Users/clarencechau/Documents/projects/personal-website/clarencechau.github.io/node_modules/@mui/material/styles/ThemeProviderWithVars.js"],"sourcesContent":["'use client';\n\nimport * as React from 'react';\nimport styleFunctionSx from '@mui/system/styleFunctionSx';\nimport { unstable_createCssVarsProvider as createCssVarsProvider } from '@mui/system';\nimport createTheme from \"./createTheme.js\";\nimport createTypography from \"./createTypography.js\";\nimport THEME_ID from \"./identifier.js\";\nimport { defaultConfig } from \"../InitColorSchemeScript/InitColorSchemeScript.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst {\n  CssVarsProvider: InternalCssVarsProvider,\n  useColorScheme,\n  getInitColorSchemeScript: deprecatedGetInitColorSchemeScript\n} = createCssVarsProvider({\n  themeId: THEME_ID,\n  // @ts-ignore ignore module augmentation tests\n  theme: () => createTheme({\n    cssVariables: true\n  }),\n  colorSchemeStorageKey: defaultConfig.colorSchemeStorageKey,\n  modeStorageKey: defaultConfig.modeStorageKey,\n  defaultColorScheme: {\n    light: defaultConfig.defaultLightColorScheme,\n    dark: defaultConfig.defaultDarkColorScheme\n  },\n  resolveTheme: theme => {\n    const newTheme = {\n      ...theme,\n      typography: createTypography(theme.palette, theme.typography)\n    };\n    newTheme.unstable_sx = function sx(props) {\n      return styleFunctionSx({\n        sx: props,\n        theme: this\n      });\n    };\n    return newTheme;\n  }\n});\nlet warnedOnce = false;\n\n// TODO: remove in v7\n// eslint-disable-next-line @typescript-eslint/naming-convention\nfunction Experimental_CssVarsProvider(props) {\n  if (process.env.NODE_ENV !== 'production') {\n    if (!warnedOnce) {\n      console.warn(['MUI: The Experimental_CssVarsProvider component has been ported into ThemeProvider.', '', \"You should use `import { ThemeProvider } from '@mui/material/styles'` instead.\", 'For more details, check out https://mui.com/material-ui/customization/css-theme-variables/usage/'].join('\\n'));\n      warnedOnce = true;\n    }\n  }\n  return /*#__PURE__*/_jsx(InternalCssVarsProvider, {\n    ...props\n  });\n}\nlet warnedInitScriptOnce = false;\n\n// TODO: remove in v7\nconst getInitColorSchemeScript = params => {\n  if (!warnedInitScriptOnce) {\n    console.warn(['MUI: The getInitColorSchemeScript function has been deprecated.', '', \"You should use `import InitColorSchemeScript from '@mui/material/InitColorSchemeScript'`\", 'and replace the function call with `<InitColorSchemeScript />` instead.'].join('\\n'));\n    warnedInitScriptOnce = true;\n  }\n  return deprecatedGetInitColorSchemeScript(params);\n};\n\n/**\n * TODO: remove this export in v7\n * @deprecated\n * The `CssVarsProvider` component has been deprecated and ported into `ThemeProvider`.\n *\n * You should use `ThemeProvider` and `createTheme()` instead:\n *\n * ```diff\n * - import { CssVarsProvider, extendTheme } from '@mui/material/styles';\n * + import { ThemeProvider, createTheme } from '@mui/material/styles';\n *\n * - const theme = extendTheme();\n * + const theme = createTheme({\n * +   cssVariables: true,\n * +   colorSchemes: { light: true, dark: true },\n * + });\n *\n * - <CssVarsProvider theme={theme}>\n * + <ThemeProvider theme={theme}>\n * ```\n *\n * To see the full documentation, check out https://mui.com/material-ui/customization/css-theme-variables/usage/.\n */\nexport const CssVarsProvider = InternalCssVarsProvider;\nexport { useColorScheme, getInitColorSchemeScript, Experimental_CssVarsProvider };"],"mappings":"AAAA,YAAY;;AAAC,OAAAA,aAAA;AAEb,OAAO,KAAKC,KAAK,MAAM,OAAO;AAC9B,OAAOC,eAAe,MAAM,6BAA6B;AACzD,SAASC,8BAA8B,IAAIC,qBAAqB,QAAQ,aAAa;AACrF,OAAOC,WAAW,MAAM,kBAAkB;AAC1C,OAAOC,gBAAgB,MAAM,uBAAuB;AACpD,OAAOC,QAAQ,MAAM,iBAAiB;AACtC,SAASC,aAAa,QAAQ,mDAAmD;AACjF,SAASC,GAAG,IAAIC,IAAI,QAAQ,mBAAmB;AAC/C,IAAAC,qBAAA,GAIIP,qBAAqB,CAAC;IACxBQ,OAAO,EAAEL,QAAQ;IACjB;IACAM,KAAK,EAAE,SAAAA,MAAA;MAAA,OAAMR,WAAW,CAAC;QACvBS,YAAY,EAAE;MAChB,CAAC,CAAC;IAAA;IACFC,qBAAqB,EAAEP,aAAa,CAACO,qBAAqB;IAC1DC,cAAc,EAAER,aAAa,CAACQ,cAAc;IAC5CC,kBAAkB,EAAE;MAClBC,KAAK,EAAEV,aAAa,CAACW,uBAAuB;MAC5CC,IAAI,EAAEZ,aAAa,CAACa;IACtB,CAAC;IACDC,YAAY,EAAE,SAAAA,aAAAT,KAAK,EAAI;MACrB,IAAMU,QAAQ,GAAAvB,aAAA,CAAAA,aAAA,KACTa,KAAK;QACRW,UAAU,EAAElB,gBAAgB,CAACO,KAAK,CAACY,OAAO,EAAEZ,KAAK,CAACW,UAAU;MAAC,EAC9D;MACDD,QAAQ,CAACG,WAAW,GAAG,SAASC,EAAEA,CAACC,KAAK,EAAE;QACxC,OAAO1B,eAAe,CAAC;UACrByB,EAAE,EAAEC,KAAK;UACTf,KAAK,EAAE;QACT,CAAC,CAAC;MACJ,CAAC;MACD,OAAOU,QAAQ;IACjB;EACF,CAAC,CAAC;EA5BiBM,uBAAuB,GAAAlB,qBAAA,CAAxCmB,eAAe;EACfC,cAAc,GAAApB,qBAAA,CAAdoB,cAAc;EACYC,kCAAkC,GAAArB,qBAAA,CAA5DsB,wBAAwB;AA2B1B,IAAIC,UAAU,GAAG,KAAK;;AAEtB;AACA;AACA,SAASC,4BAA4BA,CAACP,KAAK,EAAE;EAC3C,IAAIQ,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,EAAE;IACzC,IAAI,CAACJ,UAAU,EAAE;MACfK,OAAO,CAACC,IAAI,CAAC,CAAC,qFAAqF,EAAE,EAAE,EAAE,gFAAgF,EAAE,kGAAkG,CAAC,CAACC,IAAI,CAAC,IAAI,CAAC,CAAC;MAC1SP,UAAU,GAAG,IAAI;IACnB;EACF;EACA,OAAO,aAAaxB,IAAI,CAACmB,uBAAuB,EAAA7B,aAAA,KAC3C4B,KAAK,CACT,CAAC;AACJ;AACA,IAAIc,oBAAoB,GAAG,KAAK;;AAEhC;AACA,IAAMT,wBAAwB,GAAG,SAA3BA,wBAAwBA,CAAGU,MAAM,EAAI;EACzC,IAAI,CAACD,oBAAoB,EAAE;IACzBH,OAAO,CAACC,IAAI,CAAC,CAAC,iEAAiE,EAAE,EAAE,EAAE,0FAA0F,EAAE,yEAAyE,CAAC,CAACC,IAAI,CAAC,IAAI,CAAC,CAAC;IACvQC,oBAAoB,GAAG,IAAI;EAC7B;EACA,OAAOV,kCAAkC,CAACW,MAAM,CAAC;AACnD,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,IAAMb,eAAe,GAAGD,uBAAuB;AACtD,SAASE,cAAc,EAAEE,wBAAwB,EAAEE,4BAA4B"},"metadata":{},"sourceType":"module","externalDependencies":[]}