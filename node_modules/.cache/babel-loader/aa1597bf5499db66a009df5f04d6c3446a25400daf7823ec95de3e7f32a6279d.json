{"ast":null,"code":"'use client';\n\nimport { jsx } from 'react/jsx-runtime';\nimport { useMemo, useEffect } from 'react';\nimport { useClickOutside, useMergedRef } from '@mantine/hooks';\nimport { getSpacing } from '../../core/utils/get-size/get-size.mjs';\nimport { createVarsResolver } from '../../core/styles-api/create-vars-resolver/create-vars-resolver.mjs';\nimport 'clsx';\nimport '../../core/MantineProvider/Mantine.context.mjs';\nimport '../../core/MantineProvider/default-theme.mjs';\nimport '../../core/MantineProvider/MantineProvider.mjs';\nimport '../../core/MantineProvider/MantineThemeProvider/MantineThemeProvider.mjs';\nimport { useProps } from '../../core/MantineProvider/use-props/use-props.mjs';\nimport '../../core/MantineProvider/MantineCssVariables/MantineCssVariables.mjs';\nimport { useStyles } from '../../core/styles-api/use-styles/use-styles.mjs';\nimport { Box } from '../../core/Box/Box.mjs';\nimport { factory } from '../../core/factory/factory.mjs';\nimport '../../core/DirectionProvider/DirectionProvider.mjs';\nimport { TreeNode } from './TreeNode.mjs';\nimport { useTree } from './use-tree.mjs';\nimport classes from './Tree.module.css.mjs';\nfunction getFlatValues(data) {\n  return data.reduce((acc, item) => {\n    acc.push(item.value);\n    if (item.children) {\n      acc.push(...getFlatValues(item.children));\n    }\n    return acc;\n  }, []);\n}\nconst defaultProps = {\n  expandOnClick: true,\n  allowRangeSelection: true,\n  expandOnSpace: true\n};\nconst varsResolver = createVarsResolver((_theme, {\n  levelOffset\n}) => ({\n  root: {\n    \"--level-offset\": getSpacing(levelOffset)\n  }\n}));\nconst Tree = factory((_props, ref) => {\n  const props = useProps(\"Tree\", defaultProps, _props);\n  const {\n    classNames,\n    className,\n    style,\n    styles,\n    unstyled,\n    vars,\n    data,\n    expandOnClick,\n    tree,\n    renderNode,\n    selectOnClick,\n    clearSelectionOnOutsideClick,\n    allowRangeSelection,\n    expandOnSpace,\n    levelOffset,\n    ...others\n  } = props;\n  const defaultController = useTree();\n  const controller = tree || defaultController;\n  const getStyles = useStyles({\n    name: \"Tree\",\n    classes,\n    props,\n    className,\n    style,\n    classNames,\n    styles,\n    unstyled,\n    vars,\n    varsResolver\n  });\n  const clickOutsideRef = useClickOutside(() => clearSelectionOnOutsideClick && controller.clearSelected());\n  const mergedRef = useMergedRef(ref, clickOutsideRef);\n  const flatValues = useMemo(() => getFlatValues(data), [data]);\n  useEffect(() => {\n    controller.initialize(data);\n  }, [data]);\n  const nodes = data.map((node, index) => /* @__PURE__ */jsx(TreeNode, {\n    node,\n    getStyles,\n    rootIndex: index,\n    expandOnClick,\n    selectOnClick,\n    controller,\n    renderNode,\n    flatValues,\n    allowRangeSelection,\n    expandOnSpace\n  }, node.value));\n  return /* @__PURE__ */jsx(Box, {\n    component: \"ul\",\n    ref: mergedRef,\n    ...getStyles(\"root\"),\n    ...others,\n    role: \"tree\",\n    \"aria-multiselectable\": controller.multiple,\n    \"data-tree-root\": true,\n    children: nodes\n  });\n});\nTree.displayName = \"@mantine/core/Tree\";\nTree.classes = classes;\nexport { Tree };","map":{"version":3,"names":["getFlatValues","data","reduce","acc","item","push","value","children","defaultProps","expandOnClick","allowRangeSelection","expandOnSpace","varsResolver","createVarsResolver","_theme","levelOffset","root","getSpacing","Tree","factory","_props","ref","props","useProps","classNames","className","style","styles","unstyled","vars","tree","renderNode","selectOnClick","clearSelectionOnOutsideClick","others","defaultController","useTree","controller","getStyles","useStyles","name","classes","clickOutsideRef","useClickOutside","clearSelected","mergedRef","useMergedRef","flatValues","useMemo","useEffect","initialize","nodes","map","node","index","jsx","TreeNode","rootIndex","Box","component","role","multiple","displayName"],"sources":["/Users/clarencechau/Documents/projects/personal-website/clarencechau.github.io/node_modules/@mantine/core/src/components/Tree/Tree.tsx"],"sourcesContent":["import { useEffect, useMemo } from 'react';\nimport { useClickOutside, useMergedRef } from '@mantine/hooks';\nimport {\n  Box,\n  BoxProps,\n  createVarsResolver,\n  ElementProps,\n  factory,\n  Factory,\n  getSpacing,\n  MantineSpacing,\n  StylesApiProps,\n  useProps,\n  useStyles,\n} from '../../core';\nimport { TreeNode } from './TreeNode';\nimport { TreeController, useTree } from './use-tree';\nimport classes from './Tree.module.css';\n\nexport interface TreeNodeData {\n  label: React.ReactNode;\n  value: string;\n  nodeProps?: Record<string, any>;\n  children?: TreeNodeData[];\n}\n\nexport interface RenderTreeNodePayload {\n  /** Node level in the tree */\n  level: number;\n\n  /** `true` if the node is expanded, applicable only for nodes with `children` */\n  expanded: boolean;\n\n  /** `true` if the node has non-empty `children` array */\n  hasChildren: boolean;\n\n  /** `true` if the node is selected */\n  selected: boolean;\n\n  /** Node data from the `data` prop of `Tree` */\n  node: TreeNodeData;\n\n  /** Tree controller instance, return value of `useTree` hook */\n  tree: TreeController;\n\n  /** Props to spread into the root node element */\n  elementProps: {\n    className: string;\n    style: React.CSSProperties;\n    onClick: (event: React.MouseEvent) => void;\n    'data-selected': boolean | undefined;\n    'data-value': string;\n    'data-hovered': boolean | undefined;\n  };\n}\n\nexport type RenderNode = (payload: RenderTreeNodePayload) => React.ReactNode;\n\nexport type TreeStylesNames = 'root' | 'node' | 'subtree' | 'label';\nexport type TreeCssVariables = {\n  root: '--level-offset';\n};\n\nexport interface TreeProps extends BoxProps, StylesApiProps<TreeFactory>, ElementProps<'ul'> {\n  /** Data used to render nodes */\n  data: TreeNodeData[];\n\n  /** Horizontal padding of each subtree level, key of `theme.spacing` or any valid CSS value, `'lg'` by default */\n  levelOffset?: MantineSpacing;\n\n  /** Determines whether tree node with children should be expanded on click, `true` by default */\n  expandOnClick?: boolean;\n\n  /** Determines whether tree node with children should be expanded on space key press, `true` by default */\n  expandOnSpace?: boolean;\n\n  /** Determines whether node should be selected on click, `false` by default */\n  selectOnClick?: boolean;\n\n  /** Use-tree hook instance that can be used to manipulate component state */\n  tree?: TreeController;\n\n  /** A function to render tree node label */\n  renderNode?: RenderNode;\n\n  /** Determines whether selection should be cleared when user clicks outside of the tree, `false` by default */\n  clearSelectionOnOutsideClick?: boolean;\n\n  /** Determines whether tree nodes range can be selected with click when `Shift` key is pressed, `true` by default */\n  allowRangeSelection?: boolean;\n}\n\nfunction getFlatValues(data: TreeNodeData[]): string[] {\n  return data.reduce<string[]>((acc, item) => {\n    acc.push(item.value);\n    if (item.children) {\n      acc.push(...getFlatValues(item.children));\n    }\n    return acc;\n  }, []);\n}\n\nexport type TreeFactory = Factory<{\n  props: TreeProps;\n  ref: HTMLUListElement;\n  stylesNames: TreeStylesNames;\n  vars: TreeCssVariables;\n}>;\n\nconst defaultProps: Partial<TreeProps> = {\n  expandOnClick: true,\n  allowRangeSelection: true,\n  expandOnSpace: true,\n};\n\nconst varsResolver = createVarsResolver<TreeFactory>((_theme, { levelOffset }) => ({\n  root: {\n    '--level-offset': getSpacing(levelOffset),\n  },\n}));\n\nexport const Tree = factory<TreeFactory>((_props, ref) => {\n  const props = useProps('Tree', defaultProps, _props);\n  const {\n    classNames,\n    className,\n    style,\n    styles,\n    unstyled,\n    vars,\n    data,\n    expandOnClick,\n    tree,\n    renderNode,\n    selectOnClick,\n    clearSelectionOnOutsideClick,\n    allowRangeSelection,\n    expandOnSpace,\n    levelOffset,\n    ...others\n  } = props;\n\n  const defaultController = useTree();\n  const controller = tree || defaultController;\n\n  const getStyles = useStyles<TreeFactory>({\n    name: 'Tree',\n    classes,\n    props,\n    className,\n    style,\n    classNames,\n    styles,\n    unstyled,\n    vars,\n    varsResolver,\n  });\n\n  const clickOutsideRef = useClickOutside(\n    () => clearSelectionOnOutsideClick && controller.clearSelected()\n  );\n\n  const mergedRef = useMergedRef(ref, clickOutsideRef);\n\n  const flatValues = useMemo(() => getFlatValues(data), [data]);\n\n  useEffect(() => {\n    controller.initialize(data);\n  }, [data]);\n\n  const nodes = data.map((node, index) => (\n    <TreeNode\n      key={node.value}\n      node={node}\n      getStyles={getStyles}\n      rootIndex={index}\n      expandOnClick={expandOnClick}\n      selectOnClick={selectOnClick}\n      controller={controller}\n      renderNode={renderNode}\n      flatValues={flatValues}\n      allowRangeSelection={allowRangeSelection}\n      expandOnSpace={expandOnSpace}\n    />\n  ));\n\n  return (\n    <Box\n      component=\"ul\"\n      ref={mergedRef}\n      {...getStyles('root')}\n      {...others}\n      role=\"tree\"\n      aria-multiselectable={controller.multiple}\n      data-tree-root\n    >\n      {nodes}\n    </Box>\n  );\n});\n\nTree.displayName = '@mantine/core/Tree';\nTree.classes = classes;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}