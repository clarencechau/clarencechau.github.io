{"ast":null,"code":"import _slicedToArray from \"/Users/clarencechau/Documents/projects/personal-website/clarencechau.github.io/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _createForOfIteratorHelper from \"/Users/clarencechau/Documents/projects/personal-website/clarencechau.github.io/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\n/**\n * Type guard to check if the object has a \"main\" property of type string.\n *\n * @param obj - the object to check\n * @returns boolean\n */\nfunction hasCorrectMainProperty(obj) {\n  return typeof obj.main === 'string';\n}\n/**\n * Checks if the object conforms to the SimplePaletteColorOptions type.\n * The minimum requirement is that the object has a \"main\" property of type string, this is always checked.\n * Optionally, you can pass additional properties to check.\n *\n * @param obj - The object to check\n * @param additionalPropertiesToCheck - Array containing \"light\", \"dark\", and/or \"contrastText\"\n * @returns boolean\n */\nfunction checkSimplePaletteColorValues(obj) {\n  var additionalPropertiesToCheck = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  if (!hasCorrectMainProperty(obj)) {\n    return false;\n  }\n  var _iterator = _createForOfIteratorHelper(additionalPropertiesToCheck),\n    _step;\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var value = _step.value;\n      if (!obj.hasOwnProperty(value) || typeof obj[value] !== 'string') {\n        return false;\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n  return true;\n}\n\n/**\n * Creates a filter function used to filter simple palette color options.\n * The minimum requirement is that the object has a \"main\" property of type string, this is always checked.\n * Optionally, you can pass additional properties to check.\n *\n * @param additionalPropertiesToCheck - Array containing \"light\", \"dark\", and/or \"contrastText\"\n * @returns ([, value]: [any, PaletteColorOptions]) => boolean\n */\nexport default function createSimplePaletteValueFilter() {\n  var additionalPropertiesToCheck = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  return function (_ref) {\n    var _ref2 = _slicedToArray(_ref, 2),\n      value = _ref2[1];\n    return value && checkSimplePaletteColorValues(value, additionalPropertiesToCheck);\n  };\n}","map":{"version":3,"names":["hasCorrectMainProperty","obj","main","checkSimplePaletteColorValues","additionalPropertiesToCheck","arguments","length","undefined","_iterator","_createForOfIteratorHelper","_step","s","n","done","value","hasOwnProperty","err","e","f","createSimplePaletteValueFilter","_ref","_ref2","_slicedToArray"],"sources":["/Users/clarencechau/Documents/projects/personal-website/clarencechau.github.io/node_modules/@mui/material/utils/createSimplePaletteValueFilter.js"],"sourcesContent":["/**\n * Type guard to check if the object has a \"main\" property of type string.\n *\n * @param obj - the object to check\n * @returns boolean\n */\nfunction hasCorrectMainProperty(obj) {\n  return typeof obj.main === 'string';\n}\n/**\n * Checks if the object conforms to the SimplePaletteColorOptions type.\n * The minimum requirement is that the object has a \"main\" property of type string, this is always checked.\n * Optionally, you can pass additional properties to check.\n *\n * @param obj - The object to check\n * @param additionalPropertiesToCheck - Array containing \"light\", \"dark\", and/or \"contrastText\"\n * @returns boolean\n */\nfunction checkSimplePaletteColorValues(obj, additionalPropertiesToCheck = []) {\n  if (!hasCorrectMainProperty(obj)) {\n    return false;\n  }\n  for (const value of additionalPropertiesToCheck) {\n    if (!obj.hasOwnProperty(value) || typeof obj[value] !== 'string') {\n      return false;\n    }\n  }\n  return true;\n}\n\n/**\n * Creates a filter function used to filter simple palette color options.\n * The minimum requirement is that the object has a \"main\" property of type string, this is always checked.\n * Optionally, you can pass additional properties to check.\n *\n * @param additionalPropertiesToCheck - Array containing \"light\", \"dark\", and/or \"contrastText\"\n * @returns ([, value]: [any, PaletteColorOptions]) => boolean\n */\nexport default function createSimplePaletteValueFilter(additionalPropertiesToCheck = []) {\n  return ([, value]) => value && checkSimplePaletteColorValues(value, additionalPropertiesToCheck);\n}"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,sBAAsBA,CAACC,GAAG,EAAE;EACnC,OAAO,OAAOA,GAAG,CAACC,IAAI,KAAK,QAAQ;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,6BAA6BA,CAACF,GAAG,EAAoC;EAAA,IAAlCG,2BAA2B,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,EAAE;EAC1E,IAAI,CAACL,sBAAsB,CAACC,GAAG,CAAC,EAAE;IAChC,OAAO,KAAK;EACd;EAAC,IAAAO,SAAA,GAAAC,0BAAA,CACmBL,2BAA2B;IAAAM,KAAA;EAAA;IAA/C,KAAAF,SAAA,CAAAG,CAAA,MAAAD,KAAA,GAAAF,SAAA,CAAAI,CAAA,IAAAC,IAAA,GAAiD;MAAA,IAAtCC,KAAK,GAAAJ,KAAA,CAAAI,KAAA;MACd,IAAI,CAACb,GAAG,CAACc,cAAc,CAACD,KAAK,CAAC,IAAI,OAAOb,GAAG,CAACa,KAAK,CAAC,KAAK,QAAQ,EAAE;QAChE,OAAO,KAAK;MACd;IACF;EAAC,SAAAE,GAAA;IAAAR,SAAA,CAAAS,CAAA,CAAAD,GAAA;EAAA;IAAAR,SAAA,CAAAU,CAAA;EAAA;EACD,OAAO,IAAI;AACb;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAASC,8BAA8BA,CAAA,EAAmC;EAAA,IAAlCf,2BAA2B,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,EAAE;EACrF,OAAO,UAAAe,IAAA;IAAA,IAAAC,KAAA,GAAAC,cAAA,CAAAF,IAAA;MAAIN,KAAK,GAAAO,KAAA;IAAA,OAAMP,KAAK,IAAIX,6BAA6B,CAACW,KAAK,EAAEV,2BAA2B,CAAC;EAAA;AAClG"},"metadata":{},"sourceType":"module","externalDependencies":[]}