{"ast":null,"code":"'use client';\n\nimport _createClass from \"/Users/clarencechau/Documents/projects/personal-website/clarencechau.github.io/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _classCallCheck from \"/Users/clarencechau/Documents/projects/personal-website/clarencechau.github.io/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _inherits from \"/Users/clarencechau/Documents/projects/personal-website/clarencechau.github.io/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/clarencechau/Documents/projects/personal-website/clarencechau.github.io/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { CacheProvider } from '@emotion/react';\nimport createCache from '@emotion/cache';\nimport { StyleSheet } from '@emotion/sheet';\n\n// We might be able to remove this when this issue is fixed:\n// https://github.com/emotion-js/emotion/issues/2790\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nvar createEmotionCache = function createEmotionCache(options) {\n  var cache = createCache(options);\n\n  /**\n   * This is for client-side apps only.\n   * A custom sheet is required to make the GlobalStyles API work with `prepend: true`.\n   * This is because the [sheet](https://github.com/emotion-js/emotion/blob/main/packages/react/src/global.js#L94-L99) does not consume the options.\n   */\n  var MyStyleSheet = /*#__PURE__*/function (_StyleSheet) {\n    _inherits(MyStyleSheet, _StyleSheet);\n    var _super = _createSuper(MyStyleSheet);\n    function MyStyleSheet(args) {\n      var _this;\n      _classCallCheck(this, MyStyleSheet);\n      _this = _super.call(this, args);\n      _this.prepend = cache.sheet.prepend;\n      return _this;\n    }\n    return _createClass(MyStyleSheet);\n  }(StyleSheet); // Do the same as https://github.com/emotion-js/emotion/blob/main/packages/cache/src/index.js#L238-L245\n  cache.sheet = new MyStyleSheet({\n    key: cache.key,\n    nonce: cache.sheet.nonce,\n    container: cache.sheet.container,\n    speedy: cache.sheet.isSpeedy,\n    prepend: cache.sheet.prepend,\n    insertionPoint: cache.sheet.insertionPoint\n  });\n  return cache;\n};\n\n// prepend: true moves MUI styles to the top of the <head> so they're loaded first.\n// It allows developers to easily override MUI styles with other styling solutions, like CSS modules.\nvar cache;\nif (typeof document === 'object') {\n  cache = createEmotionCache({\n    key: 'css',\n    prepend: true\n  });\n}\nexport default function StyledEngineProvider(props) {\n  var injectFirst = props.injectFirst,\n    children = props.children;\n  return injectFirst && cache ? /*#__PURE__*/_jsx(CacheProvider, {\n    value: cache,\n    children: children\n  }) : children;\n}\nprocess.env.NODE_ENV !== \"production\" ? StyledEngineProvider.propTypes = {\n  /**\n   * Your component tree.\n   */\n  children: PropTypes.node,\n  /**\n   * By default, the styles are injected last in the <head> element of the page.\n   * As a result, they gain more specificity than any other style sheet.\n   * If you want to override MUI's styles, set this prop.\n   */\n  injectFirst: PropTypes.bool\n} : void 0;","map":{"version":3,"names":["_createClass","_classCallCheck","_inherits","_createSuper","React","PropTypes","CacheProvider","createCache","StyleSheet","jsx","_jsx","createEmotionCache","options","cache","MyStyleSheet","_StyleSheet","_super","args","_this","call","prepend","sheet","key","nonce","container","speedy","isSpeedy","insertionPoint","document","StyledEngineProvider","props","injectFirst","children","value","process","env","NODE_ENV","propTypes","node","bool"],"sources":["/Users/clarencechau/Documents/projects/personal-website/clarencechau.github.io/node_modules/@mui/styled-engine/StyledEngineProvider/StyledEngineProvider.js"],"sourcesContent":["'use client';\n\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { CacheProvider } from '@emotion/react';\nimport createCache from '@emotion/cache';\nimport { StyleSheet } from '@emotion/sheet';\n\n// We might be able to remove this when this issue is fixed:\n// https://github.com/emotion-js/emotion/issues/2790\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst createEmotionCache = options => {\n  const cache = createCache(options);\n\n  /**\n   * This is for client-side apps only.\n   * A custom sheet is required to make the GlobalStyles API work with `prepend: true`.\n   * This is because the [sheet](https://github.com/emotion-js/emotion/blob/main/packages/react/src/global.js#L94-L99) does not consume the options.\n   */\n  class MyStyleSheet extends StyleSheet {\n    constructor(args) {\n      super(args);\n      this.prepend = cache.sheet.prepend;\n    }\n  }\n\n  // Do the same as https://github.com/emotion-js/emotion/blob/main/packages/cache/src/index.js#L238-L245\n  cache.sheet = new MyStyleSheet({\n    key: cache.key,\n    nonce: cache.sheet.nonce,\n    container: cache.sheet.container,\n    speedy: cache.sheet.isSpeedy,\n    prepend: cache.sheet.prepend,\n    insertionPoint: cache.sheet.insertionPoint\n  });\n  return cache;\n};\n\n// prepend: true moves MUI styles to the top of the <head> so they're loaded first.\n// It allows developers to easily override MUI styles with other styling solutions, like CSS modules.\nlet cache;\nif (typeof document === 'object') {\n  cache = createEmotionCache({\n    key: 'css',\n    prepend: true\n  });\n}\nexport default function StyledEngineProvider(props) {\n  const {\n    injectFirst,\n    children\n  } = props;\n  return injectFirst && cache ? /*#__PURE__*/_jsx(CacheProvider, {\n    value: cache,\n    children: children\n  }) : children;\n}\nprocess.env.NODE_ENV !== \"production\" ? StyledEngineProvider.propTypes = {\n  /**\n   * Your component tree.\n   */\n  children: PropTypes.node,\n  /**\n   * By default, the styles are injected last in the <head> element of the page.\n   * As a result, they gain more specificity than any other style sheet.\n   * If you want to override MUI's styles, set this prop.\n   */\n  injectFirst: PropTypes.bool\n} : void 0;"],"mappings":"AAAA,YAAY;;AAAC,OAAAA,YAAA;AAAA,OAAAC,eAAA;AAAA,OAAAC,SAAA;AAAA,OAAAC,YAAA;AAEb,OAAO,KAAKC,KAAK,MAAM,OAAO;AAC9B,OAAOC,SAAS,MAAM,YAAY;AAClC,SAASC,aAAa,QAAQ,gBAAgB;AAC9C,OAAOC,WAAW,MAAM,gBAAgB;AACxC,SAASC,UAAU,QAAQ,gBAAgB;;AAE3C;AACA;AACA,SAASC,GAAG,IAAIC,IAAI,QAAQ,mBAAmB;AAC/C,IAAMC,kBAAkB,GAAG,SAArBA,kBAAkBA,CAAGC,OAAO,EAAI;EACpC,IAAMC,KAAK,GAAGN,WAAW,CAACK,OAAO,CAAC;;EAElC;AACF;AACA;AACA;AACA;EAJE,IAKME,YAAY,0BAAAC,WAAA;IAAAb,SAAA,CAAAY,YAAA,EAAAC,WAAA;IAAA,IAAAC,MAAA,GAAAb,YAAA,CAAAW,YAAA;IAChB,SAAAA,aAAYG,IAAI,EAAE;MAAA,IAAAC,KAAA;MAAAjB,eAAA,OAAAa,YAAA;MAChBI,KAAA,GAAAF,MAAA,CAAAG,IAAA,OAAMF,IAAI;MACVC,KAAA,CAAKE,OAAO,GAAGP,KAAK,CAACQ,KAAK,CAACD,OAAO;MAAC,OAAAF,KAAA;IACrC;IAAC,OAAAlB,YAAA,CAAAc,YAAA;EAAA,EAJwBN,UAAU,GAOrC;EACAK,KAAK,CAACQ,KAAK,GAAG,IAAIP,YAAY,CAAC;IAC7BQ,GAAG,EAAET,KAAK,CAACS,GAAG;IACdC,KAAK,EAAEV,KAAK,CAACQ,KAAK,CAACE,KAAK;IACxBC,SAAS,EAAEX,KAAK,CAACQ,KAAK,CAACG,SAAS;IAChCC,MAAM,EAAEZ,KAAK,CAACQ,KAAK,CAACK,QAAQ;IAC5BN,OAAO,EAAEP,KAAK,CAACQ,KAAK,CAACD,OAAO;IAC5BO,cAAc,EAAEd,KAAK,CAACQ,KAAK,CAACM;EAC9B,CAAC,CAAC;EACF,OAAOd,KAAK;AACd,CAAC;;AAED;AACA;AACA,IAAIA,KAAK;AACT,IAAI,OAAOe,QAAQ,KAAK,QAAQ,EAAE;EAChCf,KAAK,GAAGF,kBAAkB,CAAC;IACzBW,GAAG,EAAE,KAAK;IACVF,OAAO,EAAE;EACX,CAAC,CAAC;AACJ;AACA,eAAe,SAASS,oBAAoBA,CAACC,KAAK,EAAE;EAClD,IACEC,WAAW,GAETD,KAAK,CAFPC,WAAW;IACXC,QAAQ,GACNF,KAAK,CADPE,QAAQ;EAEV,OAAOD,WAAW,IAAIlB,KAAK,GAAG,aAAaH,IAAI,CAACJ,aAAa,EAAE;IAC7D2B,KAAK,EAAEpB,KAAK;IACZmB,QAAQ,EAAEA;EACZ,CAAC,CAAC,GAAGA,QAAQ;AACf;AACAE,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,GAAGP,oBAAoB,CAACQ,SAAS,GAAG;EACvE;AACF;AACA;EACEL,QAAQ,EAAE3B,SAAS,CAACiC,IAAI;EACxB;AACF;AACA;AACA;AACA;EACEP,WAAW,EAAE1B,SAAS,CAACkC;AACzB,CAAC,GAAG,KAAK,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}