{"ast":null,"code":"'use client';\n\nimport { jsx } from 'react/jsx-runtime';\nimport 'react';\nimport { getSize, getRadius } from '../../../core/utils/get-size/get-size.mjs';\nimport '@mantine/hooks';\nimport { createVarsResolver } from '../../../core/styles-api/create-vars-resolver/create-vars-resolver.mjs';\nimport 'clsx';\nimport { parseThemeColor } from '../../../core/MantineProvider/color-functions/parse-theme-color/parse-theme-color.mjs';\nimport { getThemeColor } from '../../../core/MantineProvider/color-functions/get-theme-color/get-theme-color.mjs';\nimport { getContrastColor } from '../../../core/MantineProvider/color-functions/get-contrast-color/get-contrast-color.mjs';\nimport { getAutoContrastValue } from '../../../core/MantineProvider/color-functions/get-auto-contrast-value/get-auto-contrast-value.mjs';\nimport '../../../core/MantineProvider/Mantine.context.mjs';\nimport '../../../core/MantineProvider/default-theme.mjs';\nimport '../../../core/MantineProvider/MantineProvider.mjs';\nimport '../../../core/MantineProvider/MantineThemeProvider/MantineThemeProvider.mjs';\nimport { useProps } from '../../../core/MantineProvider/use-props/use-props.mjs';\nimport '../../../core/MantineProvider/MantineCssVariables/MantineCssVariables.mjs';\nimport { useStyles } from '../../../core/styles-api/use-styles/use-styles.mjs';\nimport { Box } from '../../../core/Box/Box.mjs';\nimport { factory } from '../../../core/factory/factory.mjs';\nimport '../../../core/DirectionProvider/DirectionProvider.mjs';\nimport { useRadioCardContext } from '../RadioCard/RadioCard.context.mjs';\nimport { RadioIcon } from '../RadioIcon.mjs';\nimport classes from './RadioIndicator.module.css.mjs';\nconst defaultProps = {\n  icon: RadioIcon\n};\nconst varsResolver = createVarsResolver((theme, {\n  radius,\n  color,\n  size,\n  iconColor,\n  variant,\n  autoContrast\n}) => {\n  const parsedColor = parseThemeColor({\n    color: color || theme.primaryColor,\n    theme\n  });\n  const outlineColor = parsedColor.isThemeColor && parsedColor.shade === void 0 ? `var(--mantine-color-${parsedColor.color}-outline)` : parsedColor.color;\n  return {\n    indicator: {\n      \"--radio-size\": getSize(size, \"radio-size\"),\n      \"--radio-radius\": radius === void 0 ? void 0 : getRadius(radius),\n      \"--radio-color\": variant === \"outline\" ? outlineColor : getThemeColor(color, theme),\n      \"--radio-icon-size\": getSize(size, \"radio-icon-size\"),\n      \"--radio-icon-color\": iconColor ? getThemeColor(iconColor, theme) : getAutoContrastValue(autoContrast, theme) ? getContrastColor({\n        color,\n        theme,\n        autoContrast\n      }) : void 0\n    }\n  };\n});\nconst RadioIndicator = factory((_props, ref) => {\n  const props = useProps(\"RadioIndicator\", defaultProps, _props);\n  const {\n    classNames,\n    className,\n    style,\n    styles,\n    unstyled,\n    vars,\n    icon,\n    radius,\n    color,\n    iconColor,\n    autoContrast,\n    checked,\n    mod,\n    variant,\n    disabled,\n    ...others\n  } = props;\n  const Icon = icon;\n  const getStyles = useStyles({\n    name: \"RadioIndicator\",\n    classes,\n    props,\n    className,\n    style,\n    classNames,\n    styles,\n    unstyled,\n    vars,\n    varsResolver,\n    rootSelector: \"indicator\"\n  });\n  const ctx = useRadioCardContext();\n  const _checked = typeof checked === \"boolean\" ? checked : ctx?.checked || false;\n  return /* @__PURE__ */jsx(Box, {\n    ref,\n    ...getStyles(\"indicator\", {\n      variant\n    }),\n    variant,\n    mod: [{\n      checked: _checked,\n      disabled\n    }, mod],\n    ...others,\n    children: /* @__PURE__ */jsx(Icon, {\n      ...getStyles(\"icon\")\n    })\n  });\n});\nRadioIndicator.displayName = \"@mantine/core/RadioIndicator\";\nRadioIndicator.classes = classes;\nexport { RadioIndicator };","map":{"version":3,"names":["defaultProps","icon","RadioIcon","varsResolver","createVarsResolver","theme","radius","color","size","iconColor","variant","autoContrast","parsedColor","parseThemeColor","primaryColor","outlineColor","isThemeColor","shade","indicator","getSize","getRadius","getThemeColor","getAutoContrastValue","getContrastColor","RadioIndicator","factory","_props","ref","props","useProps","classNames","className","style","styles","unstyled","vars","checked","mod","disabled","others","Icon","getStyles","useStyles","name","classes","rootSelector","ctx","useRadioCardContext","_checked","jsx","Box","children","displayName"],"sources":["/Users/clarencechau/Documents/projects/personal-website/clarencechau.github.io/node_modules/@mantine/core/src/components/Radio/RadioIndicator/RadioIndicator.tsx"],"sourcesContent":["import {\n  Box,\n  BoxProps,\n  createVarsResolver,\n  ElementProps,\n  factory,\n  Factory,\n  getAutoContrastValue,\n  getContrastColor,\n  getRadius,\n  getSize,\n  getThemeColor,\n  MantineColor,\n  MantineRadius,\n  MantineSize,\n  parseThemeColor,\n  StylesApiProps,\n  useProps,\n  useStyles,\n} from '../../../core';\nimport { useRadioCardContext } from '../RadioCard/RadioCard.context';\nimport { RadioIcon, RadioIconProps } from '../RadioIcon';\nimport classes from './RadioIndicator.module.css';\n\nexport type RadioIndicatorStylesNames = 'indicator' | 'icon';\nexport type RadioIndicatorVariant = 'filled' | 'outline';\nexport type RadioIndicatorCssVariables = {\n  indicator:\n    | '--radio-size'\n    | '--radio-radius'\n    | '--radio-color'\n    | '--radio-icon-color'\n    | '--radio-icon-size';\n};\n\nexport interface RadioIndicatorProps\n  extends BoxProps,\n    StylesApiProps<RadioIndicatorFactory>,\n    ElementProps<'div'> {\n  /** Key of `theme.colors` or any valid CSS color to set input background color in checked state, `theme.primaryColor` by default */\n  color?: MantineColor;\n\n  /** Controls size of the component, `'sm'` by default */\n  size?: MantineSize | (string & {});\n\n  /** Key of `theme.radius` or any valid CSS value to set `border-radius,` `theme.defaultRadius` by default */\n  radius?: MantineRadius;\n\n  /** Key of `theme.colors` or any valid CSS color to set icon color, by default value depends on `theme.autoContrast` */\n  iconColor?: MantineColor;\n\n  /** Determines whether icon color with filled variant should depend on `background-color`. If luminosity of the `color` prop is less than `theme.luminosityThreshold`, then `theme.white` will be used for text color, otherwise `theme.black`. Overrides `theme.autoContrast`. */\n  autoContrast?: boolean;\n\n  /** A component that replaces default check icon */\n  icon?: React.FC<RadioIconProps>;\n\n  /** Determines whether the component should have checked styles */\n  checked?: boolean;\n\n  /** Determines whether the component should have disabled styles */\n  disabled?: boolean;\n}\n\nexport type RadioIndicatorFactory = Factory<{\n  props: RadioIndicatorProps;\n  ref: HTMLDivElement;\n  stylesNames: RadioIndicatorStylesNames;\n  vars: RadioIndicatorCssVariables;\n  variant: RadioIndicatorVariant;\n}>;\n\nconst defaultProps: Partial<RadioIndicatorProps> = {\n  icon: RadioIcon,\n};\n\nconst varsResolver = createVarsResolver<RadioIndicatorFactory>(\n  (theme, { radius, color, size, iconColor, variant, autoContrast }) => {\n    const parsedColor = parseThemeColor({ color: color || theme.primaryColor, theme });\n    const outlineColor =\n      parsedColor.isThemeColor && parsedColor.shade === undefined\n        ? `var(--mantine-color-${parsedColor.color}-outline)`\n        : parsedColor.color;\n\n    return {\n      indicator: {\n        '--radio-size': getSize(size, 'radio-size'),\n        '--radio-radius': radius === undefined ? undefined : getRadius(radius),\n        '--radio-color': variant === 'outline' ? outlineColor : getThemeColor(color, theme),\n        '--radio-icon-size': getSize(size, 'radio-icon-size'),\n        '--radio-icon-color': iconColor\n          ? getThemeColor(iconColor, theme)\n          : getAutoContrastValue(autoContrast, theme)\n            ? getContrastColor({ color, theme, autoContrast })\n            : undefined,\n      },\n    };\n  }\n);\n\nexport const RadioIndicator = factory<RadioIndicatorFactory>((_props, ref) => {\n  const props = useProps('RadioIndicator', defaultProps, _props);\n  const {\n    classNames,\n    className,\n    style,\n    styles,\n    unstyled,\n    vars,\n    icon,\n    radius,\n    color,\n    iconColor,\n    autoContrast,\n    checked,\n    mod,\n    variant,\n    disabled,\n    ...others\n  } = props;\n  const Icon = icon!;\n\n  const getStyles = useStyles<RadioIndicatorFactory>({\n    name: 'RadioIndicator',\n    classes,\n    props,\n    className,\n    style,\n    classNames,\n    styles,\n    unstyled,\n    vars,\n    varsResolver,\n    rootSelector: 'indicator',\n  });\n\n  const ctx = useRadioCardContext();\n  const _checked = typeof checked === 'boolean' ? checked : ctx?.checked || false;\n\n  return (\n    <Box\n      ref={ref}\n      {...getStyles('indicator', { variant })}\n      variant={variant}\n      mod={[{ checked: _checked, disabled }, mod]}\n      {...others}\n    >\n      <Icon {...getStyles('icon')} />\n    </Box>\n  );\n});\n\nRadioIndicator.displayName = '@mantine/core/RadioIndicator';\nRadioIndicator.classes = classes;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAkBA,MAAMA,YAAY,GAAG;EACnBC,IAAI,EAAEC;AACR,CAAC;AACD,MAAMC,YAAY,GAAGC,kBAAkB,CACrC,CAACC,KAAK,EAAE;EAAEC,MAAM;EAAEC,KAAK;EAAEC,IAAI;EAAEC,SAAS;EAAEC,OAAO;EAAEC;AAAY,CAAE,KAAK;EACpE,MAAMC,WAAW,GAAGC,eAAe,CAAC;IAAEN,KAAK,EAAEA,KAAK,IAAIF,KAAK,CAACS,YAAY;IAAET;EAAK,CAAE,CAAC;EAClF,MAAMU,YAAY,GAAGH,WAAW,CAACI,YAAY,IAAIJ,WAAW,CAACK,KAAK,KAAK,KAAK,CAAC,GAAI,uBAAsBL,WAAW,CAACL,KAAM,WAAU,GAAGK,WAAW,CAACL,KAAK;EACvJ,OAAO;IACLW,SAAS,EAAE;MACT,cAAc,EAAEC,OAAO,CAACX,IAAI,EAAE,YAAY,CAAC;MAC3C,gBAAgB,EAAEF,MAAM,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGc,SAAS,CAACd,MAAM,CAAC;MAChE,eAAe,EAAEI,OAAO,KAAK,SAAS,GAAGK,YAAY,GAAGM,aAAa,CAACd,KAAK,EAAEF,KAAK,CAAC;MACnF,mBAAmB,EAAEc,OAAO,CAACX,IAAI,EAAE,iBAAiB,CAAC;MACrD,oBAAoB,EAAEC,SAAS,GAAGY,aAAa,CAACZ,SAAS,EAAEJ,KAAK,CAAC,GAAGiB,oBAAoB,CAACX,YAAY,EAAEN,KAAK,CAAC,GAAGkB,gBAAgB,CAAC;QAAEhB,KAAK;QAAEF,KAAK;QAAEM;MAAc,EAAC,GAAG,KAAK;IAChL;EACK;AACL,CACA,CAAC;AACW,MAACa,cAAc,GAAGC,OAAO,CAAC,CAACC,MAAM,EAAEC,GAAG,KAAK;EACrD,MAAMC,KAAK,GAAGC,QAAQ,CAAC,gBAAgB,EAAE7B,YAAY,EAAE0B,MAAM,CAAC;EAC9D,MAAM;IACJI,UAAU;IACVC,SAAS;IACTC,KAAK;IACLC,MAAM;IACNC,QAAQ;IACRC,IAAI;IACJlC,IAAI;IACJK,MAAM;IACNC,KAAK;IACLE,SAAS;IACTE,YAAY;IACZyB,OAAO;IACPC,GAAG;IACH3B,OAAO;IACP4B,QAAQ;IACR,GAAGC;EACP,CAAG,GAAGX,KAAK;EACT,MAAMY,IAAI,GAAGvC,IAAI;EACjB,MAAMwC,SAAS,GAAGC,SAAS,CAAC;IAC1BC,IAAI,EAAE,gBAAgB;IACtBC,OAAO;IACPhB,KAAK;IACLG,SAAS;IACTC,KAAK;IACLF,UAAU;IACVG,MAAM;IACNC,QAAQ;IACRC,IAAI;IACJhC,YAAY;IACZ0C,YAAY,EAAE;EAClB,CAAG,CAAC;EACF,MAAMC,GAAG,GAAGC,mBAAmB,CAAE;EACjC,MAAMC,QAAQ,GAAG,OAAOZ,OAAO,KAAK,SAAS,GAAGA,OAAO,GAAGU,GAAG,EAAEV,OAAO,IAAI,KAAK;EAC/E,sBAAuBa,GAAG,CACxBC,GAAG,EACH;IACEvB,GAAG;IACH,GAAGc,SAAS,CAAC,WAAW,EAAE;MAAE/B;IAAO,CAAE,CAAC;IACtCA,OAAO;IACP2B,GAAG,EAAE,CAAC;MAAED,OAAO,EAAEY,QAAQ;MAAEV;IAAQ,CAAE,EAAED,GAAG,CAAC;IAC3C,GAAGE,MAAM;IACTY,QAAQ,iBAAkBF,GAAG,CAACT,IAAI,EAAE;MAAE,GAAGC,SAAS,CAAC,MAAM;IAAG;EAClE,CACG;AACH,CAAC;AACDjB,cAAc,CAAC4B,WAAW,GAAG,8BAA8B;AAC3D5B,cAAc,CAACoB,OAAO,GAAGA,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}