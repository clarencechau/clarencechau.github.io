{"ast":null,"code":"'use client';\n\nimport { jsxs, jsx } from 'react/jsx-runtime';\nimport 'react';\nimport '@mantine/hooks';\nimport { createVarsResolver } from '../../core/styles-api/create-vars-resolver/create-vars-resolver.mjs';\nimport 'clsx';\nimport '../../core/MantineProvider/Mantine.context.mjs';\nimport '../../core/MantineProvider/default-theme.mjs';\nimport '../../core/MantineProvider/MantineProvider.mjs';\nimport '../../core/MantineProvider/MantineThemeProvider/MantineThemeProvider.mjs';\nimport { useProps } from '../../core/MantineProvider/use-props/use-props.mjs';\nimport '../../core/MantineProvider/MantineCssVariables/MantineCssVariables.mjs';\nimport { useStyles } from '../../core/styles-api/use-styles/use-styles.mjs';\nimport { useRandomClassName } from '../../core/Box/use-random-classname/use-random-classname.mjs';\nimport { Box } from '../../core/Box/Box.mjs';\nimport { factory } from '../../core/factory/factory.mjs';\nimport '../../core/DirectionProvider/DirectionProvider.mjs';\nimport { GridProvider } from './Grid.context.mjs';\nimport { GridCol } from './GridCol/GridCol.mjs';\nimport { GridVariables } from './GridVariables.mjs';\nimport classes from './Grid.module.css.mjs';\nconst defaultProps = {\n  gutter: \"md\",\n  grow: false,\n  columns: 12\n};\nconst varsResolver = createVarsResolver((_, {\n  justify,\n  align,\n  overflow\n}) => ({\n  root: {\n    \"--grid-justify\": justify,\n    \"--grid-align\": align,\n    \"--grid-overflow\": overflow\n  }\n}));\nconst Grid = factory((_props, ref) => {\n  const props = useProps(\"Grid\", defaultProps, _props);\n  const {\n    classNames,\n    className,\n    style,\n    styles,\n    unstyled,\n    vars,\n    grow,\n    gutter,\n    columns,\n    align,\n    justify,\n    children,\n    breakpoints,\n    type,\n    ...others\n  } = props;\n  const getStyles = useStyles({\n    name: \"Grid\",\n    classes,\n    props,\n    className,\n    style,\n    classNames,\n    styles,\n    unstyled,\n    vars,\n    varsResolver\n  });\n  const responsiveClassName = useRandomClassName();\n  if (type === \"container\" && breakpoints) {\n    return /* @__PURE__ */jsxs(GridProvider, {\n      value: {\n        getStyles,\n        grow,\n        columns: columns || 12,\n        breakpoints,\n        type\n      },\n      children: [/* @__PURE__ */jsx(GridVariables, {\n        selector: `.${responsiveClassName}`,\n        ...props\n      }), /* @__PURE__ */jsx(\"div\", {\n        ...getStyles(\"container\"),\n        children: /* @__PURE__ */jsx(Box, {\n          ref,\n          ...getStyles(\"root\", {\n            className: responsiveClassName\n          }),\n          ...others,\n          children: /* @__PURE__ */jsx(\"div\", {\n            ...getStyles(\"inner\"),\n            children\n          })\n        })\n      })]\n    });\n  }\n  return /* @__PURE__ */jsxs(GridProvider, {\n    value: {\n      getStyles,\n      grow,\n      columns: columns || 12,\n      breakpoints,\n      type\n    },\n    children: [/* @__PURE__ */jsx(GridVariables, {\n      selector: `.${responsiveClassName}`,\n      ...props\n    }), /* @__PURE__ */jsx(Box, {\n      ref,\n      ...getStyles(\"root\", {\n        className: responsiveClassName\n      }),\n      ...others,\n      children: /* @__PURE__ */jsx(\"div\", {\n        ...getStyles(\"inner\"),\n        children\n      })\n    })]\n  });\n});\nGrid.classes = classes;\nGrid.displayName = \"@mantine/core/Grid\";\nGrid.Col = GridCol;\nexport { Grid };","map":{"version":3,"names":["defaultProps","gutter","grow","columns","varsResolver","createVarsResolver","_","justify","align","overflow","root","Grid","factory","_props","ref","props","useProps","classNames","className","style","styles","unstyled","vars","children","breakpoints","type","others","getStyles","useStyles","name","classes","responsiveClassName","useRandomClassName","jsxs","GridProvider","value","jsx","GridVariables","selector","Box","displayName","Col","GridCol"],"sources":["/Users/clarencechau/Documents/projects/personal-website/clarencechau.github.io/node_modules/@mantine/core/src/components/Grid/Grid.tsx"],"sourcesContent":["import {\n  Box,\n  BoxProps,\n  createVarsResolver,\n  ElementProps,\n  factory,\n  Factory,\n  MantineSpacing,\n  StyleProp,\n  StylesApiProps,\n  useProps,\n  useRandomClassName,\n  useStyles,\n} from '../../core';\nimport { GridBreakpoints, GridProvider } from './Grid.context';\nimport { GridCol } from './GridCol/GridCol';\nimport { GridVariables } from './GridVariables';\nimport classes from './Grid.module.css';\n\nexport type GridStylesNames = 'root' | 'col' | 'inner' | 'container';\nexport type GridCssVariables = {\n  root: '--grid-justify' | '--grid-align' | '--grid-overflow';\n};\n\nexport interface GridProps extends BoxProps, StylesApiProps<GridFactory>, ElementProps<'div'> {\n  /** Gutter between columns, key of `theme.spacing` or any valid CSS value, `'md'` by default */\n  gutter?: StyleProp<MantineSpacing>;\n\n  /** Determines whether columns in the last row should expand to fill all available space, `false` by default */\n  grow?: boolean;\n\n  /** Sets `justify-content`, `flex-start` by default */\n  justify?: React.CSSProperties['justifyContent'];\n\n  /** Sets `align-items`, `stretch` by default */\n  align?: React.CSSProperties['alignItems'];\n\n  /** Number of columns in each row, `12` by default */\n  columns?: number;\n\n  /** Sets `overflow` CSS property on the root element, `'visible'` by default */\n  overflow?: React.CSSProperties['overflow'];\n\n  /** Determines typeof of queries that are used for responsive styles, `'media'` by default */\n  type?: 'media' | 'container';\n\n  /** Breakpoints values, only applicable when `type=\"container\"` is set, ignored when `type` is not set or `type=\"media\"` is set. */\n  breakpoints?: GridBreakpoints;\n}\n\nexport type GridFactory = Factory<{\n  props: GridProps;\n  ref: HTMLDivElement;\n  stylesNames: GridStylesNames;\n  vars: GridCssVariables;\n  staticComponents: {\n    Col: typeof GridCol;\n  };\n}>;\n\nconst defaultProps: Partial<GridProps> = {\n  gutter: 'md',\n  grow: false,\n  columns: 12,\n};\n\nconst varsResolver = createVarsResolver<GridFactory>((_, { justify, align, overflow }) => ({\n  root: {\n    '--grid-justify': justify,\n    '--grid-align': align,\n    '--grid-overflow': overflow,\n  },\n}));\n\nexport const Grid = factory<GridFactory>((_props, ref) => {\n  const props = useProps('Grid', defaultProps, _props);\n  const {\n    classNames,\n    className,\n    style,\n    styles,\n    unstyled,\n    vars,\n    grow,\n    gutter,\n    columns,\n    align,\n    justify,\n    children,\n    breakpoints,\n    type,\n    ...others\n  } = props;\n\n  const getStyles = useStyles<GridFactory>({\n    name: 'Grid',\n    classes,\n    props,\n    className,\n    style,\n    classNames,\n    styles,\n    unstyled,\n    vars,\n    varsResolver,\n  });\n\n  const responsiveClassName = useRandomClassName();\n\n  if (type === 'container' && breakpoints) {\n    return (\n      <GridProvider value={{ getStyles, grow, columns: columns || 12, breakpoints, type }}>\n        <GridVariables selector={`.${responsiveClassName}`} {...props} />\n        <div {...getStyles('container')}>\n          <Box ref={ref} {...getStyles('root', { className: responsiveClassName })} {...others}>\n            <div {...getStyles('inner')}>{children}</div>\n          </Box>\n        </div>\n      </GridProvider>\n    );\n  }\n\n  return (\n    <GridProvider value={{ getStyles, grow, columns: columns || 12, breakpoints, type }}>\n      <GridVariables selector={`.${responsiveClassName}`} {...props} />\n      <Box ref={ref} {...getStyles('root', { className: responsiveClassName })} {...others}>\n        <div {...getStyles('inner')}>{children}</div>\n      </Box>\n    </GridProvider>\n  );\n});\n\nGrid.classes = classes;\nGrid.displayName = '@mantine/core/Grid';\nGrid.Col = GridCol;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}