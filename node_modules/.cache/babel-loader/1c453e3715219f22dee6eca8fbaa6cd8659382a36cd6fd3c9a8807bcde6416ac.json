{"ast":null,"code":"'use client';\n\nimport { jsx } from 'react/jsx-runtime';\nimport { forwardRef, useRef, useState } from 'react';\nimport '@mantine/hooks';\nimport 'clsx';\nimport '../../../core/MantineProvider/Mantine.context.mjs';\nimport '../../../core/MantineProvider/default-theme.mjs';\nimport '../../../core/MantineProvider/MantineProvider.mjs';\nimport '../../../core/MantineProvider/MantineThemeProvider/MantineThemeProvider.mjs';\nimport '../../../core/MantineProvider/MantineCssVariables/MantineCssVariables.mjs';\nimport '../../../core/Box/Box.mjs';\nimport { useDirection } from '../../../core/DirectionProvider/DirectionProvider.mjs';\nimport { useScrollAreaContext } from '../ScrollArea.context.mjs';\nimport { getThumbRatio } from '../utils/get-thumb-ratio.mjs';\nimport { getThumbOffsetFromScroll } from '../utils/get-thumb-offset-from-scroll.mjs';\nimport { getScrollPositionFromPointer } from '../utils/get-scroll-position-from-pointer.mjs';\nimport { ScrollAreaScrollbarX } from './ScrollbarX.mjs';\nimport { ScrollAreaScrollbarY } from './ScrollbarY.mjs';\nconst ScrollAreaScrollbarVisible = forwardRef((props, forwardedRef) => {\n  const {\n    orientation = \"vertical\",\n    ...scrollbarProps\n  } = props;\n  const {\n    dir\n  } = useDirection();\n  const context = useScrollAreaContext();\n  const thumbRef = useRef(null);\n  const pointerOffsetRef = useRef(0);\n  const [sizes, setSizes] = useState({\n    content: 0,\n    viewport: 0,\n    scrollbar: {\n      size: 0,\n      paddingStart: 0,\n      paddingEnd: 0\n    }\n  });\n  const thumbRatio = getThumbRatio(sizes.viewport, sizes.content);\n  const commonProps = {\n    ...scrollbarProps,\n    sizes,\n    onSizesChange: setSizes,\n    hasThumb: Boolean(thumbRatio > 0 && thumbRatio < 1),\n    onThumbChange: thumb => {\n      thumbRef.current = thumb;\n    },\n    onThumbPointerUp: () => {\n      pointerOffsetRef.current = 0;\n    },\n    onThumbPointerDown: pointerPos => {\n      pointerOffsetRef.current = pointerPos;\n    }\n  };\n  const getScrollPosition = (pointerPos, direction) => getScrollPositionFromPointer(pointerPos, pointerOffsetRef.current, sizes, direction);\n  if (orientation === \"horizontal\") {\n    return /* @__PURE__ */jsx(ScrollAreaScrollbarX, {\n      ...commonProps,\n      ref: forwardedRef,\n      onThumbPositionChange: () => {\n        if (context.viewport && thumbRef.current) {\n          const scrollPos = context.viewport.scrollLeft;\n          const offset = getThumbOffsetFromScroll(scrollPos, sizes, dir);\n          thumbRef.current.style.transform = `translate3d(${offset}px, 0, 0)`;\n        }\n      },\n      onWheelScroll: scrollPos => {\n        if (context.viewport) {\n          context.viewport.scrollLeft = scrollPos;\n        }\n      },\n      onDragScroll: pointerPos => {\n        if (context.viewport) {\n          context.viewport.scrollLeft = getScrollPosition(pointerPos, dir);\n        }\n      }\n    });\n  }\n  if (orientation === \"vertical\") {\n    return /* @__PURE__ */jsx(ScrollAreaScrollbarY, {\n      ...commonProps,\n      ref: forwardedRef,\n      onThumbPositionChange: () => {\n        if (context.viewport && thumbRef.current) {\n          const scrollPos = context.viewport.scrollTop;\n          const offset = getThumbOffsetFromScroll(scrollPos, sizes);\n          if (sizes.scrollbar.size === 0) {\n            thumbRef.current.style.opacity = \"0\";\n          } else {\n            thumbRef.current.style.opacity = \"1\";\n          }\n          thumbRef.current.style.transform = `translate3d(0, ${offset}px, 0)`;\n        }\n      },\n      onWheelScroll: scrollPos => {\n        if (context.viewport) {\n          context.viewport.scrollTop = scrollPos;\n        }\n      },\n      onDragScroll: pointerPos => {\n        if (context.viewport) {\n          context.viewport.scrollTop = getScrollPosition(pointerPos);\n        }\n      }\n    });\n  }\n  return null;\n});\nScrollAreaScrollbarVisible.displayName = \"@mantine/core/ScrollAreaScrollbarVisible\";\nexport { ScrollAreaScrollbarVisible };","map":{"version":3,"names":["ScrollAreaScrollbarVisible","forwardRef","props","forwardedRef","orientation","scrollbarProps","dir","useDirection","context","useScrollAreaContext","thumbRef","useRef","pointerOffsetRef","sizes","setSizes","useState","content","viewport","scrollbar","size","paddingStart","paddingEnd","thumbRatio","getThumbRatio","commonProps","onSizesChange","hasThumb","Boolean","onThumbChange","thumb","current","onThumbPointerUp","onThumbPointerDown","pointerPos","getScrollPosition","direction","getScrollPositionFromPointer","jsx","ScrollAreaScrollbarX","ref","onThumbPositionChange","scrollPos","scrollLeft","offset","getThumbOffsetFromScroll","style","transform","onWheelScroll","onDragScroll","ScrollAreaScrollbarY","scrollTop","opacity","displayName"],"sources":["/Users/clarencechau/Documents/projects/personal-website/clarencechau.github.io/node_modules/@mantine/core/src/components/ScrollArea/ScrollAreaScrollbar/ScrollAreaScrollbarVisible.tsx"],"sourcesContent":["import { forwardRef, useRef, useState } from 'react';\nimport { useDirection } from '../../../core';\nimport { useScrollAreaContext } from '../ScrollArea.context';\nimport {\n  ScrollAreaScrollbarAxisPrivateProps,\n  ScrollAreaScrollbarAxisProps,\n  Sizes,\n} from '../ScrollArea.types';\nimport { getScrollPositionFromPointer, getThumbOffsetFromScroll, getThumbRatio } from '../utils';\nimport { ScrollAreaScrollbarX } from './ScrollbarX';\nimport { ScrollAreaScrollbarY } from './ScrollbarY';\n\nexport interface ScrollAreaScrollbarVisibleProps\n  extends Omit<ScrollAreaScrollbarAxisProps, keyof ScrollAreaScrollbarAxisPrivateProps> {\n  orientation?: 'horizontal' | 'vertical';\n}\n\nexport const ScrollAreaScrollbarVisible = forwardRef<\n  HTMLDivElement,\n  ScrollAreaScrollbarVisibleProps\n>((props, forwardedRef) => {\n  const { orientation = 'vertical', ...scrollbarProps } = props;\n  const { dir } = useDirection();\n  const context = useScrollAreaContext();\n  const thumbRef = useRef<HTMLDivElement | null>(null);\n  const pointerOffsetRef = useRef(0);\n  const [sizes, setSizes] = useState<Sizes>({\n    content: 0,\n    viewport: 0,\n    scrollbar: { size: 0, paddingStart: 0, paddingEnd: 0 },\n  });\n\n  const thumbRatio = getThumbRatio(sizes.viewport, sizes.content);\n\n  const commonProps: Omit<\n    ScrollAreaScrollbarAxisPrivateProps,\n    'onThumbPositionChange' | 'onDragScroll' | 'onWheelScroll'\n  > = {\n    ...scrollbarProps,\n    sizes,\n    onSizesChange: setSizes,\n    hasThumb: Boolean(thumbRatio > 0 && thumbRatio < 1),\n    onThumbChange: (thumb) => {\n      thumbRef.current = thumb;\n    },\n    onThumbPointerUp: () => {\n      pointerOffsetRef.current = 0;\n    },\n    onThumbPointerDown: (pointerPos) => {\n      pointerOffsetRef.current = pointerPos;\n    },\n  };\n\n  const getScrollPosition = (pointerPos: number, direction?: 'ltr' | 'rtl') =>\n    getScrollPositionFromPointer(pointerPos, pointerOffsetRef.current, sizes, direction);\n\n  if (orientation === 'horizontal') {\n    return (\n      <ScrollAreaScrollbarX\n        {...commonProps}\n        ref={forwardedRef}\n        onThumbPositionChange={() => {\n          if (context.viewport && thumbRef.current) {\n            const scrollPos = context.viewport.scrollLeft;\n            const offset = getThumbOffsetFromScroll(scrollPos, sizes, dir);\n            thumbRef.current.style.transform = `translate3d(${offset}px, 0, 0)`;\n          }\n        }}\n        onWheelScroll={(scrollPos) => {\n          if (context.viewport) {\n            context.viewport.scrollLeft = scrollPos;\n          }\n        }}\n        onDragScroll={(pointerPos) => {\n          if (context.viewport) {\n            context.viewport.scrollLeft = getScrollPosition(pointerPos, dir);\n          }\n        }}\n      />\n    );\n  }\n\n  if (orientation === 'vertical') {\n    return (\n      <ScrollAreaScrollbarY\n        {...commonProps}\n        ref={forwardedRef}\n        onThumbPositionChange={() => {\n          if (context.viewport && thumbRef.current) {\n            const scrollPos = context.viewport.scrollTop;\n            const offset = getThumbOffsetFromScroll(scrollPos, sizes);\n            if (sizes.scrollbar.size === 0) {\n              thumbRef.current.style.opacity = '0';\n            } else {\n              thumbRef.current.style.opacity = '1';\n            }\n            thumbRef.current.style.transform = `translate3d(0, ${offset}px, 0)`;\n          }\n        }}\n        onWheelScroll={(scrollPos) => {\n          if (context.viewport) {\n            context.viewport.scrollTop = scrollPos;\n          }\n        }}\n        onDragScroll={(pointerPos) => {\n          if (context.viewport) {\n            context.viewport.scrollTop = getScrollPosition(pointerPos);\n          }\n        }}\n      />\n    );\n  }\n\n  return null;\n});\n\nScrollAreaScrollbarVisible.displayName = '@mantine/core/ScrollAreaScrollbarVisible';\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}