{"ast":null,"code":"'use client';\n\nimport { jsxs, jsx } from 'react/jsx-runtime';\nimport { useState, useCallback, useEffect, Children, createElement } from 'react';\nimport useEmblaCarousel from 'embla-carousel-react';\nimport { createVarsResolver, rem, getSpacing, factory, useProps, useStyles, useRandomClassName, useDirection, UnstyledButton, Box, AccordionChevron } from '@mantine/core';\nimport { clamp } from '@mantine/hooks';\nimport { CarouselProvider } from './Carousel.context.mjs';\nimport { CarouselSlide } from './CarouselSlide/CarouselSlide.mjs';\nimport { CarouselVariables } from './CarouselVariables/CarouselVariables.mjs';\nimport { getChevronRotation } from './get-chevron-rotation.mjs';\nimport classes from './Carousel.module.css.mjs';\nconst defaultProps = {\n  controlSize: 26,\n  controlsOffset: \"sm\",\n  slideSize: \"100%\",\n  slideGap: 0,\n  orientation: \"horizontal\",\n  align: \"center\",\n  slidesToScroll: 1,\n  includeGapInSize: true,\n  draggable: true,\n  dragFree: false,\n  loop: false,\n  speed: 10,\n  initialSlide: 0,\n  inViewThreshold: 0,\n  withControls: true,\n  withIndicators: false,\n  skipSnaps: false,\n  containScroll: \"\",\n  withKeyboardEvents: true\n};\nconst varsResolver = createVarsResolver((_, {\n  height,\n  controlSize,\n  controlsOffset\n}) => ({\n  root: {\n    \"--carousel-height\": rem(height),\n    \"--carousel-control-size\": rem(controlSize),\n    \"--carousel-controls-offset\": getSpacing(controlsOffset)\n  }\n}));\nconst Carousel = factory((_props, ref) => {\n  const props = useProps(\"Carousel\", defaultProps, _props);\n  const {\n    classNames,\n    className,\n    style,\n    styles,\n    unstyled,\n    vars,\n    children,\n    getEmblaApi,\n    onNextSlide,\n    onPreviousSlide,\n    onSlideChange,\n    nextControlProps,\n    previousControlProps,\n    controlSize,\n    controlsOffset,\n    slideSize,\n    slideGap,\n    orientation,\n    height,\n    align,\n    slidesToScroll,\n    includeGapInSize,\n    draggable,\n    dragFree,\n    loop,\n    speed,\n    initialSlide,\n    inViewThreshold,\n    withControls,\n    withIndicators,\n    plugins,\n    nextControlIcon,\n    previousControlIcon,\n    skipSnaps,\n    containScroll,\n    withKeyboardEvents,\n    mod,\n    ...others\n  } = props;\n  const getStyles = useStyles({\n    name: \"Carousel\",\n    classes,\n    props,\n    className,\n    style,\n    classNames,\n    styles,\n    unstyled,\n    vars,\n    varsResolver\n  });\n  const responsiveClassName = useRandomClassName();\n  const {\n    dir\n  } = useDirection();\n  const [emblaRefElement, embla] = useEmblaCarousel({\n    axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n    direction: orientation === \"horizontal\" ? dir : void 0,\n    startIndex: initialSlide,\n    loop,\n    align,\n    slidesToScroll,\n    draggable,\n    dragFree,\n    speed,\n    inViewThreshold,\n    skipSnaps,\n    containScroll\n  }, plugins);\n  const [selected, setSelected] = useState(0);\n  const [slidesCount, setSlidesCount] = useState(0);\n  const handleScroll = useCallback(index => embla && embla.scrollTo(index), [embla]);\n  const handleSelect = useCallback(() => {\n    if (!embla) {\n      return;\n    }\n    const slide = embla.selectedScrollSnap();\n    setSelected(slide);\n    slide !== selected && onSlideChange?.(slide);\n  }, [embla, setSelected, onSlideChange, selected]);\n  const handlePrevious = useCallback(() => {\n    embla?.scrollPrev();\n    onPreviousSlide?.();\n  }, [embla]);\n  const handleNext = useCallback(() => {\n    embla?.scrollNext();\n    onNextSlide?.();\n  }, [embla]);\n  const handleKeydown = useCallback(event => {\n    if (withKeyboardEvents) {\n      if (event.key === \"ArrowRight\") {\n        event.preventDefault();\n        handleNext();\n      }\n      if (event.key === \"ArrowLeft\") {\n        event.preventDefault();\n        handlePrevious();\n      }\n    }\n  }, [embla]);\n  useEffect(() => {\n    if (embla) {\n      getEmblaApi?.(embla);\n      handleSelect();\n      setSlidesCount(embla.scrollSnapList().length);\n      embla.on(\"select\", handleSelect);\n      return () => {\n        embla.off(\"select\", handleSelect);\n      };\n    }\n    return void 0;\n  }, [embla, slidesToScroll, handleSelect]);\n  useEffect(() => {\n    if (embla) {\n      embla.reInit();\n      setSlidesCount(embla.scrollSnapList().length);\n      setSelected(currentSelected => clamp(currentSelected, 0, Children.toArray(children).length - 1));\n    }\n  }, [Children.toArray(children).length, slidesToScroll]);\n  const canScrollPrev = embla?.canScrollPrev() || false;\n  const canScrollNext = embla?.canScrollNext() || false;\n  const indicators = Array(slidesCount).fill(0).map((_, index) => /* @__PURE__ */createElement(UnstyledButton, {\n    ...getStyles(\"indicator\"),\n    key: index,\n    \"data-active\": index === selected || void 0,\n    \"aria-hidden\": true,\n    tabIndex: -1,\n    onClick: () => handleScroll(index),\n    \"data-orientation\": orientation\n  }));\n  return /* @__PURE__ */jsxs(CarouselProvider, {\n    value: {\n      getStyles,\n      orientation\n    },\n    children: [/* @__PURE__ */jsx(CarouselVariables, {\n      ...props,\n      selector: `.${responsiveClassName}`\n    }), /* @__PURE__ */jsxs(Box, {\n      ref,\n      ...getStyles(\"root\", {\n        className: responsiveClassName\n      }),\n      ...others,\n      mod: [{\n        orientation,\n        \"include-gap-in-size\": includeGapInSize\n      }, mod],\n      onKeyDownCapture: handleKeydown,\n      children: [/* @__PURE__ */jsx(\"div\", {\n        ...getStyles(\"viewport\"),\n        ref: emblaRefElement,\n        children: /* @__PURE__ */jsx(\"div\", {\n          ...getStyles(\"container\"),\n          \"data-orientation\": orientation,\n          children\n        })\n      }), withIndicators && /* @__PURE__ */jsx(\"div\", {\n        ...getStyles(\"indicators\"),\n        \"data-orientation\": orientation,\n        children: indicators\n      }), withControls && /* @__PURE__ */jsxs(\"div\", {\n        ...getStyles(\"controls\"),\n        \"data-orientation\": orientation,\n        children: [/* @__PURE__ */jsx(UnstyledButton, {\n          ...previousControlProps,\n          ...getStyles(\"control\", {\n            className: previousControlProps?.className,\n            style: previousControlProps?.style\n          }),\n          onClick: event => {\n            handlePrevious();\n            previousControlProps?.onClick?.(event);\n          },\n          \"data-inactive\": !canScrollPrev || void 0,\n          tabIndex: canScrollPrev ? 0 : -1,\n          children: typeof previousControlIcon !== \"undefined\" ? previousControlIcon : /* @__PURE__ */jsx(AccordionChevron, {\n            style: {\n              transform: `rotate(${getChevronRotation({\n                dir,\n                orientation,\n                direction: \"previous\"\n              })}deg)`\n            }\n          })\n        }), /* @__PURE__ */jsx(UnstyledButton, {\n          ...getStyles(\"control\", {\n            className: nextControlProps?.className,\n            style: nextControlProps?.style\n          }),\n          ...nextControlProps,\n          onClick: event => {\n            handleNext();\n            nextControlProps?.onClick?.(event);\n          },\n          \"data-inactive\": !canScrollNext || void 0,\n          tabIndex: canScrollNext ? 0 : -1,\n          children: typeof nextControlIcon !== \"undefined\" ? nextControlIcon : /* @__PURE__ */jsx(AccordionChevron, {\n            style: {\n              transform: `rotate(${getChevronRotation({\n                dir,\n                orientation,\n                direction: \"next\"\n              })}deg)`\n            }\n          })\n        })]\n      })]\n    })]\n  });\n});\nCarousel.classes = classes;\nCarousel.displayName = \"@mantine/carousel/Carousel\";\nCarousel.Slide = CarouselSlide;\nexport { Carousel };","map":{"version":3,"names":["defaultProps","controlSize","controlsOffset","slideSize","slideGap","orientation","align","slidesToScroll","includeGapInSize","draggable","dragFree","loop","speed","initialSlide","inViewThreshold","withControls","withIndicators","skipSnaps","containScroll","withKeyboardEvents","varsResolver","createVarsResolver","_","height","root","rem","getSpacing","Carousel","factory","_props","ref","props","useProps","classNames","className","style","styles","unstyled","vars","children","getEmblaApi","onNextSlide","onPreviousSlide","onSlideChange","nextControlProps","previousControlProps","plugins","nextControlIcon","previousControlIcon","mod","others","getStyles","useStyles","name","classes","responsiveClassName","useRandomClassName","dir","useDirection","emblaRefElement","embla","useEmblaCarousel","axis","direction","startIndex","selected","setSelected","useState","slidesCount","setSlidesCount","handleScroll","useCallback","index","scrollTo","handleSelect","slide","selectedScrollSnap","handlePrevious","scrollPrev","handleNext","scrollNext","handleKeydown","event","key","preventDefault","useEffect","scrollSnapList","length","on","off","reInit","currentSelected","clamp","Children","toArray","canScrollPrev","canScrollNext","indicators","Array","fill","map","createElement","UnstyledButton","tabIndex","onClick","jsxs","CarouselProvider","value","jsx","CarouselVariables","selector","Box","onKeyDownCapture","AccordionChevron","transform","getChevronRotation","displayName","Slide","CarouselSlide"],"sources":["/Users/clarencechau/Documents/projects/personal-website/clarencechau.github.io/node_modules/@mantine/carousel/src/Carousel.tsx"],"sourcesContent":["import { Children, useCallback, useEffect, useState } from 'react';\nimport useEmblaCarousel, { EmblaCarouselType, EmblaPluginType } from 'embla-carousel-react';\nimport {\n  AccordionChevron,\n  Box,\n  BoxProps,\n  createVarsResolver,\n  ElementProps,\n  factory,\n  Factory,\n  getSpacing,\n  MantineSpacing,\n  rem,\n  StyleProp,\n  StylesApiProps,\n  UnstyledButton,\n  useDirection,\n  useProps,\n  useRandomClassName,\n  useStyles,\n} from '@mantine/core';\nimport { clamp } from '@mantine/hooks';\nimport { CarouselProvider } from './Carousel.context';\nimport { CarouselSlide } from './CarouselSlide/CarouselSlide';\nimport { CarouselVariables } from './CarouselVariables/CarouselVariables';\nimport { getChevronRotation } from './get-chevron-rotation';\nimport classes from './Carousel.module.css';\n\nexport type CarouselStylesNames =\n  | 'slide'\n  | 'root'\n  | 'viewport'\n  | 'container'\n  | 'controls'\n  | 'control'\n  | 'indicators'\n  | 'indicator';\n\nexport type CarouselCssVariables = {\n  root: '--carousel-height' | '--carousel-control-size' | '--carousel-controls-offset';\n};\n\nexport interface CarouselProps\n  extends BoxProps,\n    StylesApiProps<CarouselFactory>,\n    ElementProps<'div'> {\n  /** <Carousel.Slide /> components */\n  children?: React.ReactNode;\n\n  /** Called when next slide is shown */\n  onNextSlide?: () => void;\n\n  /** Called when previous slider is shown */\n  onPreviousSlide?: () => void;\n\n  /** Called with slide index when slide changes */\n  onSlideChange?: (index: number) => void;\n\n  /** Get embla API as ref */\n  getEmblaApi?: (embla: EmblaCarouselType) => void;\n\n  /** Props passed down to next control */\n  nextControlProps?: React.ComponentPropsWithoutRef<'button'>;\n\n  /** Props passed down to previous control */\n  previousControlProps?: React.ComponentPropsWithoutRef<'button'>;\n\n  /** Controls size of the next and previous controls, `26` by default */\n  controlSize?: React.CSSProperties['width'];\n\n  /** Controls position of the next and previous controls, key of `theme.spacing` or any valid CSS value, `'sm'` by default */\n  controlsOffset?: MantineSpacing;\n\n  /** Controls slide width based on viewport width, `'100%'` by default */\n  slideSize?: StyleProp<string | number>;\n\n  /** Key of theme.spacing or number to set gap between slides */\n  slideGap?: StyleProp<MantineSpacing>;\n\n  /** Carousel orientation, `'horizontal'` by default */\n  orientation?: 'horizontal' | 'vertical';\n\n  /** Slides container `height`, required for vertical orientation */\n  height?: React.CSSProperties['height'];\n\n  /** Determines how slides will be aligned relative to the container. Use number between 0-1 to align slides based on percentage, where 0.5 is 50%, `'center'` by default */\n  align?: 'start' | 'center' | 'end' | number;\n\n  /** Number of slides that will be scrolled with next/previous buttons, `1` by default */\n  slidesToScroll?: number | 'auto';\n\n  /** Determines whether gap between slides should be treated as part of the slide size, `true` by default */\n  includeGapInSize?: boolean;\n\n  /** Determines whether the carousel can be scrolled with mouse and touch interactions, `true` by default */\n  draggable?: boolean;\n\n  /** Determines whether momentum scrolling should be enabled, `false` by default */\n  dragFree?: boolean;\n\n  /** Enables infinite looping. `true` by default, automatically falls back to `false` if slide content isn't enough to loop. */\n  loop?: boolean;\n\n  /** Adjusts scroll speed when triggered by any of the methods. Higher numbers enables faster scrolling. */\n  speed?: number;\n\n  /** Index of initial slide */\n  initialSlide?: number;\n\n  /** Choose a fraction representing the percentage portion of a slide that needs to be visible in order to be considered in view. For example, 0.5 equals 50%. */\n  inViewThreshold?: number;\n\n  /** Determines whether next/previous controls should be displayed, true by default */\n  withControls?: boolean;\n\n  /** Determines whether indicators should be displayed, `false` by default */\n  withIndicators?: boolean;\n\n  /** An array of embla plugins */\n  plugins?: EmblaPluginType[];\n\n  /** Icon of the next control */\n  nextControlIcon?: React.ReactNode;\n\n  /** Icon of the previous control */\n  previousControlIcon?: React.ReactNode;\n\n  /** Allow the carousel to skip scroll snaps if it is dragged vigorously. Note that this option will be ignored if the dragFree option is set to `true`, `false` by default */\n  skipSnaps?: boolean;\n\n  /** Clear leading and trailing empty space that causes excessive scrolling. Use `trimSnaps` to only use snap points that trigger scrolling or keepSnaps to keep them. */\n  containScroll?: 'trimSnaps' | 'keepSnaps' | '';\n\n  /** Determines whether arrow key should switch slides, `true` by default */\n  withKeyboardEvents?: boolean;\n}\n\nexport type CarouselFactory = Factory<{\n  props: CarouselProps;\n  ref: HTMLDivElement;\n  stylesNames: CarouselStylesNames;\n  vars: CarouselCssVariables;\n  staticComponents: {\n    Slide: typeof CarouselSlide;\n  };\n}>;\n\nconst defaultProps: Partial<CarouselProps> = {\n  controlSize: 26,\n  controlsOffset: 'sm',\n  slideSize: '100%',\n  slideGap: 0,\n  orientation: 'horizontal',\n  align: 'center',\n  slidesToScroll: 1,\n  includeGapInSize: true,\n  draggable: true,\n  dragFree: false,\n  loop: false,\n  speed: 10,\n  initialSlide: 0,\n  inViewThreshold: 0,\n  withControls: true,\n  withIndicators: false,\n  skipSnaps: false,\n  containScroll: '',\n  withKeyboardEvents: true,\n};\n\nconst varsResolver = createVarsResolver<CarouselFactory>(\n  (_, { height, controlSize, controlsOffset }) => ({\n    root: {\n      '--carousel-height': rem(height),\n      '--carousel-control-size': rem(controlSize),\n      '--carousel-controls-offset': getSpacing(controlsOffset),\n    },\n  })\n);\n\nexport const Carousel = factory<CarouselFactory>((_props, ref) => {\n  const props = useProps('Carousel', defaultProps, _props);\n  const {\n    classNames,\n    className,\n    style,\n    styles,\n    unstyled,\n    vars,\n    children,\n    getEmblaApi,\n    onNextSlide,\n    onPreviousSlide,\n    onSlideChange,\n    nextControlProps,\n    previousControlProps,\n    controlSize,\n    controlsOffset,\n    slideSize,\n    slideGap,\n    orientation,\n    height,\n    align,\n    slidesToScroll,\n    includeGapInSize,\n    draggable,\n    dragFree,\n    loop,\n    speed,\n    initialSlide,\n    inViewThreshold,\n    withControls,\n    withIndicators,\n    plugins,\n    nextControlIcon,\n    previousControlIcon,\n    skipSnaps,\n    containScroll,\n    withKeyboardEvents,\n    mod,\n    ...others\n  } = props;\n\n  const getStyles = useStyles<CarouselFactory>({\n    name: 'Carousel',\n    classes,\n    props,\n    className,\n    style,\n    classNames,\n    styles,\n    unstyled,\n    vars,\n    varsResolver,\n  });\n\n  const responsiveClassName = useRandomClassName();\n  const { dir } = useDirection();\n\n  const [emblaRefElement, embla] = useEmblaCarousel(\n    {\n      axis: orientation === 'horizontal' ? 'x' : 'y',\n      direction: orientation === 'horizontal' ? dir : undefined,\n      startIndex: initialSlide,\n      loop,\n      align,\n      slidesToScroll,\n      draggable,\n      dragFree,\n      speed,\n      inViewThreshold,\n      skipSnaps,\n      containScroll,\n    },\n    plugins\n  );\n\n  const [selected, setSelected] = useState(0);\n  const [slidesCount, setSlidesCount] = useState(0);\n\n  const handleScroll = useCallback((index: number) => embla && embla.scrollTo(index), [embla]);\n\n  const handleSelect = useCallback(() => {\n    if (!embla) {\n      return;\n    }\n    const slide = embla.selectedScrollSnap();\n    setSelected(slide);\n    slide !== selected && onSlideChange?.(slide);\n  }, [embla, setSelected, onSlideChange, selected]);\n\n  const handlePrevious = useCallback(() => {\n    embla?.scrollPrev();\n    onPreviousSlide?.();\n  }, [embla]);\n\n  const handleNext = useCallback(() => {\n    embla?.scrollNext();\n    onNextSlide?.();\n  }, [embla]);\n\n  const handleKeydown = useCallback(\n    (event: React.KeyboardEvent<HTMLDivElement>) => {\n      if (withKeyboardEvents) {\n        if (event.key === 'ArrowRight') {\n          event.preventDefault();\n          handleNext();\n        }\n\n        if (event.key === 'ArrowLeft') {\n          event.preventDefault();\n          handlePrevious();\n        }\n      }\n    },\n    [embla]\n  );\n\n  useEffect(() => {\n    if (embla) {\n      getEmblaApi?.(embla);\n      handleSelect();\n      setSlidesCount(embla.scrollSnapList().length);\n      embla.on('select', handleSelect);\n\n      return () => {\n        embla.off('select', handleSelect);\n      };\n    }\n\n    return undefined;\n  }, [embla, slidesToScroll, handleSelect]);\n\n  useEffect(() => {\n    if (embla) {\n      embla.reInit();\n      setSlidesCount(embla.scrollSnapList().length);\n      setSelected((currentSelected) =>\n        clamp(currentSelected, 0, Children.toArray(children).length - 1)\n      );\n    }\n  }, [Children.toArray(children).length, slidesToScroll]);\n\n  const canScrollPrev = embla?.canScrollPrev() || false;\n  const canScrollNext = embla?.canScrollNext() || false;\n\n  const indicators = Array(slidesCount)\n    .fill(0)\n    .map((_, index) => (\n      <UnstyledButton\n        {...getStyles('indicator')}\n        key={index}\n        data-active={index === selected || undefined}\n        aria-hidden\n        tabIndex={-1}\n        onClick={() => handleScroll(index)}\n        data-orientation={orientation}\n      />\n    ));\n\n  return (\n    <CarouselProvider value={{ getStyles, orientation }}>\n      <CarouselVariables {...props} selector={`.${responsiveClassName}`} />\n      <Box\n        ref={ref}\n        {...getStyles('root', { className: responsiveClassName })}\n        {...others}\n        mod={[{ orientation, 'include-gap-in-size': includeGapInSize }, mod]}\n        onKeyDownCapture={handleKeydown}\n      >\n        <div {...getStyles('viewport')} ref={emblaRefElement}>\n          <div {...getStyles('container')} data-orientation={orientation}>\n            {children}\n          </div>\n        </div>\n\n        {withIndicators && (\n          <div {...getStyles('indicators')} data-orientation={orientation}>\n            {indicators}\n          </div>\n        )}\n\n        {withControls && (\n          <div {...getStyles('controls')} data-orientation={orientation}>\n            <UnstyledButton\n              {...previousControlProps}\n              {...getStyles('control', {\n                className: previousControlProps?.className,\n                style: previousControlProps?.style,\n              })}\n              onClick={(event) => {\n                handlePrevious();\n                previousControlProps?.onClick?.(event);\n              }}\n              data-inactive={!canScrollPrev || undefined}\n              tabIndex={canScrollPrev ? 0 : -1}\n            >\n              {typeof previousControlIcon !== 'undefined' ? (\n                previousControlIcon\n              ) : (\n                <AccordionChevron\n                  style={{\n                    transform: `rotate(${getChevronRotation({\n                      dir,\n                      orientation,\n                      direction: 'previous',\n                    })}deg)`,\n                  }}\n                />\n              )}\n            </UnstyledButton>\n\n            <UnstyledButton\n              {...getStyles('control', {\n                className: nextControlProps?.className,\n                style: nextControlProps?.style,\n              })}\n              {...nextControlProps}\n              onClick={(event) => {\n                handleNext();\n                nextControlProps?.onClick?.(event);\n              }}\n              data-inactive={!canScrollNext || undefined}\n              tabIndex={canScrollNext ? 0 : -1}\n            >\n              {typeof nextControlIcon !== 'undefined' ? (\n                nextControlIcon\n              ) : (\n                <AccordionChevron\n                  style={{\n                    transform: `rotate(${getChevronRotation({\n                      dir,\n                      orientation,\n                      direction: 'next',\n                    })}deg)`,\n                  }}\n                />\n              )}\n            </UnstyledButton>\n          </div>\n        )}\n      </Box>\n    </CarouselProvider>\n  );\n});\n\nCarousel.classes = classes;\nCarousel.displayName = '@mantine/carousel/Carousel';\nCarousel.Slide = CarouselSlide;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}