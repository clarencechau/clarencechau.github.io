{"ast":null,"code":"'use client';\n\nimport { jsx, jsxs, Fragment } from 'react/jsx-runtime';\nimport cx from 'clsx';\nimport '../../Checkbox/Checkbox.mjs';\nimport '../../Checkbox/CheckboxGroup/CheckboxGroup.mjs';\nimport { CheckIcon } from '../../Checkbox/CheckIcon.mjs';\nimport '../../Checkbox/CheckboxIndicator/CheckboxIndicator.mjs';\nimport '../../Checkbox/CheckboxCard/CheckboxCard.mjs';\nimport '../../Checkbox/CheckboxCard/CheckboxCard.context.mjs';\nimport '../../Checkbox/CheckboxGroup.context.mjs';\nimport { ScrollArea } from '../../ScrollArea/ScrollArea.mjs';\nimport { Combobox } from '../Combobox.mjs';\nimport { defaultOptionsFilter } from './default-options-filter.mjs';\nimport { isEmptyComboboxData } from './is-empty-combobox-data.mjs';\nimport { isOptionsGroup } from './is-options-group.mjs';\nimport { validateOptions } from './validate-options.mjs';\nimport classes from '../Combobox.module.css.mjs';\nfunction isValueChecked(value, optionValue) {\n  return Array.isArray(value) ? value.includes(optionValue) : value === optionValue;\n}\nfunction Option({\n  data,\n  withCheckIcon,\n  value,\n  checkIconPosition,\n  unstyled,\n  renderOption\n}) {\n  if (!isOptionsGroup(data)) {\n    const checked = isValueChecked(value, data.value);\n    const check = withCheckIcon && checked && /* @__PURE__ */jsx(CheckIcon, {\n      className: classes.optionsDropdownCheckIcon\n    });\n    const defaultContent = /* @__PURE__ */jsxs(Fragment, {\n      children: [checkIconPosition === \"left\" && check, /* @__PURE__ */jsx(\"span\", {\n        children: data.label\n      }), checkIconPosition === \"right\" && check]\n    });\n    return /* @__PURE__ */jsx(Combobox.Option, {\n      value: data.value,\n      disabled: data.disabled,\n      className: cx({\n        [classes.optionsDropdownOption]: !unstyled\n      }),\n      \"data-reverse\": checkIconPosition === \"right\" || void 0,\n      \"data-checked\": checked || void 0,\n      \"aria-selected\": checked,\n      active: checked,\n      children: typeof renderOption === \"function\" ? renderOption({\n        option: data,\n        checked\n      }) : defaultContent\n    });\n  }\n  const options = data.items.map(item => /* @__PURE__ */jsx(Option, {\n    data: item,\n    value,\n    unstyled,\n    withCheckIcon,\n    checkIconPosition,\n    renderOption\n  }, item.value));\n  return /* @__PURE__ */jsx(Combobox.Group, {\n    label: data.group,\n    children: options\n  });\n}\nfunction OptionsDropdown({\n  data,\n  hidden,\n  hiddenWhenEmpty,\n  filter,\n  search,\n  limit,\n  maxDropdownHeight,\n  withScrollArea = true,\n  filterOptions = true,\n  withCheckIcon = false,\n  value,\n  checkIconPosition,\n  nothingFoundMessage,\n  unstyled,\n  labelId,\n  renderOption,\n  scrollAreaProps,\n  \"aria-label\": ariaLabel\n}) {\n  validateOptions(data);\n  const shouldFilter = typeof search === \"string\";\n  const filteredData = shouldFilter ? (filter || defaultOptionsFilter)({\n    options: data,\n    search: filterOptions ? search : \"\",\n    limit: limit ?? Infinity\n  }) : data;\n  const isEmpty = isEmptyComboboxData(filteredData);\n  const options = filteredData.map(item => /* @__PURE__ */jsx(Option, {\n    data: item,\n    withCheckIcon,\n    value,\n    checkIconPosition,\n    unstyled,\n    renderOption\n  }, isOptionsGroup(item) ? item.group : item.value));\n  return /* @__PURE__ */jsx(Combobox.Dropdown, {\n    hidden: hidden || hiddenWhenEmpty && isEmpty,\n    children: /* @__PURE__ */jsxs(Combobox.Options, {\n      labelledBy: labelId,\n      \"aria-label\": ariaLabel,\n      children: [withScrollArea ? /* @__PURE__ */jsx(ScrollArea.Autosize, {\n        mah: maxDropdownHeight ?? 220,\n        type: \"scroll\",\n        scrollbarSize: \"var(--combobox-padding)\",\n        offsetScrollbars: \"y\",\n        ...scrollAreaProps,\n        children: options\n      }) : options, isEmpty && nothingFoundMessage && /* @__PURE__ */jsx(Combobox.Empty, {\n        children: nothingFoundMessage\n      })]\n    })\n  });\n}\nexport { OptionsDropdown };","map":{"version":3,"names":["isValueChecked","value","optionValue","Array","isArray","includes","Option","data","withCheckIcon","checkIconPosition","unstyled","renderOption","isOptionsGroup","checked","check","jsx","CheckIcon","className","classes","optionsDropdownCheckIcon","defaultContent","jsxs","Fragment","children","label","Combobox","disabled","cx","optionsDropdownOption","active","option","options","items","map","item","Group","group","OptionsDropdown","hidden","hiddenWhenEmpty","filter","search","limit","maxDropdownHeight","withScrollArea","filterOptions","nothingFoundMessage","labelId","scrollAreaProps","ariaLabel","validateOptions","shouldFilter","filteredData","defaultOptionsFilter","Infinity","isEmpty","isEmptyComboboxData","Dropdown","Options","labelledBy","ScrollArea","Autosize","mah","type","scrollbarSize","offsetScrollbars","Empty"],"sources":["/Users/clarencechau/Documents/projects/personal-website/clarencechau.github.io/node_modules/@mantine/core/src/components/Combobox/OptionsDropdown/OptionsDropdown.tsx"],"sourcesContent":["import cx from 'clsx';\nimport { CheckIcon } from '../../Checkbox';\nimport { ScrollArea, ScrollAreaProps } from '../../ScrollArea/ScrollArea';\nimport { Combobox } from '../Combobox';\nimport { ComboboxItem, ComboboxLikeRenderOptionInput, ComboboxParsedItem } from '../Combobox.types';\nimport { defaultOptionsFilter, FilterOptionsInput } from './default-options-filter';\nimport { isEmptyComboboxData } from './is-empty-combobox-data';\nimport { isOptionsGroup } from './is-options-group';\nimport { validateOptions } from './validate-options';\nimport classes from '../Combobox.module.css';\n\nexport type OptionsFilter = (input: FilterOptionsInput) => ComboboxParsedItem[];\n\nexport interface OptionsGroup {\n  group: string;\n  items: ComboboxItem[];\n}\n\nexport type OptionsData = (ComboboxItem | OptionsGroup)[];\n\ninterface OptionProps {\n  data: ComboboxItem | OptionsGroup;\n  withCheckIcon?: boolean;\n  value?: string | string[] | null;\n  checkIconPosition?: 'left' | 'right';\n  unstyled: boolean | undefined;\n  renderOption?: (input: ComboboxLikeRenderOptionInput<any>) => React.ReactNode;\n}\n\nfunction isValueChecked(value: string | string[] | undefined | null, optionValue: string) {\n  return Array.isArray(value) ? value.includes(optionValue) : value === optionValue;\n}\n\nfunction Option({\n  data,\n  withCheckIcon,\n  value,\n  checkIconPosition,\n  unstyled,\n  renderOption,\n}: OptionProps) {\n  if (!isOptionsGroup(data)) {\n    const checked = isValueChecked(value, data.value);\n    const check = withCheckIcon && checked && (\n      <CheckIcon className={classes.optionsDropdownCheckIcon} />\n    );\n\n    const defaultContent = (\n      <>\n        {checkIconPosition === 'left' && check}\n        <span>{data.label}</span>\n        {checkIconPosition === 'right' && check}\n      </>\n    );\n\n    return (\n      <Combobox.Option\n        value={data.value}\n        disabled={data.disabled}\n        className={cx({ [classes.optionsDropdownOption]: !unstyled })}\n        data-reverse={checkIconPosition === 'right' || undefined}\n        data-checked={checked || undefined}\n        aria-selected={checked}\n        active={checked}\n      >\n        {typeof renderOption === 'function'\n          ? renderOption({ option: data, checked })\n          : defaultContent}\n      </Combobox.Option>\n    );\n  }\n\n  const options = data.items.map((item) => (\n    <Option\n      data={item}\n      value={value}\n      key={item.value}\n      unstyled={unstyled}\n      withCheckIcon={withCheckIcon}\n      checkIconPosition={checkIconPosition}\n      renderOption={renderOption}\n    />\n  ));\n\n  return <Combobox.Group label={data.group}>{options}</Combobox.Group>;\n}\n\nexport interface OptionsDropdownProps {\n  data: OptionsData;\n  filter: OptionsFilter | undefined;\n  search: string | undefined;\n  limit: number | undefined;\n  withScrollArea: boolean | undefined;\n  maxDropdownHeight: number | string | undefined;\n  hidden?: boolean;\n  hiddenWhenEmpty?: boolean;\n  filterOptions?: boolean;\n  withCheckIcon?: boolean;\n  value?: string | string[] | null;\n  checkIconPosition?: 'left' | 'right';\n  nothingFoundMessage?: React.ReactNode;\n  unstyled: boolean | undefined;\n  labelId: string | undefined;\n  'aria-label': string | undefined;\n  renderOption?: (input: ComboboxLikeRenderOptionInput<any>) => React.ReactNode;\n  scrollAreaProps: ScrollAreaProps | undefined;\n}\n\nexport function OptionsDropdown({\n  data,\n  hidden,\n  hiddenWhenEmpty,\n  filter,\n  search,\n  limit,\n  maxDropdownHeight,\n  withScrollArea = true,\n  filterOptions = true,\n  withCheckIcon = false,\n  value,\n  checkIconPosition,\n  nothingFoundMessage,\n  unstyled,\n  labelId,\n  renderOption,\n  scrollAreaProps,\n  'aria-label': ariaLabel,\n}: OptionsDropdownProps) {\n  validateOptions(data);\n\n  const shouldFilter = typeof search === 'string';\n  const filteredData = shouldFilter\n    ? (filter || defaultOptionsFilter)({\n        options: data,\n        search: filterOptions ? search : '',\n        limit: limit ?? Infinity,\n      })\n    : data;\n  const isEmpty = isEmptyComboboxData(filteredData);\n\n  const options = filteredData.map((item) => (\n    <Option\n      data={item}\n      key={isOptionsGroup(item) ? item.group : item.value}\n      withCheckIcon={withCheckIcon}\n      value={value}\n      checkIconPosition={checkIconPosition}\n      unstyled={unstyled}\n      renderOption={renderOption}\n    />\n  ));\n\n  return (\n    <Combobox.Dropdown hidden={hidden || (hiddenWhenEmpty && isEmpty)}>\n      <Combobox.Options labelledBy={labelId} aria-label={ariaLabel}>\n        {withScrollArea ? (\n          <ScrollArea.Autosize\n            mah={maxDropdownHeight ?? 220}\n            type=\"scroll\"\n            scrollbarSize=\"var(--combobox-padding)\"\n            offsetScrollbars=\"y\"\n            {...scrollAreaProps}\n          >\n            {options}\n          </ScrollArea.Autosize>\n        ) : (\n          options\n        )}\n        {isEmpty && nothingFoundMessage && <Combobox.Empty>{nothingFoundMessage}</Combobox.Empty>}\n      </Combobox.Options>\n    </Combobox.Dropdown>\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}