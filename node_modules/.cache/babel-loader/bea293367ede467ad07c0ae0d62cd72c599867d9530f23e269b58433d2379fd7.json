{"ast":null,"code":"'use client';\n\nimport { useState } from 'react';\nimport { useComboboxContext } from '../Combobox.context.mjs';\nfunction useComboboxTargetProps({\n  onKeyDown,\n  withKeyboardNavigation,\n  withAriaAttributes,\n  withExpandedAttribute,\n  targetType,\n  autoComplete\n}) {\n  const ctx = useComboboxContext();\n  const [selectedOptionId, setSelectedOptionId] = useState(null);\n  const handleKeyDown = event => {\n    onKeyDown?.(event);\n    if (ctx.readOnly) {\n      return;\n    }\n    if (withKeyboardNavigation) {\n      if (event.nativeEvent.isComposing) {\n        return;\n      }\n      if (event.nativeEvent.code === \"ArrowDown\") {\n        event.preventDefault();\n        if (!ctx.store.dropdownOpened) {\n          ctx.store.openDropdown(\"keyboard\");\n          setSelectedOptionId(ctx.store.selectActiveOption());\n          ctx.store.updateSelectedOptionIndex(\"selected\", {\n            scrollIntoView: true\n          });\n        } else {\n          setSelectedOptionId(ctx.store.selectNextOption());\n        }\n      }\n      if (event.nativeEvent.code === \"ArrowUp\") {\n        event.preventDefault();\n        if (!ctx.store.dropdownOpened) {\n          ctx.store.openDropdown(\"keyboard\");\n          setSelectedOptionId(ctx.store.selectActiveOption());\n          ctx.store.updateSelectedOptionIndex(\"selected\", {\n            scrollIntoView: true\n          });\n        } else {\n          setSelectedOptionId(ctx.store.selectPreviousOption());\n        }\n      }\n      if (event.nativeEvent.code === \"Enter\" || event.nativeEvent.code === \"NumpadEnter\") {\n        if (event.nativeEvent.keyCode === 229) {\n          return;\n        }\n        const selectedOptionIndex = ctx.store.getSelectedOptionIndex();\n        if (ctx.store.dropdownOpened && selectedOptionIndex !== -1) {\n          event.preventDefault();\n          ctx.store.clickSelectedOption();\n        } else if (targetType === \"button\") {\n          event.preventDefault();\n          ctx.store.openDropdown(\"keyboard\");\n        }\n      }\n      if (event.nativeEvent.code === \"Escape\") {\n        ctx.store.closeDropdown(\"keyboard\");\n      }\n      if (event.nativeEvent.code === \"Space\") {\n        if (targetType === \"button\") {\n          event.preventDefault();\n          ctx.store.toggleDropdown(\"keyboard\");\n        }\n      }\n    }\n  };\n  const ariaAttributes = withAriaAttributes ? {\n    \"aria-haspopup\": \"listbox\",\n    \"aria-expanded\": withExpandedAttribute && !!(ctx.store.listId && ctx.store.dropdownOpened) || void 0,\n    \"aria-controls\": ctx.store.listId,\n    \"aria-activedescendant\": ctx.store.dropdownOpened ? selectedOptionId || void 0 : void 0,\n    autoComplete,\n    \"data-expanded\": ctx.store.dropdownOpened || void 0,\n    \"data-mantine-stop-propagation\": ctx.store.dropdownOpened || void 0\n  } : {};\n  return {\n    ...ariaAttributes,\n    onKeyDown: handleKeyDown\n  };\n}\nexport { useComboboxTargetProps };","map":{"version":3,"names":["useComboboxTargetProps","onKeyDown","withKeyboardNavigation","withAriaAttributes","withExpandedAttribute","targetType","autoComplete","ctx","useComboboxContext","selectedOptionId","setSelectedOptionId","useState","handleKeyDown","event","readOnly","nativeEvent","isComposing","code","preventDefault","store","dropdownOpened","openDropdown","selectActiveOption","updateSelectedOptionIndex","scrollIntoView","selectNextOption","selectPreviousOption","keyCode","selectedOptionIndex","getSelectedOptionIndex","clickSelectedOption","closeDropdown","toggleDropdown","ariaAttributes","listId"],"sources":["/Users/clarencechau/Documents/projects/personal-website/clarencechau.github.io/node_modules/@mantine/core/src/components/Combobox/use-combobox-target-props/use-combobox-target-props.ts"],"sourcesContent":["import { useState } from 'react';\nimport { useComboboxContext } from '../Combobox.context';\n\ninterface UseComboboxTargetPropsInput {\n  targetType: 'input' | 'button' | undefined;\n  withAriaAttributes: boolean | undefined;\n  withKeyboardNavigation: boolean | undefined;\n  withExpandedAttribute: boolean | undefined;\n  onKeyDown: React.KeyboardEventHandler<HTMLInputElement> | undefined;\n  autoComplete: string | undefined;\n}\n\nexport function useComboboxTargetProps({\n  onKeyDown,\n  withKeyboardNavigation,\n  withAriaAttributes,\n  withExpandedAttribute,\n  targetType,\n  autoComplete,\n}: UseComboboxTargetPropsInput) {\n  const ctx = useComboboxContext();\n  const [selectedOptionId, setSelectedOptionId] = useState<string | null>(null);\n\n  const handleKeyDown = (event: React.KeyboardEvent<HTMLInputElement>) => {\n    onKeyDown?.(event);\n\n    if (ctx.readOnly) {\n      return;\n    }\n\n    if (withKeyboardNavigation) {\n      // Ignore during composition in IME\n      if (event.nativeEvent.isComposing) {\n        return;\n      }\n\n      if (event.nativeEvent.code === 'ArrowDown') {\n        event.preventDefault();\n\n        if (!ctx.store.dropdownOpened) {\n          ctx.store.openDropdown('keyboard');\n          setSelectedOptionId(ctx.store.selectActiveOption());\n          ctx.store.updateSelectedOptionIndex('selected', { scrollIntoView: true });\n        } else {\n          setSelectedOptionId(ctx.store.selectNextOption());\n        }\n      }\n\n      if (event.nativeEvent.code === 'ArrowUp') {\n        event.preventDefault();\n\n        if (!ctx.store.dropdownOpened) {\n          ctx.store.openDropdown('keyboard');\n          setSelectedOptionId(ctx.store.selectActiveOption());\n          ctx.store.updateSelectedOptionIndex('selected', { scrollIntoView: true });\n        } else {\n          setSelectedOptionId(ctx.store.selectPreviousOption());\n        }\n      }\n\n      if (event.nativeEvent.code === 'Enter' || event.nativeEvent.code === 'NumpadEnter') {\n        // This is a workaround for handling differences in behavior of isComposing property in Safari\n        // See: https://dninomiya.github.io/form-guide/stop-enter-submit\n        if (event.nativeEvent.keyCode === 229) {\n          return;\n        }\n\n        const selectedOptionIndex = ctx.store.getSelectedOptionIndex();\n\n        if (ctx.store.dropdownOpened && selectedOptionIndex !== -1) {\n          event.preventDefault();\n          ctx.store.clickSelectedOption();\n        } else if (targetType === 'button') {\n          event.preventDefault();\n          ctx.store.openDropdown('keyboard');\n        }\n      }\n\n      if (event.nativeEvent.code === 'Escape') {\n        ctx.store.closeDropdown('keyboard');\n      }\n\n      if (event.nativeEvent.code === 'Space') {\n        if (targetType === 'button') {\n          event.preventDefault();\n          ctx.store.toggleDropdown('keyboard');\n        }\n      }\n    }\n  };\n\n  const ariaAttributes = withAriaAttributes\n    ? {\n        'aria-haspopup': 'listbox',\n        'aria-expanded':\n          (withExpandedAttribute && !!(ctx.store.listId && ctx.store.dropdownOpened)) || undefined,\n        'aria-controls': ctx.store.listId,\n        'aria-activedescendant': ctx.store.dropdownOpened\n          ? selectedOptionId || undefined\n          : undefined,\n        autoComplete,\n        'data-expanded': ctx.store.dropdownOpened || undefined,\n        'data-mantine-stop-propagation': ctx.store.dropdownOpened || undefined,\n      }\n    : {};\n\n  return {\n    ...ariaAttributes,\n    onKeyDown: handleKeyDown,\n  };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}