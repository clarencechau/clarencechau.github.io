{"ast":null,"code":"import * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { GlobalStyles } from '@mui/styled-engine';\nimport { useTheme as muiUseTheme } from '@mui/private-theming';\nimport ThemeProvider from \"../ThemeProvider/index.js\";\nimport InitColorSchemeScript, { DEFAULT_COLOR_SCHEME_STORAGE_KEY, DEFAULT_MODE_STORAGE_KEY } from \"../InitColorSchemeScript/InitColorSchemeScript.js\";\nimport useCurrentColorScheme from \"./useCurrentColorScheme.js\";\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nexport const DISABLE_CSS_TRANSITION = '*{-webkit-transition:none!important;-moz-transition:none!important;-o-transition:none!important;-ms-transition:none!important;transition:none!important}';\nexport default function createCssVarsProvider(options) {\n  const {\n    themeId,\n    /**\n     * This `theme` object needs to follow a certain structure to\n     * be used correctly by the finel `CssVarsProvider`. It should have a\n     * `colorSchemes` key with the light and dark (and any other) palette.\n     * It should also ideally have a vars object created using `prepareCssVars`.\n     */\n    theme: defaultTheme = {},\n    modeStorageKey: defaultModeStorageKey = DEFAULT_MODE_STORAGE_KEY,\n    colorSchemeStorageKey: defaultColorSchemeStorageKey = DEFAULT_COLOR_SCHEME_STORAGE_KEY,\n    disableTransitionOnChange: designSystemTransitionOnChange = false,\n    defaultColorScheme,\n    resolveTheme\n  } = options;\n  const defaultContext = {\n    allColorSchemes: [],\n    colorScheme: undefined,\n    darkColorScheme: undefined,\n    lightColorScheme: undefined,\n    mode: undefined,\n    setColorScheme: () => {},\n    setMode: () => {},\n    systemMode: undefined\n  };\n  const ColorSchemeContext = /*#__PURE__*/React.createContext(undefined);\n  if (process.env.NODE_ENV !== 'production') {\n    ColorSchemeContext.displayName = 'ColorSchemeContext';\n  }\n  const useColorScheme = () => React.useContext(ColorSchemeContext) || defaultContext;\n  const defaultColorSchemes = {};\n  const defaultComponents = {};\n  function CssVarsProvider(props) {\n    const {\n      children,\n      theme: themeProp,\n      modeStorageKey = defaultModeStorageKey,\n      colorSchemeStorageKey = defaultColorSchemeStorageKey,\n      disableTransitionOnChange = designSystemTransitionOnChange,\n      storageWindow = typeof window === 'undefined' ? undefined : window,\n      documentNode = typeof document === 'undefined' ? undefined : document,\n      colorSchemeNode = typeof document === 'undefined' ? undefined : document.documentElement,\n      disableNestedContext = false,\n      disableStyleSheetGeneration = false,\n      defaultMode: initialMode = 'system',\n      noSsr\n    } = props;\n    const hasMounted = React.useRef(false);\n    const upperTheme = muiUseTheme();\n    const ctx = React.useContext(ColorSchemeContext);\n    const nested = !!ctx && !disableNestedContext;\n    const initialTheme = React.useMemo(() => {\n      if (themeProp) {\n        return themeProp;\n      }\n      return typeof defaultTheme === 'function' ? defaultTheme() : defaultTheme;\n    }, [themeProp]);\n    const scopedTheme = initialTheme[themeId];\n    const restThemeProp = scopedTheme || initialTheme;\n    const {\n      colorSchemes = defaultColorSchemes,\n      components = defaultComponents,\n      cssVarPrefix\n    } = restThemeProp;\n    const joinedColorSchemes = Object.keys(colorSchemes).filter(k => !!colorSchemes[k]).join(',');\n    const allColorSchemes = React.useMemo(() => joinedColorSchemes.split(','), [joinedColorSchemes]);\n    const defaultLightColorScheme = typeof defaultColorScheme === 'string' ? defaultColorScheme : defaultColorScheme.light;\n    const defaultDarkColorScheme = typeof defaultColorScheme === 'string' ? defaultColorScheme : defaultColorScheme.dark;\n    const defaultMode = colorSchemes[defaultLightColorScheme] && colorSchemes[defaultDarkColorScheme] ? initialMode : colorSchemes[restThemeProp.defaultColorScheme]?.palette?.mode || restThemeProp.palette?.mode;\n\n    // 1. Get the data about the `mode`, `colorScheme`, and setter functions.\n    const {\n      mode: stateMode,\n      setMode,\n      systemMode,\n      lightColorScheme,\n      darkColorScheme,\n      colorScheme: stateColorScheme,\n      setColorScheme\n    } = useCurrentColorScheme({\n      supportedColorSchemes: allColorSchemes,\n      defaultLightColorScheme,\n      defaultDarkColorScheme,\n      modeStorageKey,\n      colorSchemeStorageKey,\n      defaultMode,\n      storageWindow,\n      noSsr\n    });\n    let mode = stateMode;\n    let colorScheme = stateColorScheme;\n    if (nested) {\n      mode = ctx.mode;\n      colorScheme = ctx.colorScheme;\n    }\n    const memoTheme = React.useMemo(() => {\n      // `colorScheme` is undefined on the server and hydration phase\n      const calculatedColorScheme = colorScheme || restThemeProp.defaultColorScheme;\n\n      // 2. get the `vars` object that refers to the CSS custom properties\n      const themeVars = restThemeProp.generateThemeVars?.() || restThemeProp.vars;\n\n      // 3. Start composing the theme object\n      const theme = {\n        ...restThemeProp,\n        components,\n        colorSchemes,\n        cssVarPrefix,\n        vars: themeVars\n      };\n      if (typeof theme.generateSpacing === 'function') {\n        theme.spacing = theme.generateSpacing();\n      }\n\n      // 4. Resolve the color scheme and merge it to the theme\n      if (calculatedColorScheme) {\n        const scheme = colorSchemes[calculatedColorScheme];\n        if (scheme && typeof scheme === 'object') {\n          // 4.1 Merge the selected color scheme to the theme\n          Object.keys(scheme).forEach(schemeKey => {\n            if (scheme[schemeKey] && typeof scheme[schemeKey] === 'object') {\n              // shallow merge the 1st level structure of the theme.\n              theme[schemeKey] = {\n                ...theme[schemeKey],\n                ...scheme[schemeKey]\n              };\n            } else {\n              theme[schemeKey] = scheme[schemeKey];\n            }\n          });\n        }\n      }\n      return resolveTheme ? resolveTheme(theme) : theme;\n    }, [restThemeProp, colorScheme, components, colorSchemes, cssVarPrefix]);\n\n    // 5. Declaring effects\n    // 5.1 Updates the selector value to use the current color scheme which tells CSS to use the proper stylesheet.\n    const colorSchemeSelector = restThemeProp.colorSchemeSelector;\n    React.useEffect(() => {\n      if (colorScheme && colorSchemeNode && colorSchemeSelector && colorSchemeSelector !== 'media') {\n        const selector = colorSchemeSelector;\n        let rule = colorSchemeSelector;\n        if (selector === 'class') {\n          rule = `.%s`;\n        }\n        if (selector === 'data') {\n          rule = `[data-%s]`;\n        }\n        if (selector?.startsWith('data-') && !selector.includes('%s')) {\n          // 'data-mui-color-scheme' -> '[data-mui-color-scheme=\"%s\"]'\n          rule = `[${selector}=\"%s\"]`;\n        }\n        if (rule.startsWith('.')) {\n          colorSchemeNode.classList.remove(...allColorSchemes.map(scheme => rule.substring(1).replace('%s', scheme)));\n          colorSchemeNode.classList.add(rule.substring(1).replace('%s', colorScheme));\n        } else {\n          const matches = rule.replace('%s', colorScheme).match(/\\[([^\\]]+)\\]/);\n          if (matches) {\n            const [attr, value] = matches[1].split('=');\n            if (!value) {\n              // for attributes like `data-theme-dark`, `data-theme-light`\n              // remove all the existing data attributes before setting the new one\n              allColorSchemes.forEach(scheme => {\n                colorSchemeNode.removeAttribute(attr.replace(colorScheme, scheme));\n              });\n            }\n            colorSchemeNode.setAttribute(attr, value ? value.replace(/\"|'/g, '') : '');\n          } else {\n            colorSchemeNode.setAttribute(rule, colorScheme);\n          }\n        }\n      }\n    }, [colorScheme, colorSchemeSelector, colorSchemeNode, allColorSchemes]);\n\n    // 5.2 Remove the CSS transition when color scheme changes to create instant experience.\n    // credit: https://github.com/pacocoursey/next-themes/blob/b5c2bad50de2d61ad7b52a9c5cdc801a78507d7a/index.tsx#L313\n    React.useEffect(() => {\n      let timer;\n      if (disableTransitionOnChange && hasMounted.current && documentNode) {\n        const css = documentNode.createElement('style');\n        css.appendChild(documentNode.createTextNode(DISABLE_CSS_TRANSITION));\n        documentNode.head.appendChild(css);\n\n        // Force browser repaint\n        (() => window.getComputedStyle(documentNode.body))();\n        timer = setTimeout(() => {\n          documentNode.head.removeChild(css);\n        }, 1);\n      }\n      return () => {\n        clearTimeout(timer);\n      };\n    }, [colorScheme, disableTransitionOnChange, documentNode]);\n    React.useEffect(() => {\n      hasMounted.current = true;\n      return () => {\n        hasMounted.current = false;\n      };\n    }, []);\n    const contextValue = React.useMemo(() => ({\n      allColorSchemes,\n      colorScheme,\n      darkColorScheme,\n      lightColorScheme,\n      mode,\n      setColorScheme,\n      setMode: process.env.NODE_ENV === 'production' ? setMode : newMode => {\n        if (memoTheme.colorSchemeSelector === 'media') {\n          console.error(['MUI: The `setMode` function has no effect if `colorSchemeSelector` is `media` (`media` is the default value).', 'To toggle the mode manually, please configure `colorSchemeSelector` to use a class or data attribute.', 'To learn more, visit https://mui.com/material-ui/customization/css-theme-variables/configuration/#toggling-dark-mode-manually'].join('\\n'));\n        }\n        setMode(newMode);\n      },\n      systemMode\n    }), [allColorSchemes, colorScheme, darkColorScheme, lightColorScheme, mode, setColorScheme, setMode, systemMode, memoTheme.colorSchemeSelector]);\n    let shouldGenerateStyleSheet = true;\n    if (disableStyleSheetGeneration || restThemeProp.cssVariables === false || nested && upperTheme?.cssVarPrefix === cssVarPrefix) {\n      shouldGenerateStyleSheet = false;\n    }\n    const element = /*#__PURE__*/_jsxs(React.Fragment, {\n      children: [/*#__PURE__*/_jsx(ThemeProvider, {\n        themeId: scopedTheme ? themeId : undefined,\n        theme: memoTheme,\n        children: children\n      }), shouldGenerateStyleSheet && /*#__PURE__*/_jsx(GlobalStyles, {\n        styles: memoTheme.generateStyleSheets?.() || []\n      })]\n    });\n    if (nested) {\n      return element;\n    }\n    return /*#__PURE__*/_jsx(ColorSchemeContext.Provider, {\n      value: contextValue,\n      children: element\n    });\n  }\n  process.env.NODE_ENV !== \"production\" ? CssVarsProvider.propTypes = {\n    /**\n     * The component tree.\n     */\n    children: PropTypes.node,\n    /**\n     * The node used to attach the color-scheme attribute\n     */\n    colorSchemeNode: PropTypes.any,\n    /**\n     * localStorage key used to store `colorScheme`\n     */\n    colorSchemeStorageKey: PropTypes.string,\n    /**\n     * The default mode when the storage is empty,\n     * require the theme to have `colorSchemes` with light and dark.\n     */\n    defaultMode: PropTypes.string,\n    /**\n     * If `true`, the provider creates its own context and generate stylesheet as if it is a root `CssVarsProvider`.\n     */\n    disableNestedContext: PropTypes.bool,\n    /**\n     * If `true`, the style sheet won't be generated.\n     *\n     * This is useful for controlling nested CssVarsProvider behavior.\n     */\n    disableStyleSheetGeneration: PropTypes.bool,\n    /**\n     * Disable CSS transitions when switching between modes or color schemes.\n     */\n    disableTransitionOnChange: PropTypes.bool,\n    /**\n     * The document to attach the attribute to.\n     */\n    documentNode: PropTypes.any,\n    /**\n     * The key in the local storage used to store current color scheme.\n     */\n    modeStorageKey: PropTypes.string,\n    /**\n     * If `true`, the mode will be the same value as the storage without an extra rerendering after the hydration.\n     * You should use this option in conjuction with `InitColorSchemeScript` component.\n     */\n    noSsr: PropTypes.bool,\n    /**\n     * The window that attaches the 'storage' event listener.\n     * @default window\n     */\n    storageWindow: PropTypes.any,\n    /**\n     * The calculated theme object that will be passed through context.\n     */\n    theme: PropTypes.object\n  } : void 0;\n  const defaultLightColorScheme = typeof defaultColorScheme === 'string' ? defaultColorScheme : defaultColorScheme.light;\n  const defaultDarkColorScheme = typeof defaultColorScheme === 'string' ? defaultColorScheme : defaultColorScheme.dark;\n  const getInitColorSchemeScript = params => InitColorSchemeScript({\n    colorSchemeStorageKey: defaultColorSchemeStorageKey,\n    defaultLightColorScheme,\n    defaultDarkColorScheme,\n    modeStorageKey: defaultModeStorageKey,\n    ...params\n  });\n  return {\n    CssVarsProvider,\n    useColorScheme,\n    getInitColorSchemeScript\n  };\n}","map":{"version":3,"names":["React","PropTypes","GlobalStyles","useTheme","muiUseTheme","ThemeProvider","InitColorSchemeScript","DEFAULT_COLOR_SCHEME_STORAGE_KEY","DEFAULT_MODE_STORAGE_KEY","useCurrentColorScheme","jsx","_jsx","jsxs","_jsxs","DISABLE_CSS_TRANSITION","createCssVarsProvider","options","themeId","theme","defaultTheme","modeStorageKey","defaultModeStorageKey","colorSchemeStorageKey","defaultColorSchemeStorageKey","disableTransitionOnChange","designSystemTransitionOnChange","defaultColorScheme","resolveTheme","defaultContext","allColorSchemes","colorScheme","undefined","darkColorScheme","lightColorScheme","mode","setColorScheme","setMode","systemMode","ColorSchemeContext","createContext","process","env","NODE_ENV","displayName","useColorScheme","useContext","defaultColorSchemes","defaultComponents","CssVarsProvider","props","children","themeProp","storageWindow","window","documentNode","document","colorSchemeNode","documentElement","disableNestedContext","disableStyleSheetGeneration","defaultMode","initialMode","noSsr","hasMounted","useRef","upperTheme","ctx","nested","initialTheme","useMemo","scopedTheme","restThemeProp","colorSchemes","components","cssVarPrefix","joinedColorSchemes","Object","keys","filter","k","join","split","defaultLightColorScheme","light","defaultDarkColorScheme","dark","palette","stateMode","stateColorScheme","supportedColorSchemes","memoTheme","calculatedColorScheme","themeVars","generateThemeVars","vars","generateSpacing","spacing","scheme","forEach","schemeKey","colorSchemeSelector","useEffect","selector","rule","startsWith","includes","classList","remove","map","substring","replace","add","matches","match","attr","value","removeAttribute","setAttribute","timer","current","css","createElement","appendChild","createTextNode","head","getComputedStyle","body","setTimeout","removeChild","clearTimeout","contextValue","newMode","console","error","shouldGenerateStyleSheet","cssVariables","element","Fragment","styles","generateStyleSheets","Provider","propTypes","node","any","string","bool","object","getInitColorSchemeScript","params"],"sources":["/Users/clarencechau/Documents/projects/personal-website/clarencechau.github.io/node_modules/@mui/system/esm/cssVars/createCssVarsProvider.js"],"sourcesContent":["import * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { GlobalStyles } from '@mui/styled-engine';\nimport { useTheme as muiUseTheme } from '@mui/private-theming';\nimport ThemeProvider from \"../ThemeProvider/index.js\";\nimport InitColorSchemeScript, { DEFAULT_COLOR_SCHEME_STORAGE_KEY, DEFAULT_MODE_STORAGE_KEY } from \"../InitColorSchemeScript/InitColorSchemeScript.js\";\nimport useCurrentColorScheme from \"./useCurrentColorScheme.js\";\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nexport const DISABLE_CSS_TRANSITION = '*{-webkit-transition:none!important;-moz-transition:none!important;-o-transition:none!important;-ms-transition:none!important;transition:none!important}';\nexport default function createCssVarsProvider(options) {\n  const {\n    themeId,\n    /**\n     * This `theme` object needs to follow a certain structure to\n     * be used correctly by the finel `CssVarsProvider`. It should have a\n     * `colorSchemes` key with the light and dark (and any other) palette.\n     * It should also ideally have a vars object created using `prepareCssVars`.\n     */\n    theme: defaultTheme = {},\n    modeStorageKey: defaultModeStorageKey = DEFAULT_MODE_STORAGE_KEY,\n    colorSchemeStorageKey: defaultColorSchemeStorageKey = DEFAULT_COLOR_SCHEME_STORAGE_KEY,\n    disableTransitionOnChange: designSystemTransitionOnChange = false,\n    defaultColorScheme,\n    resolveTheme\n  } = options;\n  const defaultContext = {\n    allColorSchemes: [],\n    colorScheme: undefined,\n    darkColorScheme: undefined,\n    lightColorScheme: undefined,\n    mode: undefined,\n    setColorScheme: () => {},\n    setMode: () => {},\n    systemMode: undefined\n  };\n  const ColorSchemeContext = /*#__PURE__*/React.createContext(undefined);\n  if (process.env.NODE_ENV !== 'production') {\n    ColorSchemeContext.displayName = 'ColorSchemeContext';\n  }\n  const useColorScheme = () => React.useContext(ColorSchemeContext) || defaultContext;\n  const defaultColorSchemes = {};\n  const defaultComponents = {};\n  function CssVarsProvider(props) {\n    const {\n      children,\n      theme: themeProp,\n      modeStorageKey = defaultModeStorageKey,\n      colorSchemeStorageKey = defaultColorSchemeStorageKey,\n      disableTransitionOnChange = designSystemTransitionOnChange,\n      storageWindow = typeof window === 'undefined' ? undefined : window,\n      documentNode = typeof document === 'undefined' ? undefined : document,\n      colorSchemeNode = typeof document === 'undefined' ? undefined : document.documentElement,\n      disableNestedContext = false,\n      disableStyleSheetGeneration = false,\n      defaultMode: initialMode = 'system',\n      noSsr\n    } = props;\n    const hasMounted = React.useRef(false);\n    const upperTheme = muiUseTheme();\n    const ctx = React.useContext(ColorSchemeContext);\n    const nested = !!ctx && !disableNestedContext;\n    const initialTheme = React.useMemo(() => {\n      if (themeProp) {\n        return themeProp;\n      }\n      return typeof defaultTheme === 'function' ? defaultTheme() : defaultTheme;\n    }, [themeProp]);\n    const scopedTheme = initialTheme[themeId];\n    const restThemeProp = scopedTheme || initialTheme;\n    const {\n      colorSchemes = defaultColorSchemes,\n      components = defaultComponents,\n      cssVarPrefix\n    } = restThemeProp;\n    const joinedColorSchemes = Object.keys(colorSchemes).filter(k => !!colorSchemes[k]).join(',');\n    const allColorSchemes = React.useMemo(() => joinedColorSchemes.split(','), [joinedColorSchemes]);\n    const defaultLightColorScheme = typeof defaultColorScheme === 'string' ? defaultColorScheme : defaultColorScheme.light;\n    const defaultDarkColorScheme = typeof defaultColorScheme === 'string' ? defaultColorScheme : defaultColorScheme.dark;\n    const defaultMode = colorSchemes[defaultLightColorScheme] && colorSchemes[defaultDarkColorScheme] ? initialMode : colorSchemes[restThemeProp.defaultColorScheme]?.palette?.mode || restThemeProp.palette?.mode;\n\n    // 1. Get the data about the `mode`, `colorScheme`, and setter functions.\n    const {\n      mode: stateMode,\n      setMode,\n      systemMode,\n      lightColorScheme,\n      darkColorScheme,\n      colorScheme: stateColorScheme,\n      setColorScheme\n    } = useCurrentColorScheme({\n      supportedColorSchemes: allColorSchemes,\n      defaultLightColorScheme,\n      defaultDarkColorScheme,\n      modeStorageKey,\n      colorSchemeStorageKey,\n      defaultMode,\n      storageWindow,\n      noSsr\n    });\n    let mode = stateMode;\n    let colorScheme = stateColorScheme;\n    if (nested) {\n      mode = ctx.mode;\n      colorScheme = ctx.colorScheme;\n    }\n    const memoTheme = React.useMemo(() => {\n      // `colorScheme` is undefined on the server and hydration phase\n      const calculatedColorScheme = colorScheme || restThemeProp.defaultColorScheme;\n\n      // 2. get the `vars` object that refers to the CSS custom properties\n      const themeVars = restThemeProp.generateThemeVars?.() || restThemeProp.vars;\n\n      // 3. Start composing the theme object\n      const theme = {\n        ...restThemeProp,\n        components,\n        colorSchemes,\n        cssVarPrefix,\n        vars: themeVars\n      };\n      if (typeof theme.generateSpacing === 'function') {\n        theme.spacing = theme.generateSpacing();\n      }\n\n      // 4. Resolve the color scheme and merge it to the theme\n      if (calculatedColorScheme) {\n        const scheme = colorSchemes[calculatedColorScheme];\n        if (scheme && typeof scheme === 'object') {\n          // 4.1 Merge the selected color scheme to the theme\n          Object.keys(scheme).forEach(schemeKey => {\n            if (scheme[schemeKey] && typeof scheme[schemeKey] === 'object') {\n              // shallow merge the 1st level structure of the theme.\n              theme[schemeKey] = {\n                ...theme[schemeKey],\n                ...scheme[schemeKey]\n              };\n            } else {\n              theme[schemeKey] = scheme[schemeKey];\n            }\n          });\n        }\n      }\n      return resolveTheme ? resolveTheme(theme) : theme;\n    }, [restThemeProp, colorScheme, components, colorSchemes, cssVarPrefix]);\n\n    // 5. Declaring effects\n    // 5.1 Updates the selector value to use the current color scheme which tells CSS to use the proper stylesheet.\n    const colorSchemeSelector = restThemeProp.colorSchemeSelector;\n    React.useEffect(() => {\n      if (colorScheme && colorSchemeNode && colorSchemeSelector && colorSchemeSelector !== 'media') {\n        const selector = colorSchemeSelector;\n        let rule = colorSchemeSelector;\n        if (selector === 'class') {\n          rule = `.%s`;\n        }\n        if (selector === 'data') {\n          rule = `[data-%s]`;\n        }\n        if (selector?.startsWith('data-') && !selector.includes('%s')) {\n          // 'data-mui-color-scheme' -> '[data-mui-color-scheme=\"%s\"]'\n          rule = `[${selector}=\"%s\"]`;\n        }\n        if (rule.startsWith('.')) {\n          colorSchemeNode.classList.remove(...allColorSchemes.map(scheme => rule.substring(1).replace('%s', scheme)));\n          colorSchemeNode.classList.add(rule.substring(1).replace('%s', colorScheme));\n        } else {\n          const matches = rule.replace('%s', colorScheme).match(/\\[([^\\]]+)\\]/);\n          if (matches) {\n            const [attr, value] = matches[1].split('=');\n            if (!value) {\n              // for attributes like `data-theme-dark`, `data-theme-light`\n              // remove all the existing data attributes before setting the new one\n              allColorSchemes.forEach(scheme => {\n                colorSchemeNode.removeAttribute(attr.replace(colorScheme, scheme));\n              });\n            }\n            colorSchemeNode.setAttribute(attr, value ? value.replace(/\"|'/g, '') : '');\n          } else {\n            colorSchemeNode.setAttribute(rule, colorScheme);\n          }\n        }\n      }\n    }, [colorScheme, colorSchemeSelector, colorSchemeNode, allColorSchemes]);\n\n    // 5.2 Remove the CSS transition when color scheme changes to create instant experience.\n    // credit: https://github.com/pacocoursey/next-themes/blob/b5c2bad50de2d61ad7b52a9c5cdc801a78507d7a/index.tsx#L313\n    React.useEffect(() => {\n      let timer;\n      if (disableTransitionOnChange && hasMounted.current && documentNode) {\n        const css = documentNode.createElement('style');\n        css.appendChild(documentNode.createTextNode(DISABLE_CSS_TRANSITION));\n        documentNode.head.appendChild(css);\n\n        // Force browser repaint\n        (() => window.getComputedStyle(documentNode.body))();\n        timer = setTimeout(() => {\n          documentNode.head.removeChild(css);\n        }, 1);\n      }\n      return () => {\n        clearTimeout(timer);\n      };\n    }, [colorScheme, disableTransitionOnChange, documentNode]);\n    React.useEffect(() => {\n      hasMounted.current = true;\n      return () => {\n        hasMounted.current = false;\n      };\n    }, []);\n    const contextValue = React.useMemo(() => ({\n      allColorSchemes,\n      colorScheme,\n      darkColorScheme,\n      lightColorScheme,\n      mode,\n      setColorScheme,\n      setMode: process.env.NODE_ENV === 'production' ? setMode : newMode => {\n        if (memoTheme.colorSchemeSelector === 'media') {\n          console.error(['MUI: The `setMode` function has no effect if `colorSchemeSelector` is `media` (`media` is the default value).', 'To toggle the mode manually, please configure `colorSchemeSelector` to use a class or data attribute.', 'To learn more, visit https://mui.com/material-ui/customization/css-theme-variables/configuration/#toggling-dark-mode-manually'].join('\\n'));\n        }\n        setMode(newMode);\n      },\n      systemMode\n    }), [allColorSchemes, colorScheme, darkColorScheme, lightColorScheme, mode, setColorScheme, setMode, systemMode, memoTheme.colorSchemeSelector]);\n    let shouldGenerateStyleSheet = true;\n    if (disableStyleSheetGeneration || restThemeProp.cssVariables === false || nested && upperTheme?.cssVarPrefix === cssVarPrefix) {\n      shouldGenerateStyleSheet = false;\n    }\n    const element = /*#__PURE__*/_jsxs(React.Fragment, {\n      children: [/*#__PURE__*/_jsx(ThemeProvider, {\n        themeId: scopedTheme ? themeId : undefined,\n        theme: memoTheme,\n        children: children\n      }), shouldGenerateStyleSheet && /*#__PURE__*/_jsx(GlobalStyles, {\n        styles: memoTheme.generateStyleSheets?.() || []\n      })]\n    });\n    if (nested) {\n      return element;\n    }\n    return /*#__PURE__*/_jsx(ColorSchemeContext.Provider, {\n      value: contextValue,\n      children: element\n    });\n  }\n  process.env.NODE_ENV !== \"production\" ? CssVarsProvider.propTypes = {\n    /**\n     * The component tree.\n     */\n    children: PropTypes.node,\n    /**\n     * The node used to attach the color-scheme attribute\n     */\n    colorSchemeNode: PropTypes.any,\n    /**\n     * localStorage key used to store `colorScheme`\n     */\n    colorSchemeStorageKey: PropTypes.string,\n    /**\n     * The default mode when the storage is empty,\n     * require the theme to have `colorSchemes` with light and dark.\n     */\n    defaultMode: PropTypes.string,\n    /**\n     * If `true`, the provider creates its own context and generate stylesheet as if it is a root `CssVarsProvider`.\n     */\n    disableNestedContext: PropTypes.bool,\n    /**\n     * If `true`, the style sheet won't be generated.\n     *\n     * This is useful for controlling nested CssVarsProvider behavior.\n     */\n    disableStyleSheetGeneration: PropTypes.bool,\n    /**\n     * Disable CSS transitions when switching between modes or color schemes.\n     */\n    disableTransitionOnChange: PropTypes.bool,\n    /**\n     * The document to attach the attribute to.\n     */\n    documentNode: PropTypes.any,\n    /**\n     * The key in the local storage used to store current color scheme.\n     */\n    modeStorageKey: PropTypes.string,\n    /**\n     * If `true`, the mode will be the same value as the storage without an extra rerendering after the hydration.\n     * You should use this option in conjuction with `InitColorSchemeScript` component.\n     */\n    noSsr: PropTypes.bool,\n    /**\n     * The window that attaches the 'storage' event listener.\n     * @default window\n     */\n    storageWindow: PropTypes.any,\n    /**\n     * The calculated theme object that will be passed through context.\n     */\n    theme: PropTypes.object\n  } : void 0;\n  const defaultLightColorScheme = typeof defaultColorScheme === 'string' ? defaultColorScheme : defaultColorScheme.light;\n  const defaultDarkColorScheme = typeof defaultColorScheme === 'string' ? defaultColorScheme : defaultColorScheme.dark;\n  const getInitColorSchemeScript = params => InitColorSchemeScript({\n    colorSchemeStorageKey: defaultColorSchemeStorageKey,\n    defaultLightColorScheme,\n    defaultDarkColorScheme,\n    modeStorageKey: defaultModeStorageKey,\n    ...params\n  });\n  return {\n    CssVarsProvider,\n    useColorScheme,\n    getInitColorSchemeScript\n  };\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}