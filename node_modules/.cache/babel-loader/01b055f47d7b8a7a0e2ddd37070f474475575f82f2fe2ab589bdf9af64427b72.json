{"ast":null,"code":"'use client';\n\nimport 'react';\nimport 'react/jsx-runtime';\nimport '@mantine/hooks';\nimport { memoize } from '../../../core/utils/memoize/memoize.mjs';\nimport 'clsx';\nimport '../../../core/MantineProvider/Mantine.context.mjs';\nimport '../../../core/MantineProvider/default-theme.mjs';\nimport '../../../core/MantineProvider/MantineProvider.mjs';\nimport '../../../core/MantineProvider/MantineThemeProvider/MantineThemeProvider.mjs';\nimport '../../../core/MantineProvider/MantineCssVariables/MantineCssVariables.mjs';\nimport '../../../core/Box/Box.mjs';\nimport '../../../core/DirectionProvider/DirectionProvider.mjs';\nimport { getAllCheckedNodes } from '../get-all-checked-nodes/get-all-checked-nodes.mjs';\nfunction isNodeIndeterminate(value, data, checkedState) {\n  if (checkedState.length === 0) {\n    return false;\n  }\n  const checkedNodes = getAllCheckedNodes(data, checkedState).result;\n  return checkedNodes.some(node => node.value === value && node.indeterminate);\n}\nconst memoizedIsNodeIndeterminate = memoize(isNodeIndeterminate);\nexport { isNodeIndeterminate, memoizedIsNodeIndeterminate };","map":{"version":3,"names":["isNodeIndeterminate","value","data","checkedState","length","checkedNodes","getAllCheckedNodes","result","some","node","indeterminate","memoizedIsNodeIndeterminate","memoize"],"sources":["/Users/clarencechau/Documents/projects/personal-website/clarencechau.github.io/node_modules/@mantine/core/src/components/Tree/is-node-indeterminate/is-node-indeterminate.ts"],"sourcesContent":["import { memoize } from '../../../core';\nimport { getAllCheckedNodes } from '../get-all-checked-nodes/get-all-checked-nodes';\nimport type { TreeNodeData } from '../Tree';\n\nexport function isNodeIndeterminate(\n  value: string,\n  data: TreeNodeData[],\n  checkedState: string[]\n): boolean {\n  if (checkedState.length === 0) {\n    return false;\n  }\n\n  const checkedNodes = getAllCheckedNodes(data, checkedState).result;\n  return checkedNodes.some((node) => node.value === value && node.indeterminate);\n}\n\nexport const memoizedIsNodeIndeterminate = memoize(isNodeIndeterminate);\n"],"mappings":";;;;;;;;;;;;;;;AAGO,SAASA,mBAAmBA,CAACC,KAAK,EAAEC,IAAI,EAAEC,YAAY,EAAE;EAC7D,IAAIA,YAAY,CAACC,MAAM,KAAK,CAAC,EAAE;IAC7B,OAAO,KAAK;EAChB;EACE,MAAMC,YAAY,GAAGC,kBAAkB,CAACJ,IAAI,EAAEC,YAAY,CAAC,CAACI,MAAM;EAClE,OAAOF,YAAY,CAACG,IAAI,CAAEC,IAAI,IAAKA,IAAI,CAACR,KAAK,KAAKA,KAAK,IAAIQ,IAAI,CAACC,aAAa,CAAC;AAChF;AACY,MAACC,2BAA2B,GAAGC,OAAO,CAACZ,mBAAmB"},"metadata":{},"sourceType":"module","externalDependencies":[]}