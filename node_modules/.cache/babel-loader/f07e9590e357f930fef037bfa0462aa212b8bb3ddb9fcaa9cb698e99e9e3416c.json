{"ast":null,"code":"'use client';\n\nimport { jsxs, jsx } from 'react/jsx-runtime';\nimport { rem } from '../../core/utils/units-converters/rem.mjs';\nimport 'react';\nimport { getRadius } from '../../core/utils/get-size/get-size.mjs';\nimport '@mantine/hooks';\nimport { createVarsResolver } from '../../core/styles-api/create-vars-resolver/create-vars-resolver.mjs';\nimport 'clsx';\nimport { parseThemeColor } from '../../core/MantineProvider/color-functions/parse-theme-color/parse-theme-color.mjs';\nimport { getThemeColor } from '../../core/MantineProvider/color-functions/get-theme-color/get-theme-color.mjs';\nimport { rgba } from '../../core/MantineProvider/color-functions/rgba/rgba.mjs';\nimport '../../core/MantineProvider/Mantine.context.mjs';\nimport '../../core/MantineProvider/default-theme.mjs';\nimport '../../core/MantineProvider/MantineProvider.mjs';\nimport '../../core/MantineProvider/MantineThemeProvider/MantineThemeProvider.mjs';\nimport { useProps } from '../../core/MantineProvider/use-props/use-props.mjs';\nimport '../../core/MantineProvider/MantineCssVariables/MantineCssVariables.mjs';\nimport { useStyles } from '../../core/styles-api/use-styles/use-styles.mjs';\nimport { Box } from '../../core/Box/Box.mjs';\nimport { factory } from '../../core/factory/factory.mjs';\nimport '../../core/DirectionProvider/DirectionProvider.mjs';\nimport classes from './Blockquote.module.css.mjs';\nconst defaultProps = {\n  iconSize: 48\n};\nconst varsResolver = createVarsResolver((theme, {\n  color,\n  iconSize,\n  radius\n}) => {\n  const darkParsed = parseThemeColor({\n    color: color || theme.primaryColor,\n    theme,\n    colorScheme: \"dark\"\n  });\n  const lightParsed = parseThemeColor({\n    color: color || theme.primaryColor,\n    theme,\n    colorScheme: \"light\"\n  });\n  return {\n    root: {\n      \"--bq-bg-light\": rgba(lightParsed.value, 0.07),\n      \"--bq-bg-dark\": rgba(darkParsed.value, 0.06),\n      \"--bq-bd\": getThemeColor(color, theme),\n      \"--bq-icon-size\": rem(iconSize),\n      \"--bq-radius\": getRadius(radius)\n    }\n  };\n});\nconst Blockquote = factory((_props, ref) => {\n  const props = useProps(\"Blockquote\", defaultProps, _props);\n  const {\n    classNames,\n    className,\n    style,\n    styles,\n    unstyled,\n    vars,\n    children,\n    icon,\n    iconSize,\n    cite,\n    ...others\n  } = props;\n  const getStyles = useStyles({\n    name: \"Blockquote\",\n    classes,\n    props,\n    className,\n    style,\n    classNames,\n    styles,\n    unstyled,\n    vars,\n    varsResolver\n  });\n  return /* @__PURE__ */jsxs(Box, {\n    component: \"blockquote\",\n    ref,\n    ...getStyles(\"root\"),\n    ...others,\n    children: [icon && /* @__PURE__ */jsx(\"span\", {\n      ...getStyles(\"icon\"),\n      children: icon\n    }), children, cite && /* @__PURE__ */jsx(\"cite\", {\n      ...getStyles(\"cite\"),\n      children: cite\n    })]\n  });\n});\nBlockquote.classes = classes;\nBlockquote.displayName = \"@mantine/core/Blockquote\";\nexport { Blockquote };","map":{"version":3,"names":["defaultProps","iconSize","varsResolver","createVarsResolver","theme","color","radius","darkParsed","parseThemeColor","primaryColor","colorScheme","lightParsed","root","rgba","value","getThemeColor","rem","getRadius","Blockquote","factory","_props","ref","props","useProps","classNames","className","style","styles","unstyled","vars","children","icon","cite","others","getStyles","useStyles","name","classes","jsxs","Box","component","jsx","displayName"],"sources":["/Users/clarencechau/Documents/projects/personal-website/clarencechau.github.io/node_modules/@mantine/core/src/components/Blockquote/Blockquote.tsx"],"sourcesContent":["import {\n  Box,\n  BoxProps,\n  createVarsResolver,\n  ElementProps,\n  factory,\n  Factory,\n  getRadius,\n  getThemeColor,\n  MantineColor,\n  MantineRadius,\n  parseThemeColor,\n  rem,\n  rgba,\n  StylesApiProps,\n  useProps,\n  useStyles,\n} from '../../core';\nimport classes from './Blockquote.module.css';\n\nexport type BlockquoteStylesNames = 'root' | 'icon' | 'cite';\nexport type BlockquoteCssVariables = {\n  root: '--bq-bg-light' | '--bq-bg-dark' | '--bq-bd' | '--bq-icon-size' | '--bq-radius';\n};\n\nexport interface BlockquoteProps\n  extends BoxProps,\n    StylesApiProps<BlockquoteFactory>,\n    ElementProps<'blockquote', 'cite'> {\n  /** Blockquote icon, displayed on the top left */\n  icon?: React.ReactNode;\n\n  /** Controls icon `width` and `height`, numbers are converted to rem, `40` by default */\n  iconSize?: number | string;\n\n  /** Key of `theme.colors` or any valid CSS color, `theme.primaryColor` by default */\n  color?: MantineColor;\n\n  /** Key of `theme.radius` or any valid CSS value to set `border-radius`, `theme.defaultRadius` by default */\n  radius?: MantineRadius;\n\n  /** Reference to a cited quote */\n  cite?: React.ReactNode;\n}\n\nexport type BlockquoteFactory = Factory<{\n  props: BlockquoteProps;\n  ref: HTMLQuoteElement;\n  stylesNames: BlockquoteStylesNames;\n  vars: BlockquoteCssVariables;\n}>;\n\nconst defaultProps: Partial<BlockquoteProps> = {\n  iconSize: 48,\n};\n\nconst varsResolver = createVarsResolver<BlockquoteFactory>((theme, { color, iconSize, radius }) => {\n  const darkParsed = parseThemeColor({\n    color: color || theme.primaryColor,\n    theme,\n    colorScheme: 'dark',\n  });\n\n  const lightParsed = parseThemeColor({\n    color: color || theme.primaryColor,\n    theme,\n    colorScheme: 'light',\n  });\n\n  return {\n    root: {\n      '--bq-bg-light': rgba(lightParsed.value, 0.07),\n      '--bq-bg-dark': rgba(darkParsed.value, 0.06),\n      '--bq-bd': getThemeColor(color, theme),\n      '--bq-icon-size': rem(iconSize),\n      '--bq-radius': getRadius(radius),\n    },\n  };\n});\n\nexport const Blockquote = factory<BlockquoteFactory>((_props, ref) => {\n  const props = useProps('Blockquote', defaultProps, _props);\n  const {\n    classNames,\n    className,\n    style,\n    styles,\n    unstyled,\n    vars,\n    children,\n    icon,\n    iconSize,\n    cite,\n    ...others\n  } = props;\n\n  const getStyles = useStyles<BlockquoteFactory>({\n    name: 'Blockquote',\n    classes,\n    props,\n    className,\n    style,\n    classNames,\n    styles,\n    unstyled,\n    vars,\n    varsResolver,\n  });\n\n  return (\n    <Box component=\"blockquote\" ref={ref} {...getStyles('root')} {...others}>\n      {icon && <span {...getStyles('icon')}>{icon}</span>}\n      {children}\n      {cite && <cite {...getStyles('cite')}>{cite}</cite>}\n    </Box>\n  );\n});\n\nBlockquote.classes = classes;\nBlockquote.displayName = '@mantine/core/Blockquote';\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAeA,MAAMA,YAAY,GAAG;EACnBC,QAAQ,EAAE;AACZ,CAAC;AACD,MAAMC,YAAY,GAAGC,kBAAkB,CAAC,CAACC,KAAK,EAAE;EAAEC,KAAK;EAAEJ,QAAQ;EAAEK;AAAM,CAAE,KAAK;EAC9E,MAAMC,UAAU,GAAGC,eAAe,CAAC;IACjCH,KAAK,EAAEA,KAAK,IAAID,KAAK,CAACK,YAAY;IAClCL,KAAK;IACLM,WAAW,EAAE;EACjB,CAAG,CAAC;EACF,MAAMC,WAAW,GAAGH,eAAe,CAAC;IAClCH,KAAK,EAAEA,KAAK,IAAID,KAAK,CAACK,YAAY;IAClCL,KAAK;IACLM,WAAW,EAAE;EACjB,CAAG,CAAC;EACF,OAAO;IACLE,IAAI,EAAE;MACJ,eAAe,EAAEC,IAAI,CAACF,WAAW,CAACG,KAAK,EAAE,IAAI,CAAC;MAC9C,cAAc,EAAED,IAAI,CAACN,UAAU,CAACO,KAAK,EAAE,IAAI,CAAC;MAC5C,SAAS,EAAEC,aAAa,CAACV,KAAK,EAAED,KAAK,CAAC;MACtC,gBAAgB,EAAEY,GAAG,CAACf,QAAQ,CAAC;MAC/B,aAAa,EAAEgB,SAAS,CAACX,MAAM;IACrC;EACG;AACH,CAAC,CAAC;AACU,MAACY,UAAU,GAAGC,OAAO,CAAC,CAACC,MAAM,EAAEC,GAAG,KAAK;EACjD,MAAMC,KAAK,GAAGC,QAAQ,CAAC,YAAY,EAAEvB,YAAY,EAAEoB,MAAM,CAAC;EAC1D,MAAM;IACJI,UAAU;IACVC,SAAS;IACTC,KAAK;IACLC,MAAM;IACNC,QAAQ;IACRC,IAAI;IACJC,QAAQ;IACRC,IAAI;IACJ9B,QAAQ;IACR+B,IAAI;IACJ,GAAGC;EACP,CAAG,GAAGX,KAAK;EACT,MAAMY,SAAS,GAAGC,SAAS,CAAC;IAC1BC,IAAI,EAAE,YAAY;IAClBC,OAAO;IACPf,KAAK;IACLG,SAAS;IACTC,KAAK;IACLF,UAAU;IACVG,MAAM;IACNC,QAAQ;IACRC,IAAI;IACJ3B;EACJ,CAAG,CAAC;EACF,sBAAuBoC,IAAI,CAACC,GAAG,EAAE;IAAEC,SAAS,EAAE,YAAY;IAAEnB,GAAG;IAAE,GAAGa,SAAS,CAAC,MAAM,CAAC;IAAE,GAAGD,MAAM;IAAEH,QAAQ,EAAE,CAC1GC,IAAI,IAAoB,eAAAU,GAAG,CAAC,MAAM,EAAE;MAAE,GAAGP,SAAS,CAAC,MAAM,CAAC;MAAEJ,QAAQ,EAAEC;IAAI,CAAE,CAAC,EAC7ED,QAAQ,EACRE,IAAI,IAAoB,eAAAS,GAAG,CAAC,MAAM,EAAE;MAAE,GAAGP,SAAS,CAAC,MAAM,CAAC;MAAEJ,QAAQ,EAAEE;IAAM;EAC7E,CAAE,CAAC;AACN,CAAC;AACDd,UAAU,CAACmB,OAAO,GAAGA,OAAO;AAC5BnB,UAAU,CAACwB,WAAW,GAAG,0BAA0B"},"metadata":{},"sourceType":"module","externalDependencies":[]}