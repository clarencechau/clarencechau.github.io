{"ast":null,"code":"'use client';\n\nimport { useState, useRef, useCallback, useEffect } from 'react';\nfunction getFullscreenElement() {\n  const _document = window.document;\n  const fullscreenElement = _document.fullscreenElement || _document.webkitFullscreenElement || _document.mozFullScreenElement || _document.msFullscreenElement;\n  return fullscreenElement;\n}\nfunction exitFullscreen() {\n  const _document = window.document;\n  if (typeof _document.exitFullscreen === \"function\") {\n    return _document.exitFullscreen();\n  }\n  if (typeof _document.msExitFullscreen === \"function\") {\n    return _document.msExitFullscreen();\n  }\n  if (typeof _document.webkitExitFullscreen === \"function\") {\n    return _document.webkitExitFullscreen();\n  }\n  if (typeof _document.mozCancelFullScreen === \"function\") {\n    return _document.mozCancelFullScreen();\n  }\n  return null;\n}\nfunction enterFullScreen(element) {\n  const _element = element;\n  return _element.requestFullscreen?.() || _element.msRequestFullscreen?.() || _element.webkitEnterFullscreen?.() || _element.webkitRequestFullscreen?.() || _element.mozRequestFullscreen?.();\n}\nconst prefixes = [\"\", \"webkit\", \"moz\", \"ms\"];\nfunction addEvents(element, {\n  onFullScreen,\n  onError\n}) {\n  prefixes.forEach(prefix => {\n    element.addEventListener(`${prefix}fullscreenchange`, onFullScreen);\n    element.addEventListener(`${prefix}fullscreenerror`, onError);\n  });\n  return () => {\n    prefixes.forEach(prefix => {\n      element.removeEventListener(`${prefix}fullscreenchange`, onFullScreen);\n      element.removeEventListener(`${prefix}fullscreenerror`, onError);\n    });\n  };\n}\nfunction useFullscreen() {\n  const [fullscreen, setFullscreen] = useState(false);\n  const _ref = useRef();\n  const handleFullscreenChange = useCallback(event => {\n    setFullscreen(event.target === getFullscreenElement());\n  }, [setFullscreen]);\n  const handleFullscreenError = useCallback(event => {\n    setFullscreen(false);\n    console.error(`[@mantine/hooks] use-fullscreen: Error attempting full-screen mode method: ${event} (${event.target})`);\n  }, [setFullscreen]);\n  const toggle = useCallback(async () => {\n    if (!getFullscreenElement()) {\n      await enterFullScreen(_ref.current);\n    } else {\n      await exitFullscreen();\n    }\n  }, []);\n  const ref = useCallback(element => {\n    if (element === null) {\n      _ref.current = window.document.documentElement;\n    } else {\n      _ref.current = element;\n    }\n  }, []);\n  useEffect(() => {\n    if (!_ref.current && window.document) {\n      _ref.current = window.document.documentElement;\n      return addEvents(_ref.current, {\n        onFullScreen: handleFullscreenChange,\n        onError: handleFullscreenError\n      });\n    }\n    if (_ref.current) {\n      return addEvents(_ref.current, {\n        onFullScreen: handleFullscreenChange,\n        onError: handleFullscreenError\n      });\n    }\n    return void 0;\n  }, [_ref.current]);\n  return {\n    ref,\n    toggle,\n    fullscreen\n  };\n}\nexport { useFullscreen };","map":{"version":3,"names":["getFullscreenElement","_document","window","document","fullscreenElement","webkitFullscreenElement","mozFullScreenElement","msFullscreenElement","exitFullscreen","msExitFullscreen","webkitExitFullscreen","mozCancelFullScreen","enterFullScreen","element","_element","requestFullscreen","msRequestFullscreen","webkitEnterFullscreen","webkitRequestFullscreen","mozRequestFullscreen","prefixes","addEvents","onFullScreen","onError","forEach","prefix","addEventListener","removeEventListener","useFullscreen","fullscreen","setFullscreen","useState","_ref","useRef","handleFullscreenChange","useCallback","event","target","handleFullscreenError","console","error","toggle","current","ref","documentElement","useEffect"],"sources":["/Users/clarencechau/Documents/projects/personal-website/clarencechau.github.io/node_modules/@mantine/hooks/src/use-fullscreen/use-fullscreen.ts"],"sourcesContent":["import { useCallback, useEffect, useRef, useState } from 'react';\n\nfunction getFullscreenElement(): HTMLElement | null {\n  const _document = window.document as any;\n\n  const fullscreenElement =\n    _document.fullscreenElement ||\n    _document.webkitFullscreenElement ||\n    _document.mozFullScreenElement ||\n    _document.msFullscreenElement;\n\n  return fullscreenElement;\n}\n\nfunction exitFullscreen() {\n  const _document = window.document as any;\n\n  if (typeof _document.exitFullscreen === 'function') {\n    return _document.exitFullscreen();\n  }\n  if (typeof _document.msExitFullscreen === 'function') {\n    return _document.msExitFullscreen();\n  }\n  if (typeof _document.webkitExitFullscreen === 'function') {\n    return _document.webkitExitFullscreen();\n  }\n  if (typeof _document.mozCancelFullScreen === 'function') {\n    return _document.mozCancelFullScreen();\n  }\n\n  return null;\n}\n\nfunction enterFullScreen(element: HTMLElement) {\n  const _element = element as any;\n\n  return (\n    _element.requestFullscreen?.() ||\n    _element.msRequestFullscreen?.() ||\n    _element.webkitEnterFullscreen?.() ||\n    _element.webkitRequestFullscreen?.() ||\n    _element.mozRequestFullscreen?.()\n  );\n}\n\nconst prefixes = ['', 'webkit', 'moz', 'ms'];\n\nfunction addEvents(\n  element: HTMLElement,\n  {\n    onFullScreen,\n    onError,\n  }: { onFullScreen: (event: Event) => void; onError: (event: Event) => void }\n) {\n  prefixes.forEach((prefix) => {\n    element.addEventListener(`${prefix}fullscreenchange`, onFullScreen);\n    element.addEventListener(`${prefix}fullscreenerror`, onError);\n  });\n\n  return () => {\n    prefixes.forEach((prefix) => {\n      element.removeEventListener(`${prefix}fullscreenchange`, onFullScreen);\n      element.removeEventListener(`${prefix}fullscreenerror`, onError);\n    });\n  };\n}\n\nexport function useFullscreen<T extends HTMLElement = any>() {\n  const [fullscreen, setFullscreen] = useState<boolean>(false);\n\n  const _ref = useRef<T>();\n\n  const handleFullscreenChange = useCallback(\n    (event: Event) => {\n      setFullscreen(event.target === getFullscreenElement());\n    },\n    [setFullscreen]\n  );\n\n  const handleFullscreenError = useCallback(\n    (event: Event) => {\n      setFullscreen(false);\n      // eslint-disable-next-line no-console\n      console.error(\n        `[@mantine/hooks] use-fullscreen: Error attempting full-screen mode method: ${event} (${event.target})`\n      );\n    },\n    [setFullscreen]\n  );\n\n  const toggle = useCallback(async () => {\n    if (!getFullscreenElement()) {\n      await enterFullScreen(_ref.current!);\n    } else {\n      await exitFullscreen();\n    }\n  }, []);\n\n  const ref = useCallback((element: T | null) => {\n    if (element === null) {\n      _ref.current = window.document.documentElement as T;\n    } else {\n      _ref.current = element;\n    }\n  }, []);\n\n  useEffect(() => {\n    if (!_ref.current && window.document) {\n      _ref.current = window.document.documentElement as T;\n      return addEvents(_ref.current, {\n        onFullScreen: handleFullscreenChange,\n        onError: handleFullscreenError,\n      });\n    }\n\n    if (_ref.current) {\n      return addEvents(_ref.current, {\n        onFullScreen: handleFullscreenChange,\n        onError: handleFullscreenError,\n      });\n    }\n\n    return undefined;\n  }, [_ref.current]);\n\n  return { ref, toggle, fullscreen } as const;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}