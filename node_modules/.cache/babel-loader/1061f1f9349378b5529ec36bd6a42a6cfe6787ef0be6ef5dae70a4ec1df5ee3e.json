{"ast":null,"code":"'use client';\n\nimport { jsx, jsxs, Fragment } from 'react/jsx-runtime';\nimport { useEffect } from 'react';\nimport { useId, useUncontrolled } from '@mantine/hooks';\nimport 'clsx';\nimport { useResolvedStylesApi } from '../../core/styles-api/use-resolved-styles-api/use-resolved-styles-api.mjs';\nimport { useStyles } from '../../core/styles-api/use-styles/use-styles.mjs';\nimport '../../core/MantineProvider/Mantine.context.mjs';\nimport '../../core/MantineProvider/default-theme.mjs';\nimport '../../core/MantineProvider/MantineProvider.mjs';\nimport '../../core/MantineProvider/MantineThemeProvider/MantineThemeProvider.mjs';\nimport { useProps } from '../../core/MantineProvider/use-props/use-props.mjs';\nimport '../../core/MantineProvider/MantineCssVariables/MantineCssVariables.mjs';\nimport { extractStyleProps } from '../../core/Box/style-props/extract-style-props/extract-style-props.mjs';\nimport '../../core/Box/Box.mjs';\nimport { factory } from '../../core/factory/factory.mjs';\nimport '../../core/DirectionProvider/DirectionProvider.mjs';\nimport { getParsedComboboxData } from '../Combobox/get-parsed-combobox-data/get-parsed-combobox-data.mjs';\nimport { getOptionsLockup } from '../Combobox/get-options-lockup/get-options-lockup.mjs';\nimport '../Combobox/ComboboxChevron/ComboboxChevron.mjs';\nimport { Combobox } from '../Combobox/Combobox.mjs';\nimport '../Combobox/ComboboxDropdown/ComboboxDropdown.mjs';\nimport '../Combobox/ComboboxOptions/ComboboxOptions.mjs';\nimport '../Combobox/ComboboxOption/ComboboxOption.mjs';\nimport '../Combobox/ComboboxTarget/ComboboxTarget.mjs';\nimport '../Combobox/ComboboxSearch/ComboboxSearch.mjs';\nimport '../Combobox/ComboboxEmpty/ComboboxEmpty.mjs';\nimport '../Combobox/ComboboxFooter/ComboboxFooter.mjs';\nimport '../Combobox/ComboboxHeader/ComboboxHeader.mjs';\nimport '../Combobox/ComboboxEventsTarget/ComboboxEventsTarget.mjs';\nimport '../Combobox/ComboboxDropdownTarget/ComboboxDropdownTarget.mjs';\nimport '../Combobox/ComboboxGroup/ComboboxGroup.mjs';\nimport '../Combobox/ComboboxClearButton/ComboboxClearButton.mjs';\nimport '../Combobox/ComboboxHiddenInput/ComboboxHiddenInput.mjs';\nimport { OptionsDropdown } from '../Combobox/OptionsDropdown/OptionsDropdown.mjs';\nimport { useCombobox } from '../Combobox/use-combobox/use-combobox.mjs';\nimport '../Combobox/Combobox.context.mjs';\nimport { InputBase } from '../InputBase/InputBase.mjs';\nimport { Pill } from '../Pill/Pill.mjs';\nimport '../Pill/PillGroup/PillGroup.mjs';\nimport { PillsInput } from '../PillsInput/PillsInput.mjs';\nimport '../PillsInput/PillsInputField/PillsInputField.mjs';\nimport { filterPickedValues } from './filter-picked-values.mjs';\nconst defaultProps = {\n  maxValues: Infinity,\n  withCheckIcon: true,\n  checkIconPosition: \"left\",\n  hiddenInputValuesDivider: \",\"\n};\nconst MultiSelect = factory((_props, ref) => {\n  const props = useProps(\"MultiSelect\", defaultProps, _props);\n  const {\n    classNames,\n    className,\n    style,\n    styles,\n    unstyled,\n    vars,\n    size,\n    value,\n    defaultValue,\n    onChange,\n    onKeyDown,\n    variant,\n    data,\n    dropdownOpened,\n    defaultDropdownOpened,\n    onDropdownOpen,\n    onDropdownClose,\n    selectFirstOptionOnChange,\n    onOptionSubmit,\n    comboboxProps,\n    filter,\n    limit,\n    withScrollArea,\n    maxDropdownHeight,\n    searchValue,\n    defaultSearchValue,\n    onSearchChange,\n    readOnly,\n    disabled,\n    onFocus,\n    onBlur,\n    onPaste,\n    radius,\n    rightSection,\n    rightSectionWidth,\n    rightSectionPointerEvents,\n    rightSectionProps,\n    leftSection,\n    leftSectionWidth,\n    leftSectionPointerEvents,\n    leftSectionProps,\n    inputContainer,\n    inputWrapperOrder,\n    withAsterisk,\n    labelProps,\n    descriptionProps,\n    errorProps,\n    wrapperProps,\n    description,\n    label,\n    error,\n    maxValues,\n    searchable,\n    nothingFoundMessage,\n    withCheckIcon,\n    checkIconPosition,\n    hidePickedOptions,\n    withErrorStyles,\n    name,\n    form,\n    id,\n    clearable,\n    clearButtonProps,\n    hiddenInputProps,\n    placeholder,\n    hiddenInputValuesDivider,\n    required,\n    mod,\n    renderOption,\n    onRemove,\n    onClear,\n    scrollAreaProps,\n    ...others\n  } = props;\n  const _id = useId(id);\n  const parsedData = getParsedComboboxData(data);\n  const optionsLockup = getOptionsLockup(parsedData);\n  const combobox = useCombobox({\n    opened: dropdownOpened,\n    defaultOpened: defaultDropdownOpened,\n    onDropdownOpen,\n    onDropdownClose: () => {\n      onDropdownClose?.();\n      combobox.resetSelectedOption();\n    }\n  });\n  const {\n    styleProps,\n    rest: {\n      type,\n      autoComplete,\n      ...rest\n    }\n  } = extractStyleProps(others);\n  const [_value, setValue] = useUncontrolled({\n    value,\n    defaultValue,\n    finalValue: [],\n    onChange\n  });\n  const [_searchValue, setSearchValue] = useUncontrolled({\n    value: searchValue,\n    defaultValue: defaultSearchValue,\n    finalValue: \"\",\n    onChange: onSearchChange\n  });\n  const getStyles = useStyles({\n    name: \"MultiSelect\",\n    classes: {},\n    props,\n    classNames,\n    styles,\n    unstyled\n  });\n  const {\n    resolvedClassNames,\n    resolvedStyles\n  } = useResolvedStylesApi({\n    props,\n    styles,\n    classNames\n  });\n  const handleInputKeydown = event => {\n    onKeyDown?.(event);\n    if (event.key === \" \" && !searchable) {\n      event.preventDefault();\n      combobox.toggleDropdown();\n    }\n    if (event.key === \"Backspace\" && _searchValue.length === 0 && _value.length > 0) {\n      onRemove?.(_value[_value.length - 1]);\n      setValue(_value.slice(0, _value.length - 1));\n    }\n  };\n  const values = _value.map((item, index) => /* @__PURE__ */jsx(Pill, {\n    withRemoveButton: !readOnly && !optionsLockup[item]?.disabled,\n    onRemove: () => {\n      setValue(_value.filter(i => item !== i));\n      onRemove?.(item);\n    },\n    unstyled,\n    disabled,\n    ...getStyles(\"pill\"),\n    children: optionsLockup[item]?.label || item\n  }, `${item}-${index}`));\n  useEffect(() => {\n    if (selectFirstOptionOnChange) {\n      combobox.selectFirstOption();\n    }\n  }, [selectFirstOptionOnChange, _value]);\n  const clearButton = clearable && _value.length > 0 && !disabled && !readOnly && /* @__PURE__ */jsx(Combobox.ClearButton, {\n    size,\n    ...clearButtonProps,\n    onClear: () => {\n      onClear?.();\n      setValue([]);\n      setSearchValue(\"\");\n    }\n  });\n  const filteredData = filterPickedValues({\n    data: parsedData,\n    value: _value\n  });\n  return /* @__PURE__ */jsxs(Fragment, {\n    children: [/* @__PURE__ */jsxs(Combobox, {\n      store: combobox,\n      classNames: resolvedClassNames,\n      styles: resolvedStyles,\n      unstyled,\n      size,\n      readOnly,\n      __staticSelector: \"MultiSelect\",\n      onOptionSubmit: val => {\n        onOptionSubmit?.(val);\n        setSearchValue(\"\");\n        combobox.updateSelectedOptionIndex(\"selected\");\n        if (_value.includes(optionsLockup[val].value)) {\n          setValue(_value.filter(v => v !== optionsLockup[val].value));\n          onRemove?.(optionsLockup[val].value);\n        } else if (_value.length < maxValues) {\n          setValue([..._value, optionsLockup[val].value]);\n        }\n      },\n      ...comboboxProps,\n      children: [/* @__PURE__ */jsx(Combobox.DropdownTarget, {\n        children: /* @__PURE__ */jsx(PillsInput, {\n          ...styleProps,\n          __staticSelector: \"MultiSelect\",\n          classNames: resolvedClassNames,\n          styles: resolvedStyles,\n          unstyled,\n          size,\n          className,\n          style,\n          variant,\n          disabled,\n          radius,\n          rightSection: rightSection || clearButton || /* @__PURE__ */jsx(Combobox.Chevron, {\n            size,\n            error,\n            unstyled\n          }),\n          rightSectionPointerEvents: rightSectionPointerEvents || (clearButton ? \"all\" : \"none\"),\n          rightSectionWidth,\n          rightSectionProps,\n          leftSection,\n          leftSectionWidth,\n          leftSectionPointerEvents,\n          leftSectionProps,\n          inputContainer,\n          inputWrapperOrder,\n          withAsterisk,\n          labelProps,\n          descriptionProps,\n          errorProps,\n          wrapperProps,\n          description,\n          label,\n          error,\n          multiline: true,\n          withErrorStyles,\n          __stylesApiProps: {\n            ...props,\n            rightSectionPointerEvents: rightSectionPointerEvents || (clearButton ? \"all\" : \"none\"),\n            multiline: true\n          },\n          pointer: !searchable,\n          onClick: () => searchable ? combobox.openDropdown() : combobox.toggleDropdown(),\n          \"data-expanded\": combobox.dropdownOpened || void 0,\n          id: _id,\n          required,\n          mod,\n          children: /* @__PURE__ */jsxs(Pill.Group, {\n            disabled,\n            unstyled,\n            ...getStyles(\"pillsList\"),\n            children: [values, /* @__PURE__ */jsx(Combobox.EventsTarget, {\n              autoComplete,\n              children: /* @__PURE__ */jsx(PillsInput.Field, {\n                ...rest,\n                ref,\n                id: _id,\n                placeholder,\n                type: !searchable && !placeholder ? \"hidden\" : \"visible\",\n                ...getStyles(\"inputField\"),\n                unstyled,\n                onFocus: event => {\n                  onFocus?.(event);\n                  searchable && combobox.openDropdown();\n                },\n                onBlur: event => {\n                  onBlur?.(event);\n                  combobox.closeDropdown();\n                  setSearchValue(\"\");\n                },\n                onKeyDown: handleInputKeydown,\n                value: _searchValue,\n                onChange: event => {\n                  setSearchValue(event.currentTarget.value);\n                  searchable && combobox.openDropdown();\n                  selectFirstOptionOnChange && combobox.selectFirstOption();\n                },\n                disabled,\n                readOnly: readOnly || !searchable,\n                pointer: !searchable\n              })\n            })]\n          })\n        })\n      }), /* @__PURE__ */jsx(OptionsDropdown, {\n        data: hidePickedOptions ? filteredData : parsedData,\n        hidden: readOnly || disabled,\n        filter,\n        search: _searchValue,\n        limit,\n        hiddenWhenEmpty: !nothingFoundMessage,\n        withScrollArea,\n        maxDropdownHeight,\n        filterOptions: searchable,\n        value: _value,\n        checkIconPosition,\n        withCheckIcon,\n        nothingFoundMessage,\n        unstyled,\n        labelId: label ? `${_id}-label` : void 0,\n        \"aria-label\": label ? void 0 : others[\"aria-label\"],\n        renderOption,\n        scrollAreaProps\n      })]\n    }), /* @__PURE__ */jsx(Combobox.HiddenInput, {\n      name,\n      valuesDivider: hiddenInputValuesDivider,\n      value: _value,\n      form,\n      disabled,\n      ...hiddenInputProps\n    })]\n  });\n});\nMultiSelect.classes = {\n  ...InputBase.classes,\n  ...Combobox.classes\n};\nMultiSelect.displayName = \"@mantine/core/MultiSelect\";\nexport { MultiSelect };","map":{"version":3,"names":["defaultProps","maxValues","Infinity","withCheckIcon","checkIconPosition","hiddenInputValuesDivider","MultiSelect","factory","_props","ref","props","useProps","classNames","className","style","styles","unstyled","vars","size","value","defaultValue","onChange","onKeyDown","variant","data","dropdownOpened","defaultDropdownOpened","onDropdownOpen","onDropdownClose","selectFirstOptionOnChange","onOptionSubmit","comboboxProps","filter","limit","withScrollArea","maxDropdownHeight","searchValue","defaultSearchValue","onSearchChange","readOnly","disabled","onFocus","onBlur","onPaste","radius","rightSection","rightSectionWidth","rightSectionPointerEvents","rightSectionProps","leftSection","leftSectionWidth","leftSectionPointerEvents","leftSectionProps","inputContainer","inputWrapperOrder","withAsterisk","labelProps","descriptionProps","errorProps","wrapperProps","description","label","error","searchable","nothingFoundMessage","hidePickedOptions","withErrorStyles","name","form","id","clearable","clearButtonProps","hiddenInputProps","placeholder","required","mod","renderOption","onRemove","onClear","scrollAreaProps","others","_id","useId","parsedData","getParsedComboboxData","optionsLockup","getOptionsLockup","combobox","useCombobox","opened","defaultOpened","resetSelectedOption","styleProps","rest","type","autoComplete","extractStyleProps","_value","setValue","useUncontrolled","finalValue","_searchValue","setSearchValue","getStyles","useStyles","classes","resolvedClassNames","resolvedStyles","useResolvedStylesApi","handleInputKeydown","event","key","preventDefault","toggleDropdown","length","slice","values","map","item","index","jsx","Pill","withRemoveButton","i","children","useEffect","selectFirstOption","clearButton","Combobox","ClearButton","filteredData","filterPickedValues","jsxs","Fragment","store","__staticSelector","val","updateSelectedOptionIndex","includes","v","DropdownTarget","PillsInput","Chevron","multiline","__stylesApiProps","pointer","onClick","openDropdown","Group","EventsTarget","Field","closeDropdown","currentTarget","OptionsDropdown","hidden","search","hiddenWhenEmpty","filterOptions","labelId","HiddenInput","valuesDivider","InputBase","displayName"],"sources":["/Users/clarencechau/Documents/projects/personal-website/clarencechau.github.io/node_modules/@mantine/core/src/components/MultiSelect/MultiSelect.tsx"],"sourcesContent":["import { useEffect } from 'react';\nimport { useId, useUncontrolled } from '@mantine/hooks';\nimport {\n  BoxProps,\n  ElementProps,\n  extractStyleProps,\n  factory,\n  Factory,\n  StylesApiProps,\n  useProps,\n  useResolvedStylesApi,\n  useStyles,\n} from '../../core';\nimport { __CloseButtonProps } from '../CloseButton';\nimport {\n  Combobox,\n  ComboboxItem,\n  ComboboxLikeProps,\n  ComboboxLikeRenderOptionInput,\n  ComboboxLikeStylesNames,\n  getOptionsLockup,\n  getParsedComboboxData,\n  OptionsDropdown,\n  useCombobox,\n} from '../Combobox';\nimport { __BaseInputProps, __InputStylesNames } from '../Input';\nimport { InputBase } from '../InputBase';\nimport { Pill } from '../Pill';\nimport { PillsInput } from '../PillsInput';\nimport { ScrollAreaProps } from '../ScrollArea';\nimport { filterPickedValues } from './filter-picked-values';\n\nexport type MultiSelectStylesNames =\n  | __InputStylesNames\n  | ComboboxLikeStylesNames\n  | 'pill'\n  | 'pillsList'\n  | 'inputField';\n\nexport interface MultiSelectProps\n  extends BoxProps,\n    __BaseInputProps,\n    ComboboxLikeProps,\n    StylesApiProps<MultiSelectFactory>,\n    ElementProps<'input', 'size' | 'value' | 'defaultValue' | 'onChange'> {\n  /** Controlled component value */\n  value?: string[];\n\n  /** Default value for uncontrolled component */\n  defaultValue?: string[];\n\n  /** Called when value changes */\n  onChange?: (value: string[]) => void;\n\n  /** Called with `value` of the removed item */\n  onRemove?: (value: string) => void;\n\n  /** Called when the clear button is clicked */\n  onClear?: () => void;\n\n  /** Controlled search value */\n  searchValue?: string;\n\n  /** Default search value */\n  defaultSearchValue?: string;\n\n  /** Called when search changes */\n  onSearchChange?: (value: string) => void;\n\n  /** Maximum number of values, `Infinity` by default */\n  maxValues?: number;\n\n  /** Determines whether the select should be searchable, `false` by default */\n  searchable?: boolean;\n\n  /** Message displayed when no option matches the current search query while the `searchable` prop is set or there is no data */\n  nothingFoundMessage?: React.ReactNode;\n\n  /** Determines whether check icon should be displayed near the selected option label, `true` by default */\n  withCheckIcon?: boolean;\n\n  /** Position of the check icon relative to the option label, `'left'` by default */\n  checkIconPosition?: 'left' | 'right';\n\n  /** Determines whether picked options should be removed from the options list, `false` by default */\n  hidePickedOptions?: boolean;\n\n  /** Determines whether the clear button should be displayed in the right section when the component has value, `false` by default */\n  clearable?: boolean;\n\n  /** Props passed down to the clear button */\n  clearButtonProps?: __CloseButtonProps & ElementProps<'button'>;\n\n  /** Props passed down to the hidden input */\n  hiddenInputProps?: Omit<React.ComponentPropsWithoutRef<'input'>, 'value'>;\n\n  /** Divider used to separate values in the hidden input `value` attribute, `','` by default */\n  hiddenInputValuesDivider?: string;\n\n  /** A function to render content of the option, replaces the default content of the option */\n  renderOption?: (item: ComboboxLikeRenderOptionInput<ComboboxItem>) => React.ReactNode;\n\n  /** Props passed down to the underlying `ScrollArea` component in the dropdown */\n  scrollAreaProps?: ScrollAreaProps;\n}\n\nexport type MultiSelectFactory = Factory<{\n  props: MultiSelectProps;\n  ref: HTMLInputElement;\n  stylesNames: MultiSelectStylesNames;\n}>;\n\nconst defaultProps: Partial<MultiSelectProps> = {\n  maxValues: Infinity,\n  withCheckIcon: true,\n  checkIconPosition: 'left',\n  hiddenInputValuesDivider: ',',\n};\n\nexport const MultiSelect = factory<MultiSelectFactory>((_props, ref) => {\n  const props = useProps('MultiSelect', defaultProps, _props);\n  const {\n    classNames,\n    className,\n    style,\n    styles,\n    unstyled,\n    vars,\n    size,\n    value,\n    defaultValue,\n    onChange,\n    onKeyDown,\n    variant,\n    data,\n    dropdownOpened,\n    defaultDropdownOpened,\n    onDropdownOpen,\n    onDropdownClose,\n    selectFirstOptionOnChange,\n    onOptionSubmit,\n    comboboxProps,\n    filter,\n    limit,\n    withScrollArea,\n    maxDropdownHeight,\n    searchValue,\n    defaultSearchValue,\n    onSearchChange,\n    readOnly,\n    disabled,\n    onFocus,\n    onBlur,\n    onPaste,\n    radius,\n    rightSection,\n    rightSectionWidth,\n    rightSectionPointerEvents,\n    rightSectionProps,\n    leftSection,\n    leftSectionWidth,\n    leftSectionPointerEvents,\n    leftSectionProps,\n    inputContainer,\n    inputWrapperOrder,\n    withAsterisk,\n    labelProps,\n    descriptionProps,\n    errorProps,\n    wrapperProps,\n    description,\n    label,\n    error,\n    maxValues,\n    searchable,\n    nothingFoundMessage,\n    withCheckIcon,\n    checkIconPosition,\n    hidePickedOptions,\n    withErrorStyles,\n    name,\n    form,\n    id,\n    clearable,\n    clearButtonProps,\n    hiddenInputProps,\n    placeholder,\n    hiddenInputValuesDivider,\n    required,\n    mod,\n    renderOption,\n    onRemove,\n    onClear,\n    scrollAreaProps,\n    ...others\n  } = props;\n\n  const _id = useId(id);\n  const parsedData = getParsedComboboxData(data);\n  const optionsLockup = getOptionsLockup(parsedData);\n\n  const combobox = useCombobox({\n    opened: dropdownOpened,\n    defaultOpened: defaultDropdownOpened,\n    onDropdownOpen,\n    onDropdownClose: () => {\n      onDropdownClose?.();\n      combobox.resetSelectedOption();\n    },\n  });\n\n  const {\n    styleProps,\n    rest: { type, autoComplete, ...rest },\n  } = extractStyleProps(others);\n\n  const [_value, setValue] = useUncontrolled({\n    value,\n    defaultValue,\n    finalValue: [],\n    onChange,\n  });\n\n  const [_searchValue, setSearchValue] = useUncontrolled({\n    value: searchValue,\n    defaultValue: defaultSearchValue,\n    finalValue: '',\n    onChange: onSearchChange,\n  });\n\n  const getStyles = useStyles<MultiSelectFactory>({\n    name: 'MultiSelect',\n    classes: {} as any,\n    props,\n    classNames,\n    styles,\n    unstyled,\n  });\n\n  const { resolvedClassNames, resolvedStyles } = useResolvedStylesApi<MultiSelectFactory>({\n    props,\n    styles,\n    classNames,\n  });\n\n  const handleInputKeydown = (event: React.KeyboardEvent<HTMLInputElement>) => {\n    onKeyDown?.(event);\n\n    if (event.key === ' ' && !searchable) {\n      event.preventDefault();\n      combobox.toggleDropdown();\n    }\n\n    if (event.key === 'Backspace' && _searchValue.length === 0 && _value.length > 0) {\n      onRemove?.(_value[_value.length - 1]);\n      setValue(_value.slice(0, _value.length - 1));\n    }\n  };\n\n  const values = _value.map((item, index) => (\n    <Pill\n      key={`${item}-${index}`}\n      withRemoveButton={!readOnly && !optionsLockup[item]?.disabled}\n      onRemove={() => {\n        setValue(_value.filter((i) => item !== i));\n        onRemove?.(item);\n      }}\n      unstyled={unstyled}\n      disabled={disabled}\n      {...getStyles('pill')}\n    >\n      {optionsLockup[item]?.label || item}\n    </Pill>\n  ));\n\n  useEffect(() => {\n    if (selectFirstOptionOnChange) {\n      combobox.selectFirstOption();\n    }\n  }, [selectFirstOptionOnChange, _value]);\n\n  const clearButton = clearable && _value.length > 0 && !disabled && !readOnly && (\n    <Combobox.ClearButton\n      size={size as string}\n      {...clearButtonProps}\n      onClear={() => {\n        onClear?.();\n        setValue([]);\n        setSearchValue('');\n      }}\n    />\n  );\n\n  const filteredData = filterPickedValues({ data: parsedData, value: _value });\n\n  return (\n    <>\n      <Combobox\n        store={combobox}\n        classNames={resolvedClassNames}\n        styles={resolvedStyles}\n        unstyled={unstyled}\n        size={size}\n        readOnly={readOnly}\n        __staticSelector=\"MultiSelect\"\n        onOptionSubmit={(val) => {\n          onOptionSubmit?.(val);\n          setSearchValue('');\n          combobox.updateSelectedOptionIndex('selected');\n\n          if (_value.includes(optionsLockup[val].value)) {\n            setValue(_value.filter((v) => v !== optionsLockup[val].value));\n            onRemove?.(optionsLockup[val].value);\n          } else if (_value.length < maxValues!) {\n            setValue([..._value, optionsLockup[val].value]);\n          }\n        }}\n        {...comboboxProps}\n      >\n        <Combobox.DropdownTarget>\n          <PillsInput\n            {...styleProps}\n            __staticSelector=\"MultiSelect\"\n            classNames={resolvedClassNames}\n            styles={resolvedStyles}\n            unstyled={unstyled}\n            size={size}\n            className={className}\n            style={style}\n            variant={variant}\n            disabled={disabled}\n            radius={radius}\n            rightSection={\n              rightSection ||\n              clearButton || <Combobox.Chevron size={size} error={error} unstyled={unstyled} />\n            }\n            rightSectionPointerEvents={rightSectionPointerEvents || (clearButton ? 'all' : 'none')}\n            rightSectionWidth={rightSectionWidth}\n            rightSectionProps={rightSectionProps}\n            leftSection={leftSection}\n            leftSectionWidth={leftSectionWidth}\n            leftSectionPointerEvents={leftSectionPointerEvents}\n            leftSectionProps={leftSectionProps}\n            inputContainer={inputContainer}\n            inputWrapperOrder={inputWrapperOrder}\n            withAsterisk={withAsterisk}\n            labelProps={labelProps}\n            descriptionProps={descriptionProps}\n            errorProps={errorProps}\n            wrapperProps={wrapperProps}\n            description={description}\n            label={label}\n            error={error}\n            multiline\n            withErrorStyles={withErrorStyles}\n            __stylesApiProps={{\n              ...props,\n              rightSectionPointerEvents:\n                rightSectionPointerEvents || (clearButton ? 'all' : 'none'),\n              multiline: true,\n            }}\n            pointer={!searchable}\n            onClick={() => (searchable ? combobox.openDropdown() : combobox.toggleDropdown())}\n            data-expanded={combobox.dropdownOpened || undefined}\n            id={_id}\n            required={required}\n            mod={mod}\n          >\n            <Pill.Group disabled={disabled} unstyled={unstyled} {...getStyles('pillsList')}>\n              {values}\n              <Combobox.EventsTarget autoComplete={autoComplete}>\n                <PillsInput.Field\n                  {...rest}\n                  ref={ref}\n                  id={_id}\n                  placeholder={placeholder}\n                  type={!searchable && !placeholder ? 'hidden' : 'visible'}\n                  {...getStyles('inputField')}\n                  unstyled={unstyled}\n                  onFocus={(event) => {\n                    onFocus?.(event);\n                    searchable && combobox.openDropdown();\n                  }}\n                  onBlur={(event) => {\n                    onBlur?.(event);\n                    combobox.closeDropdown();\n                    setSearchValue('');\n                  }}\n                  onKeyDown={handleInputKeydown}\n                  value={_searchValue}\n                  onChange={(event) => {\n                    setSearchValue(event.currentTarget.value);\n                    searchable && combobox.openDropdown();\n                    selectFirstOptionOnChange && combobox.selectFirstOption();\n                  }}\n                  disabled={disabled}\n                  readOnly={readOnly || !searchable}\n                  pointer={!searchable}\n                />\n              </Combobox.EventsTarget>\n            </Pill.Group>\n          </PillsInput>\n        </Combobox.DropdownTarget>\n\n        <OptionsDropdown\n          data={hidePickedOptions ? filteredData : parsedData}\n          hidden={readOnly || disabled}\n          filter={filter}\n          search={_searchValue}\n          limit={limit}\n          hiddenWhenEmpty={!nothingFoundMessage}\n          withScrollArea={withScrollArea}\n          maxDropdownHeight={maxDropdownHeight}\n          filterOptions={searchable}\n          value={_value}\n          checkIconPosition={checkIconPosition}\n          withCheckIcon={withCheckIcon}\n          nothingFoundMessage={nothingFoundMessage}\n          unstyled={unstyled}\n          labelId={label ? `${_id}-label` : undefined}\n          aria-label={label ? undefined : others['aria-label']}\n          renderOption={renderOption}\n          scrollAreaProps={scrollAreaProps}\n        />\n      </Combobox>\n      <Combobox.HiddenInput\n        name={name}\n        valuesDivider={hiddenInputValuesDivider}\n        value={_value}\n        form={form}\n        disabled={disabled}\n        {...hiddenInputProps}\n      />\n    </>\n  );\n});\n\nMultiSelect.classes = { ...InputBase.classes, ...Combobox.classes };\nMultiSelect.displayName = '@mantine/core/MultiSelect';\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}